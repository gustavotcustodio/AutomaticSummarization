The transit network design problem with simultaneous frequency setting is considered in the paper. Greedy heuristic and Bee Colony Optimization (BCO) metaheuristic are developed for the problem considered. The numerical experiments are performed on the well-known benchmark problem. The proposed model outperformed the other models known from the literature.

0.151356 - The transit network design problem belongs to the class of hard combinatorial optimization problem, whose optimal solution is not easy to find out.
0.135256 - We consider in this paper the transit network design problem in a way that we simultaneously determine the links to be included in the transit network, assemble chosen links into bus routes, and determine bus frequency on each of the designed routes.
0.263585 - Our approach to the transit network design problem is based on the Bee Colony Optimization (BCO) metaheuristic.
0.098361 - The BCO algorithm is a stochastic, random-search technique that belongs to the class of population-based algorithms.
0.101124 - This technique uses a similarity among the way in which bees in nature look for food, and the way in which optimization algorithms search for an optimum of a combinatorial optimization problem.
0.300139 - The numerical experiments are performed on known benchmark problems.
0.140141 - We clearly show that our approach, based on the BCO algorithm is competitive with the other approaches in the literature and that can generate high-quality solutions.
0.068273 - Heavy traffic congestion in many cities has resulted in an increase in travel times, transportation costs, the number of traffic accidents and the level of air pollution and noise.
0.094891 - The reduction of the number of trips that are made by cars and increasing the share of public transit in the total number of trips are logical actions that can partially improve the traffic situation.
0.052632 - City governments and traffic authorities in many cities are making significant efforts to improve public transit.
0.111470 - Transit network topology and bus frequencies are among the most important factors that determine passengers’ choice of public transit.
0.067003 - In other words, properly designed public transit network and appropriate bus frequency values can considerably raise public transport mode share.
0.112003 - On the other hand, inadequately designed transit network can cause very long passengers’ waiting times, and increase uncertainty in bus arriving times.
0.094527 - Additionally, improperly designed network can demonstrate high inappropriateness among the designed bus routes and paths of the greater part of passengers.
0.064677 - The designed network should offer good connectivity (high number of routes between major trip generators), as well as good geographic coverage.
0.116634 - The chosen transit network and the bus frequencies have a direct influence on the economic results of the transit operator, as well as on the level-of-service offered to the passengers.
0.030769 - Low bus frequencies will result in a high average load factor and a large number of passengers being denied space.
0.056497 - The greater part of these passengers most often turn to other accessible transportation modes (private cars, taxis).
0.103825 - When determining bus frequencies, the interests of both the operator and the passengers must be taken into consideration.
0.074695 - When designing the transit network, one should try to maximize the number of satisfied passengers, to minimize the total number of passenger transfers, to minimize the total travel time of all served passengers, to minimize the fleet size, etc.
0.085766 - The transit agencies and transit operators try to satisfy passengers demand.
0.158531 - On the other hand, passengers demand significantly depends on the offered transit network.
0.076056 - In this way, when designing transit network one should carefully explore passengers’ route choices through the transit network, and assignment of passengers to bus routes.
0.151356 - The transit network design problem belongs to the class of hard combinatorial optimization problem, whose optimal solution is not easy to find out.
0.145681 - The general network design problem is NP-hard (Karp (1975), Magnanti and Wong (1984)).
0.120501 - In other words, “there is little likelihood of devising an efficient (polynomial time) algorithm for solving the general network design problem (Magnanti and Wong (1984)).
0.138642 - Computational complexity of the network design problem forced many researchers to develop and use various heuristic and metaheuristic algorithms.
0.043956 - Meta-heuristics have become dominant tool for solving hard combinatorial optimization problems (Holland, 1975; Goldberg, 1989; Kirkpatrick, Gelatt, and Vecchi, 1983; Cerny, 1985; Mladenović and Hansen, 1997; Dorigo, Maniezzo, and Colorni, 1996, etc.).
0.015873 - Many authors also used hybrid metaheuristic approaches (Tseng and Liang, 2006; Poorzahedy and Rouhani, 2007; Yildiz, 2008, 2009, etc.
0.075985 - In the majority of cases, metaheuristics provide high-quality solutions within reasonable CPU time.
0.014184 - Among metaheuristics, a group of biologically inspired algorithms can be recognized.
0.102341 - Bee Colony Optimization (BCO) method, that uses collective intelligence applied by the honey bees during nectar collecting process, is one of them.
0.056225 - BCO has been proposed by Lučić and Teodorović, 2001, 2002, 2003a, 2003b and up to now it is successfully applied to a range of real-life optimization problems.
0.084967 - Nikolić and Teodorović (2013a) recently performed an empirical study of the BCO algorithm.
0.164511 - The authors applied BCO to optimize 51 numerical test functions from the literature.
0.064327 - The set of functions was reasonable large and included various function types (unimodal, multimodal, multidimensional, etc.).
0.112653 - The obtained results are compared (by using the Student’s t test) with the results achieved by the Artificial Bee Colony, Genetic Algorithm, Differential Evolution, and Particle Swarm Optimization.
0.228782 - The numerical experiments performed on well-known benchmark functions.
0.133333 - The experiments clearly showed that the BCO outperformed competitive approaches.
0.094737 - Successful applications to a range of real-life optimization problems, as well the results obtained by the empirical study of the BCO algorithm encouraged us to also use the BCO concept also in this paper.
0.054726 - Jakšić Kruger, Davidović, Teodorović, and Šelmić (2014) recently provided theoretical verification of the BCO algorithm by proving some convergence properties.
0.085799 - We (Nikolić and Teodorović, 2013b) also recently developed efficient algorithm for public transit network design.
0.227986 - The proposed model is based on the BCO metaheuristic.
0.108844 - This paper represents the extension of the Nikolić and Teodorović’s research.
0.135256 - We consider in this paper the transit network design problem in a way that we simultaneously determine the links to be included in the transit network, assemble chosen links into bus routes, and determine bus frequency on each of the designed routes.
0.244221 - In this paper we develop the model for the transit network design that is based on the Bee Colony Optimization (BCO) metaheuristics.
0.113475 - The BCO algorithm belongs to the class of population-based algorithms.
0.201037 - We compare our approach with other models and algorithms for the public transit network design problem.
0.127175 - We clearly show that our approach, based on the BCO algorithm is competitive with the other approaches in the literature and that can generate high-quality solutions within negligible CPU times.
0.172490 - The paper is organized in the following way.
0.139090 - Problem statement is given in the Section 2.
0.089612 - Section 3 considers passenger assignment problem within public transit network.
0.127660 - The description of the BCO algorithm is given in Section 4.
0.257398 - The BCO approach for the transit network design problem is given in the Section 5.
0.027027 - Section 6 contains performed numerical tests.
0.129182 - Conclusions are given in the Section 7.
0.149596 - Let us consider the road network shown in the Fig 1.
0.101449 - We denote this network by G = (N, A), where N is the set of nodes and A is the set of links.
0.000000 - Nodes represent bus stations, while links represent streets segments that connect stations.
0.074906 - We also, denote by D the origin–destination matrix: (1) where dij is the number of passengers that wish to travel between node i and node j during the observed time period.
0.020202 - Road network Fig 1.
0.022989 - Road network.
0.084507 - By TR we denote the travel time matrix: (2) where trij is the in-vehicle travel time between node i and node j.
0.109589 - We assume in this paper that the network G = (N, A), the O–D matrix D, and the travel time matrix TR are given.
0.109566 - Let us denote by T the total travel time of all passengers in the network.
0.058480 - The total travel time equals: (3) where: TT – total in-vehicle time of all served passengers.
0.000000 - TW – total waiting time of all served passengers.
0.021858 - TTR – total time penalties for all passenger transfers (usually time penalty is equal to 5 min per transfer).
0.101747 - The majority of the transit agencies and operators try to offer to the general public high level of service at reasonable costs.
0.055046 - Therefore, the minimization of the total number of rejected passengers, the minimization of the total travel time of all passengers, as well as the minimization of the total number of busses needed to serve the passengers demand could be legitimate objective functions.
0.054264 - In this paper we consider all three objective functions.
0.102188 - The transit network design problem that we study in this paper could be defined in the following way: For a given network G = (N, A), known origin–destination matrix D that describes demand among these nodes, and known travel time matrix TR, generate set of transit routes on a network and determine bus frequencies along the routes in such a way to optimize considered objective function.
0.175393 - The broad literature review devoted to the transit network design problem is given in our previous research (Nikolić and Teodorović, 2013b).
0.151575 - Passenger flows in public transit depend on the transit network design.
0.129985 - In other words, when performing public transit network design, one should determine the passenger demand on each of the generated routes.
0.102564 - The analyst should determine, for every pair of the origin–destination pairs, passenger flows on paths chosen by the passengers.
0.125926 - These flows are the results of the individual passenger decisions.
0.121687 - Every passenger faces the problem of choosing the path when traveling form origin to destination.
0.093584 - We consider passenger route choice in the case of trip without transfers, as well as passenger choice in the case of trip with one transfer.
0.118621 - Good understanding of the passenger route choice mechanism is one of the key factors in public transit network design procedure.
0.074627 - The following research questions should be adequately answered: How do the characteristics of competitive public transit routes influence passenger route choice?
0.000000 - How do travelers’ characteristics influence route choice?
0.076023 - What is the extent of previously gained passenger experience, and how does it affect route choice?
0.000000 - Research to date has provided answers to some of these questions.
0.028369 - When performing passenger assignment, we use widely accepted frequency share method.
0.010256 - We also assume that all passengers can use one, or maximum two bus lines when traveling from origin to destination.
0.110383 - Passenger assignment in this paper is based on the procedure given in the papers: Shih and Mahmassani (1994) and Shih, Mahmassani, and Baaj (1997).
0.036390 - The following is the Pseudo code of the passenger assignment procedure: Procedure Passenger Assignment () do fori = 1 ton forj = 1 ton if number of passengers which travel from i to j > 0 then Determine the smallest number of transfers for traveling form i to j if passengers can travel i to j with zero transfers then Assign passengers which use one bus line from i to j. else if passengers can travel i to j with one transfers then Assign passengers which use two bus lines from i to j. else Set that passengers whose travel from i to j are unsatisfied.
0.096296 - Determine the number of busses and frequencies for each line.
0.018018 - while (frequencies not converge) 3.1.
0.127343 - Passenger assignment in the case of trips without transfer Let us consider the network shown in the Fig 2.
0.131275 - We denote by L the set of all bus lines in the network.
0.080394 - Let us assume that passengers who wants to travel from the origin station A to the destination station B can use the following set of bus lines: .
0.056338 - Some of these bus lines have nodes A and B as terminals, while some others just pass through the nodes A and B.
0.066667 - The available bus lines for passengers that travel from node A to B Fig 2.
0.071895 - The available bus lines for passengers that travel from node A to B.
0.093897 - We denote respectively by fl and tAB,l the frequency of service and the total travel time along the bus line l ∊ LAB.
0.102106 - We denote by the minimal travel time from the node A to the node B, i.e.
0.086634 - : (4) It could happen that the travel time along some bus lines is considerably higher than the minimal travel time from the node A to the node B.
0.028986 - We assume that passengers do not consider such bus lines as a travel option for planned trip between nodes A and B.
0.094113 - In other words, we define the set of potential bus lines LAB,t to be considered by the passengers for the trip between node A and node B in the following way: (5) where: – threshold prescribed by the analyst.
0.077091 - The number of expected passengers pAB,i that will take ith bus line equals: (6) where: dAB is the total number of passengers whose travel from the station A to the station B.
0.080856 - Passenger assignment in the case of trips with one transfer In the case of trips with one transfer passenger has to choose bus lines two times: at the origin station and at the transfer station.
0.076886 - Like in the previous case, we assume that passengers do not consider paths which have high travel times.
0.084787 - Let us consider a network shown in the Fig 3 and suppose that we should assign passengers that travel from A to B.
0.069150 - Let us also assume that passengers can use the following paths: Path 1: Path 2: Path 3: Path 4: Passenger assignment in the case of trips with one transfer Fig 3.
0.089612 - Passenger assignment in the case of trips with one transfer.
0.075083 - At the bus station A we assign passengers among lines 1 and 2 in the following way: (7) and (8) There is only one passengers’ path (Path 1) that use line 1.
0.075435 - Therefore, we assign all passengers from the line 1 to this path.
0.145681 - On the other hand, there are three passengers’ paths that contain the line 2.
0.076465 - In this case, we divide passengers from the line 2 equally among these paths, i.e.
0.093567 - : (9) Paths that have the same starting bus line and the transfer point form a group.
0.063618 - In the case shown in the Fig 3 we have the following three groups: first one has one path: Path 1, second group has two paths: Path 2 and Path 3, and finally, third group has one path: Path 4.
0.141234 - In the considered case, we assign all passengers from the group 1 to the line 4.
0.138211 - The similar situation is with the third group.
0.090306 - In this case, all passengers that travel from the station 2 to node B will use the line 3.
0.084695 - In the case of group 2, we assign passengers that arrive at station 5 among lines 5 and 6 according to the frequency share rule.
0.051516 - The total number of passenger that arrive to the station 5 equals: (10) Now, the number of passengers that use the line 5 to travel from the station 5 to the station B is equal: (11) And the number of passengers that use the line 6 equals to travel from the station 5 to the station B is equal: (12) 3.3.
0.076305 - Determination of the bus line characteristics After performing the passenger assignment, we calculate the values of the basic quantities (frequency of service, required number of busses, bus headway, etc.)
0.038095 - that characterize any considered solution.
0.113821 - We calculate the values of the following quantities.
0.041487 - The frequency of service along the line k equals: (13) where: Qk, max – maximal passenger volume on the line k, αmax – maximal utilization coefficient, Ck – capacity of the vehicle that operates on the line k. The required number of busses Nsk to be assigned to the bus line k equals: (14) where: Tk [h] – turnaround time for bus line k. The total travel time of the passenger can be calculated as: (15) where: tv – in-vehicle travel time, tw – waiting time, tt – transfer time.
0.105263 - The bus headway at the line k is equal: (16) The passenger waiting time equals: (17)
0.139470 - The Bee Colony Optimization (BCO) is a stochastic, random search technique that belongs to the class of biologically inspired algorithms.
0.104869 - This metaheuristic uses an analogy between the way in which bees in nature search for food, and the way in which optimization algorithms search for an optimum of given combinatorial optimization problem.
0.094853 - The BCO metaheuristic was proposed by Lučić and Teodorović (2001, 2002, 2003a, 2003b).
0.019355 - It has successfully been applied to various combinatorial optimization problems (Davidović, Šelmić, and Teodorović, 2009; Davidović, Ramljak, Šelmić, and Teodorović, 2011; Davidović, Šelmić, Teodorović, and Ramljak, 2012; Dimitrijević, Teodorović, Simić, and Šelmić, 2011; Nikolić and Teodorović, 2013b; Nikolić, Teodorović, and Šelmić, 2013; Teodorović and Dell’Orco, 2005, 2008; Teodorović, 2009; Teodorović, Šelmić, and Mijatović-Teodorović, 2012; Todorović and Petrović, 2013; Šelmić, Teodorović, and Vukadinović, 2010;).
0.111111 - The basic idea behind the BCO is to create a multi-agent system (colony of artificial bees) capable of successfully solving difficult combinatorial optimization problems.
0.082474 - There are two variants of the BCO method: (a) constructive concept when analyst builds solutions from scratch through a sequence of execution steps; (b) improvement concept when analyst performs iterative improvements of the current best solution.
0.101747 - In the improvement version, in the beginning of the iteration, bees get initial solutions whose they try to improve during the iteration.
0.115646 - In this paper we apply the improvement version of the BCO algorithm.
0.061224 - The algorithm consists of two alternating phases: forward pass and backward pass.
0.121449 - The BCO algorithm parameters whose values need to be set prior the algorithm execution are as follows: B – the number of bees involved in the search.
0.076190 - IT – the number of iteration.
0.074830 - NP – the number of forward and backward passes in a single iteration.
0.077519 - NC – the number of changes in one forward pass.
0.196880 - The output is: S – the best known solution.
0.096589 - The following is the pseudo code of the BCO improvement algorithm: procedure BCOi(inB, IT, NP, NC,outS) fori = 1 toBdo Determine the initial solution for the bee i.
0.128205 - Evaluate the solution of the bee i.
0.114700 - S ← Set the best solution of all bees.
0.127660 - forj = 1toITdo fori = 1toBdo the bee i ← Set the initial solution.
0.087719 - fork = 1toNPdo forr = 1toNCdo fori = 1toBdo Make one modification of the solution of the bee i.
0.105288 - Evaluate solution of the bee i. ifthe best solution generated by the bees isbetterthan the solution Sthen S ← Set the best bee’s solution.
0.089947 - fori = 1toBdo Evaluate solution of the bee i. fori = 1toBdo Make a decision whether the bee i is loyal.
0.082126 - fori = 1toBdo ifthe bee i is not loyalthen Choose one of the loyal bees that will be followed by the bee i.
0.159002 - At the beginning of each iteration, every bee starts search from the best known solution.
0.105263 - There are also other possibilities to define the initial solution at the beginning of each iteration.
0.111470 - Every artificial bee investigates solution space in the neighborhood of the current solution, and tries to improve the solution.
0.113208 - The modification of solution is performed through NP forward passes within the single iteration.
0.078431 - In each forward pass every bee makes NC changes of the current solution.
0.123413 - The way how bees change their solutions is problem dependent and has to be defined specifically for each problem considered.
0.088564 - For example, Bee 1 started search from the solution (0, 1, 1, 0, 0).
0.104575 - During the first forward pass, Bee 1 made two changes of the solution.
0.113721 - In the first modification, Bee 1 generated the solution (0, 1, 0, 0, 0).
0.097445 - In the second modification the solution (0, 1, 0, 1, 0) was generated (Fig 4).
0.084695 - Bee 2 started search from the solution (0, 1, 1, 0, 0), modified this solution, and generated the solution (0, 1, 1, 0, 1), etc.
0.072072 - The first forward pass Fig 4.
0.080808 - The first forward pass.
0.095238 - After forward pass, starts the second phase, the so-called backward pass.
0.082237 - In the backward pass, all artificial bees share information about their solutions.
0.086275 - (In nature, bees would perform a dancing ritual, which would inform other bees about the amount of food they have found, and the proximity of the patch to the hive.
0.136659 - In the optimization search algorithm, the values of objective functions are compared).
0.137255 - In other words, bees make known the quality of the solution, i.e.
0.080808 - the objective function value.
0.080000 - Through the backward pass each bee decides, with a certain probability, whether it will stay loyal to its solution or not (see the Fig 5).
0.088050 - The bees with better solutions have a higher chance of keeping and advertising them.
0.068376 - Comparison of the generated solutions Fig 5.
0.076190 - Comparison of the generated solutions.
0.091503 - Let us denote by Ti the objective function value of the ith solution.
0.053968 - We denote by Oi the normalized value of the objective function value of the ith solution: (18) where: Ti – the objective function value of the ith solution, Tmax – the highest objective function value of the solutions generated by all bees ( ).
0.060228 - Tmin – the lowest objective function value of the solutions generated by all bees ( ).The probability that ith bee (at the beginning of the new forward pass) is loyal to the previously generated solution is calculated in this paper in the following way: (19) where: Oi – the normalized objective function value of the ith solution.
0.058824 - Omax – maximal normalized objective function value of the solutions generated by all bees.
0.084848 - The bees that are loyal to their solutions start to dance and recruit uncommitted bees.
0.000000 - We call them recruiters.
0.092308 - Once a solution is abandoned, the bee becomes uncommitted, and has to select one of the advertised solutions (Fig 6).
0.062802 - Every follower, choose a new solution from recruiters by the roulette wheel (better solutions have higher probability of being chosen for exploration).
0.057778 - For example, Bee 1 and 2 decided to be loyal to their solutions, while Bee 3 decided not to be loyal to the generated solution.
0.040816 - In this way, Bee 1 and 2 started to recruit Bee 3.
0.096970 - Bee 3 decided to follow Bee 1 at the beginning of the new forward pass.
0.000000 - Recruiting of uncommitted followers Fig 6.
0.000000 - Recruiting of uncommitted followers.
0.069959 - We assume that the probability the recruiter i’s solution will be chosen by any uncommitted bee equals: (20) where: L is a set of loyal bees (recruiters).
0.131275 - Bee 1 and 3 start the new forward pass from the same solution.
0.077295 - After recruiting process new forward pass begins (Fig 7) and the process will be repeated until the stopping criteria will be achieved.
0.072072 - The second forward pass Fig 7.
0.080808 - The second forward pass.
0.089888 - We simultaneously design bus routes and determine bus frequency on each of the designed routes by the BCO algorithm that represents modified version of our algorithm proposed in Nikolić and Teodorović (2013b).
0.082397 - The following is pseudo code of the algorithm: procedure BCO(inB, IT, NP, NC,outS) Determine the initial solution Assign passengers and determine characteristics of the solution S ← set the initial solution.
0.061625 - forj = 1toITdo fori = 1toBdo the bee i ← Set the solution S. fork = 1toNPdo forr = 1toNCdo fori = 1toBdo Make one modification of the solution of the bee i Assign passengers and determine characteristics of the bee i’s solution Evaluate objective functions of the bee i’s solution.
0.118285 - ifthe best solution generated by the bees isbetterthan the solution Sthen S ← set the best solution generated by the bees.
0.078014 - fori = 1toBdo Make a decision whether the bee i is loyal.
0.082126 - fori = 1toBdo ifthe bee i is not loyalthen Choose one of the loyal bees that will be followed by the bee i.
0.070922 - We use a simple heuristic algorithm to generate the initial solution.
0.099415 - The detailed description of this heuristic algorithm is given in our paper (Nikolić and Teodorović, 2013b).
0.150869 - We solve the problem considered by using two sets of artificial bees.
0.111706 - The type 1 artificial bees differ from the type 2 artificial bees only in the way in which they modify the solutions.
0.098427 - When making decisions about the loyalty, as well as decisions to join some of the recruiters both bees of type1, and bees of type 2 behave in the same way.
0.119497 - The detailed description of the bees’ behavior is given in Nikolić and Teodorović (2013b).
0.084519 - When updating the best known solution we take care about the following solution attributes: F1 – the total number of rejected passengers; F2 – the total travel time and; F3 – the total number of busses (fleet size).
0.069767 - During the search process, artificial bees generate various solutions.
0.122626 - Every time when the new solutions are generated we have to explore are any of these solutions better than the best-known solution.
0.065041 - To do this, we use the lexicographic ordering.
0.115646 - Within the lexicographic ordering, the attributes are arranged in order of importance.
0.149727 - We compare the best known solution with the generated solutions on the most important attribute, and we choose the best.
0.059259 - If still tied, we use the next most important attribute.
0.120524 - We continue in this way, until decision about the best known solution is made.
0.056738 - We decide to test two order of importance of the attributes.
0.057743 - The following is the order of importance that mainly takes care about passengers’ interests: The following order of importance of the attributes primarily takes care about public transit operator’ interests: When implementing relations (18 and 19) we need the measure of the quality of the solutions generated by the artificial bees.
0.098872 - We calculate the bee i’s solution quality in the following way: (21) where: Ti – the quality of the bee i’s solution.
0.106179 - Fji – value of the objective function Fj in the solution discovered by the ith bee (j = 1, 2, 3).
0.011696 - Fjmax – maximal value of objective function Fj taking into account all solutions generated by all bees .
0.108527 - wj – the weight (importance) of the jth objective function.
0.116102 - The proposed algorithm, based on BCO metaheuristic, was tested on Mandl’s network (Mandl (1979)).
0.032787 - Mandl’s network contains 15 nodes, 21 edges and 15,570 total passengers demand for service (Fig 8).
0.065844 - We suppose that the total number of busses (fleet size) must be smaller or equal to 99, and that the bus line must have three or more stations.
0.061625 - We used the following parameters of the BCO algorithm: • The number of iteration: IT = 200 • The number of forward/backward passes: NP = 5 • The number of changes in each pass: NC = • The number of bees: B = 20 (10 per each type) Mandl’s road network Fig 8.
0.020202 - Mandl’s road network.
0.164035 - The solutions obtained by the developed BCO algorithm are shown in the Table 1.
0.091324 - The Table contains information about the initial solution and the solutions generated by the BCO algorithm (set of bus routes and requested fleet size).
0.107167 - We tested two order of importance of the objective functions (order that is best for passengers and order that is best for the transit operator).
0.137811 - The results generated by these two approaches are shown in the Table 1.
0.145168 - The results shown are obtained as the best of 10 runs of the algorithm.
0.000000 - Table 1.
0.128205 - The solutions obtained by the BCO algorithm.
0.000000 - No.
0.003795 - of bus lines Initial solution BCO (best for passengers) BCO (best for operator) Routes Fleet size Routes Fleet size Routes Fleet size 4 0 1 2 5 7 9 10 31 0 1 2 5 7 9 10 11 35 0 1 2 5 7 9 10 12 34 4 3 5 7 9 12 25 0 1 4 3 5 7 9 13 12 30 4 3 5 7 9 11 8 14 6 9 13 14 8 14 6 9 10 12 13 14 8 14 6 9 13 12 6 0 1 2 5 14 6 7 6 14 5 2 1 3 11 10 12 15 3 1 2 5 14 6 9 10 11 16 6 0 1 2 5 7 9 10 25 0 1 2 5 7 9 10 11 34 0 1 2 5 7 9 10 12 35 4 3 5 7 9 12 21 11 10 9 7 5 3 1 4 3 5 7 9 20 8 14 6 9 13 12 8 14 6 9 10 11 8 14 6 9 13 12 5 0 1 2 5 14 6 7 0 1 2 5 14 6 7 3 1 2 5 14 6 5 9 10 11 5 10 9 7 5 3 4 1 2 23 6 9 10 11 8 0 1 3 11 5 0 1 3 11 10 12 13 9 23 8 14 5 3 1 7 0 1 2 5 7 9 10 26 0 1 2 5 7 9 10 11 32 1 2 5 7 9 10 1 4 3 5 7 9 12 21 2 1 4 3 5 7 9 10 18 2 1 4 3 5 7 9 10 22 8 14 6 9 13 12 8 14 6 9 10 6 8 14 6 9 10 11 15 0 1 2 5 14 6 7 0 1 2 5 14 6 7 0 1 2 5 14 6 7 9 10 11 4 1 3 5 7 9 13 1 10 9 7 5 2 1 0 24 0 1 3 11 5 10 9 6 14 8 6 0 1 3 11 10 12 13 9 7 14 29 11 10 12 13 3 0 1 3 11 10 12 13 9 7 5 29 10 9 7 5 1 8 0 1 2 5 7 9 10 26 0 1 2 5 7 9 10 11 16 0 1 2 5 7 9 10 12 4 3 5 7 9 12 21 2 1 4 3 5 7 9 10 11 18 0 1 4 1 8 14 6 9 13 12 10 9 7 5 3 4 1 0 12 8 14 6 9 2 0 1 2 5 14 6 7 0 1 2 5 14 6 9 10 4 1 2 5 14 6 9 10 9 10 11 4 0 1 2 5 7 9 10 10 12 13 9 7 5 3 1 18 0 1 3 11 4 0 1 3 11 10 12 6 10 11 3 5 14 8 5 11 10 12 13 3 11 10 12 13 9 7 14 5 2 1 4 19 11 10 12 13 3 0 1 4 1 12 10 9 6 14 8 8 0 1 2 5 7 9 10 12 0 1 2 5 7 9 10 20 10 9 7 1 0 1 2 5 7 9 10 21 4 3 5 7 9 12 1 5 7 9 10 1 4 3 5 14 8 4 8 14 6 9 13 12 13 12 10 9 6 14 8 14 8 14 6 9 2 0 1 2 5 14 6 5 0 1 2 5 14 6 7 10 9 7 5 3 4 1 9 10 11 4 9 10 11 3 5 7 2 11 10 12 2 0 1 3 11 4 0 1 3 11 10 12 6 1 3 11 2 12 11 10 12 13 3 5 2 1 3 11 1 11 10 12 2 0 1 4 1 7 14 5 3 4 1 4 3 5 7 9 10 1 0 1 2 5 14 8 2 0 1 2 5 7 9 13 12 26 4 3 5 7 9 10 1 4 3 5 14 6 1 9 7 5 3 4 1 2 1 3 5 14 6 9 8 4 3 5 7 9 10 19 2 1 4 3 5 7 9 10 11 37 10 9 7 5 3 4 1 0 1 2 5 7 9 12 13 5 7 9 1 0 1 2 5 7 9 12 13 20 The comparisons between the solutions obtained by the BCO algorithm and the solutions obtained by the previous approaches are given in the Table 2.
0.000000 - Table 2.
0.107345 - Comparison between the solutions obtained by the BCO algorithm and the solutions obtained by the previous approaches.
0.000000 - No.
0.009132 - of lines Solution method Fleet size % of demand Time components (min) d0 d1 d2 dun Travel time In-vehicle time Out-of-vehicle time Transfer (penalty) 4 Mandl 99 69.94 29.93 0.13 0 219,094 177,400 18,194 23,500 Greedy 70 80.48 12.84 0 6.68 180,453 149,904 20,549 10,000 BCO (users) 94 95.05 4.95 0 0 186,368 161,371 21,147 3850 BCO (operator) 67 90.69 9.31 0 0 197,624 164,317 26,057 7250 6 Shih et al.
0.000000 - 87 82.59 17.41 0 0 225,102 191,826 19,726 13,550 Shih et al.
0.008493 - 84 82.59 17.41 0 0 203,936 170,328 20,058 13,550 Greedy 75 87.73 12.27 0 0 199,908 163,020 27,338 9550 BCO (users) 99 94.34 5.65 0 0 185,224 159,059 21,766 4400 BCO (operator) 66 89.98 10.02 0 0 201,066 161,765 31,500 7800 7 Baaj et al.
0.008493 - 82 80.99 19.01 0 0 217954 180356 22804 14,800 Greedy 78 90.62 9.38 0 0 195,477 158,100 30,076 7,300 BCO (users) 99 94.41 5.59 0 0 185,405 157,899 23,157 4,350 BCO (operator) 63 87.80 12.20 0 0 204,006 159,024 35,481 9,500 8 Shih et al.
0.000000 - 68 87.73 12.27 0 0 204,028 168,023 26,455 9,550 Baaj et al.
0.023474 - 77 79.96 20.04 0 0 209,318 166,654 27,064 15,600 Greedy 78 91.91 8.09 0 0 197,516 157,950 33,266 6,300 BCO (users) 99 96.40 3.60 0 0 185,590 158,064 24,726 2,800 BCO (operator) 63 88.57 11.43 0 0 203,975 160,144 34,931 8,900 12 Bagloee 87 83.66 15.21 0.95 0 202,255 167,198 24,591 10,465 Greedy 85 95.50 4.50 0 0 200,624 156,769 40,355 3,500 BCO (users) 98 95.38 4.62 0 0 187,919 160,452 23,867 3,600 BCO (operator) 65 85.74 14.26 0 0 208,355 161,204 36,051 11,100 The comparison of the solutions generated by the BCO and other competitive approaches (Mandl, 1979; Baaj and Mahmassani, 1991, 1995; Shih and Mahmassani, 1994; Bagloee and Ceder, 2011) are given in the Table 2.
0.057851 - We use the following parameters for comparison: d0 – the percentage of demand satisfied without any transfers; d1 – the percentage of demand satisfied with one transfer; d2 – the percentage of demand satisfied with two transfers; dun – the percentage of demand unsatisfied, and the total travel time of all passengers.
0.100888 - We also show, for the generated solutions, the total travel time, in-vehicle time and out-of-vehicle time.
0.013072 - We assume that passenger transfer time is equal to 5 min per passenger.
0.063830 - One can conclude that the BCO algorithms significantly improve initial solutions.
0.084365 - The BCO algorithm (best for users) for the network of 6 bus lines (Fig 9) produced the solution that has the smallest travel time (total travel time 185,224 or average 11.896 per passenger).
0.105263 - The set of bus lines that are best for passengers (obtained by BCO algorithm) Fig 9.
0.113208 - The set of bus lines that are best for passengers (obtained by BCO algorithm).
0.120889 - The best values of the percentage of demand realized with zero transfer and the total travel time are produced in the case of network that contains 8 bus lines.
0.164664 - The set of bus lines that are best for the provider are shown in the Fig 10.
0.141654 - The set of bus lines that are the best for provider (obtained by BCO algorithm) Fig 10.
0.151990 - The set of bus lines that are the best for provider (obtained by BCO algorithm).
0.270280 - We proposed the model for the transit network design problem.
0.120681 - We considered the transit network design problem in a way that we all together decide about the links to be included in the transit network, bring together selected links into bus routes, and calculate bus frequency on each of the designed bus routes.
0.188906 - The proposed model takes into account the assumption that passenger flows depend on the transit network design.
0.102041 - The model also considers multiple path passengers’ assignment among possible transit routes.
0.205896 - The model developed in the paper is based on the Swarm Intelligence.
0.188084 - We clearly showed that the proposed BCO algorithm is competitive with the other approaches in the literature.
0.078988 - The proposed BCO approach can generate high-quality solutions within reasonable CPU times.
0.138878 - The passenger assignment model represents very important element of the bus network design model.
0.139869 - The passenger assignment is, in this paper, based on the broadly accepted frequency share method.
0.059701 - This concept is related to the assumption that passengers possess perfect information processing capabilities and always behave in a rational way.
0.102154 - The route choice model in public transit could be also based on the assumption that the perceived travel times along bus lines, or the perceived number of stops are “fuzzy”.
0.027397 - When subjectively estimating travel time between two nodes, expressions are used such as “it takes about 30 min from node A to node B”.
0.073059 - The statement that travel time between two nodes is “about 30 min” is the result of a subjective feeling, an individual’s subjective estimate.
0.060317 - We also suppose that the differences in estimated travel time along alternative bus lines, and the degree of preference to ride certain bus line can be represented by corresponding fuzzy sets (“shorter”, “longer”, “much longer”; “very weak”, “weak”, …,“very strong”).
0.118285 - The challenging research task in the future is to develop route choice model in public transit based on fuzzy logic.
0.034826 - In years to come, fuzzy logic route choice models should be further justified by contrasting them with more conventional choice models.
0.122907 - We considered the transit network design problem in a way that we, at the same time, determined the links to be included in the transit network, assembled chosen links into bus routes, and determined bus frequency on each of the generated routes.
0.065041 - We analyzed the case of a homogenous fleet.
0.081633 - In other words we assumed that all busses have the same capacity.
0.194723 - A simultaneous transit network design and frequency setting problem should be in the future also considered in the case of heterogeneous fleet.
0.165456 - The proposed algorithm, based on BCO metaheuristic, should be in the future tested on the real-life transportation networks.

[Frase 3] Our approach to the transit network design problem is based on the Bee Colony Optimization (BCO) metaheuristic.
[Frase 6] The numerical experiments are performed on known benchmark problems.
[Frase 266] A simultaneous transit network design and frequency setting problem should be in the future also considered in the case of heterogeneous fleet.
[Frase 45] We consider in this paper the transit network design problem in a way that we simultaneously determine the links to be included in the transit network, assemble chosen links into bus routes, and determine bus frequency on each of the designed routes.
[Frase 2] We consider in this paper the transit network design problem in a way that we simultaneously determine the links to be included in the transit network, assemble chosen links into bus routes, and determine bus frequency on each of the designed routes.
