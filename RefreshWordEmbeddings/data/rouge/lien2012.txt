PBA is based on a particular intelligent behavior of honey bee and bird swarms. We compare the performance of PBA with BA and PSO for CSL problems. PBA can be efficiently employed to solve CSL problems.

0.080378 - The construction site layout (CSL) design presents a particularly interesting area of study because of its relatively high level of attention to usability qualities, in addition to common engineering objectives such as cost and performance.
0.074074 - However, it is difficult combinatorial optimization problem for engineers.
0.150637 - Swarm intelligence (SI) was very popular and widely used in many complex optimization problems which was collective behavior of social systems such as honey bees (bee algorithm, BA) and birds (particle swarm optimization, PSO).
0.241540 - This study proposed an optimization hybrid swarm algorithm namely particle-bee algorithm (PBA) based on a particular intelligent behavior of honey bee and bird swarms by integrates theirs advantages.
0.324074 - This study compares the performance of PBA with that of BA and PSO for hypothetical construction engineering of CSL problems.
0.283333 - The results show that the performance of PBA is comparable to those of the mentioned algorithms and can be efficiently employed to solve those hypothetical CSL problems with high dimensionality.
0.100159 - Construction site layout (CSL) problems are particularly interesting because in addition to common engineering objectives such as cost and performance, facility design is especially concerned with aesthetics and usability qualities of a layout (Michalek, Choudhary, & Papalambros, 2002).
0.100159 - The CSL problem identifies a feasible location for a set of interrelated objects that meet all design requirements and maximizes design quality in terms of design preferences while minimizing total cost associated with interactions between these facilities.
0.028674 - Pairwise costs usually reflect transportation costs and/or inter-facility adjacency preferences (Anjos & Vannelli, 2002; Michalek et al., 2002).
0.149465 - CSL problems arise in the design of hospitals, service centers and other facilities (Yeh, 2006).
0.096866 - However, all such problems are known as “NP-hard” and because of the combinatorial complexity, it cannot be solved exhaustively for reasonably sized layout problems (Yeh, 2006).
0.064516 - For n facilities, the number of possible alternatives is n!, which gives large numbers even for small n values.
0.031746 - When 10 facilities are involved, possible alternatives number well over 3,628,800, and 15 facilities have possible alternatives numbering in the billions.
0.041152 - In practical application, however, a project with n = 15 is still considered small (Yeh, 2006).
0.109701 - In the past, knowledge and artificial intelligence based methods have been applied to solving CSL problems, e.g., knowledge based systems have been developed to provide users with problem-specific heuristic knowledge to facilitate appropriate facility allocations (Cheng, 1992; Tommelein, Levitt, & Confrey, 1991).
0.086022 - For the AI-based algorithms, Elbeitagi and Hegazy (2001) used a hybrid neural network to identify optimal site layout.
0.135652 - Yeh (2006) applied annealed neural networks to solve construction site-level CSL problems.
0.080610 - Other well-known algorithms, e.g., tabu search (TS), simulated annealing (SA) and genetic algorithms (GAs) are used widely to solve site layout problems.
0.074074 - TS is a local search method, which is used for the laying out of multi-floor facilities (Abdinnour-Helm & Hadley, 2000).
0.114478 - SA is a method for solving combination problems generally applied to the layout design of multi-objective facilities (Suresh & Sahu, 1993).
0.111111 - Gero and Kazakov (1997) incorporated the concept of genetic engineering into the GA system for solving building space layout problems.
0.087977 - Li and Love (2000) and Osman, Georgy, and Ibrahim (2003) used GA to solve site layout problems in unequally sized facilities.
0.077778 - The objective functions of the above-mentioned algorithms were to optimize the interaction between facilities, such as total inter-facility transportation costs and frequency of inter-facility trips.
0.061646 - Hegazy and Elbeltagl (1999) developed a comprehensive system for site layout planning based on GA. Elbeitagi, Hegazy, Hosny, and Eldosouky (2001) presented a practical model for schedule-dependent site layout planning in construction by combining a knowledge-based system, fuzzy logic and GA. Those previous research focused on solving different optimization problems by applying those algorithms under different constraints which quality of solutions were limited by the capability of the algorithms.
0.094017 - Swarm intelligence (SI) has been of increasing interest to research scientists in recent years.
0.000000 - SI was defined by Bonabeau et al.
0.105848 - as any attempt to design algorithms or distributed problem-solving devices based on the collective behavior inspired of social insect colonies or other animals (Bonabeau, Dorigo, & Theraulaz, 1999).
0.000000 - Bonabeau et al.
0.080247 - focused primarily on the social behavior inspired of ants (Dorigo, 1992), fish (Li, 2003), birds (Kennedy & Eberhart, 1995), bees (Pham et al., 2006), etc.
0.097685 - However, the term “swarm” can be applied more generally to refer to any restrained collection of interacting agents or individuals.
0.126984 - Although bees swarming around a hive is the classical example of “swarm”, swarms can easily be extended to other systems with similar architectures.
0.203324 - A few models have been developed to model the intelligent behaviors of honeybee swarms and applied to solve combinatorial type problems.
0.084291 - Yang (2005) presented a virtual bee algorithm (VBA) that is effective when applied to function optimization problems.
0.065844 - VBA was tested on two functions with two parameters, single-peaked and multi-peaked, respectively.
0.054201 - Results show the VBA as significantly more efficient than GA. Karaboga and Akay (2009) presented an artificial bee colony (ABC) algorithm and expanded its experimental results (Basturk & Karaboga, 2006).
0.043011 - It has been pointed out that the ABC algorithm outperforms GA for functions exhibiting multi-modality or uni-modality.
0.000000 - Pham et al.
0.111574 - (2006) presented an original bee algorithm (BA) and applied to two standard functional optimization problems with two and six dimensions.
0.071576 - Results demonstrated BA able to find solutions very close to the optimum, showing that BA generally outperformed GA. Ozbakir, Baykasog, and Tapkan (2010) developed a modified BA (Pham et al., 2006) to solve generalized assignment problems (GAP) that presented an ejection chain neighborhood mechanism.
0.084175 - Results found that the proposed BA offers the potential to solve GAP.
0.051852 - However, while BA (Pham et al., 2006) offers the potential to conduct global searches and uses a simpler mechanism in comparison with GA, it dependence on random search makes it relatively weak in local search activities and does not records past searching experiences during the optimization search process.
0.096296 - For instance, a flock of birds may be thought of as a swarm whose individual agents are birds.
0.070461 - Particle swarm optimization (PSO), which has become quite popular for many researchers recently (Parsopoulos & Vrahatis, 2007; Tsai, 2010), models the social behavior inspired of birds (Pham et al., 2006).
0.041152 - PSO potentially used in local searching, and records past searching experiences during optimization search process.
0.057348 - However, it converges early in highly discrete problems and traps into the local optimum solution (Korenaga, Hatanaka, & Uosaki, 2006).
0.163419 - Hence, in order to improve BA and PSO, this study proposed an improved optimization hybrid swarm algorithm called the particle-bee algorithm (PBA) that imitates a particular intelligent behavior inspired of bird and honey bee swarms and integrates their advantages.
0.089835 - In addition, this study also proposed a neighborhood-windows (NW) technique for improving PBA search efficiency and proposed a self-parameter-updating (SPU) technique for preventing trapping into a local optimum in high dimensional problems.
0.267010 - This study compares the performance of PBA algorithm with that of BA (Pham et al., 2006) and PSO for hypothetical construction engineering of CSL problems.
0.085376 - Bee algorithm (BA) Bee algorithm (BA) is an optimization algorithm inspired by the natural foraging behavior of honeybees (Eberhart, Shi, & Kennedy, 2001).
0.046784 - BA flowchart is shown in Fig 1.
0.040404 - BA (Pham et al., 2006) requires the setting of a number of parameters, including number of scout bees (n), number of elite sites selected from n visited sites (e), number of best sites out of n visited sites (b), number of bees recruited for elite e sites (n1), number of bees recruited for best b sites (n2), number of bees recruited for other visited sites (r), and neighborhood (ngh) of bees dance search and stopping criterion.
0.045977 - Step (1) Initialize scout bees BA starts with n scout bees placed randomly in the search space.
0.064815 - Step (2) Evaluate fitness Start the loop and evaluate scout bee fitness.
0.058466 - Step (3) Select elite sites (e) from scout bees Scout bees that have the highest fitness are chosen as elite bees, and sites they visit are chosen for neighborhood search.
0.054201 - Step (4) Recruit bees (n1) start neighborhood dance search The algorithm conducts searches in the neighborhood of selected sites, assigning more recruit bees to dance near to elite sites.
0.096825 - Recruit bees can be chosen directly according to the fitness associated with their specific dance sites Eq (1).
0.043360 - (1) where xi is ith x and i = 1 to n; d is dimension in xi and d = 1 to D, t is iteration; xid(t + 1) is dth dimension in ith x and in t + 1 iteration; xid(t) is dth dimension in ith x and in t iteration; Rand is a uniformly distributed real random number within the range 0 to 1; n is number of scout bees.
0.062268 - Step (5) Select best sites (b) from scout bees Otherwise, scouts bees with the secondary highest fitness are chosen as best bees, and sites they visit are chosen for neighborhood search.
0.052910 - Step (6) Recruit bees (n2) start neighborhood dancing search The algorithm conducts searches in the neighborhood of the selected sites, assigning more recruit bees to dance near the best sites.
0.103785 - Recruit bees can be chosen directly according to the fitness associated with dancing sites Eq (1).
0.048889 - Elite bees differ from best bees as the former focus on local search in order to search the local optimum solution, and the latter focus on global search in order to avoid missing other potential global optimum solutions.
0.055556 - Alternatively, fitness values are used to determine the elite/best bees selected.
0.072222 - Dancing searches in the neighborhood of elite and best sites that represent more promising solutions are made more detailed by recruiting more bees to follow them than others.
0.033333 - Step (7) Recruit random bees (r) for other visited sites The remaining bees in the population are assigned randomly around the search space scouting for new potential solutions.
0.000000 - Step (8) Convergence?
0.068376 - Throughout step (3) to step (7), such differential recruitment is a key BA operation.
0.060606 - However, in step (8) only bees with the highest fitness for the current iteration will be selected for the following iteration.
0.074074 - While there is no such restriction in nature, it is introduced here to reduce the number of points to be explored.
0.055556 - These steps are repeated until a stopping criterion is met that determines whether bees are to be abandoned or memorized.
0.026144 - Bee algorithm flowchart Fig 1.
0.029630 - Bee algorithm flowchart.
0.031746 - From Eq (1), BA dependence on random search makes it relatively weak in local search activities.
0.067633 - Also, BA does not have past searching records of PSO capabilities.
0.094737 - Particle swarm optimization (PSO) Particle swarm optimization (PSO) is an optimization algorithm inspired by the natural foraging behavior of birds to find an optimal solution (Kennedy & Eberhart, 1995).
0.077778 - In PSO, a population of particles starts to move in a search space by following current optimum particles and changing their positions in order to find the optimum.
0.087302 - The position of a particle refers to a possible solution of the function to be optimized.
0.051282 - Evaluating the function by the particle’s position provides the fitness of that solution.
0.056980 - In every iteration, each particle is updated by following the best current particle solution achieved so far (local best) and the best of the population (global best).
0.050179 - When a particle takes part of the population as its topological neighbors, the best value becomes a local best.
0.043011 - Particles tend to move toward good areas in the search space in response to information spreading through the swarm.
0.041667 - A particle moves to a new position calculated by the velocity updated at each time step t by Eq (2).
0.097222 - Eq (3) is then used to calculate the new velocity, as the sum of the previous position and the velocity.
0.025543 - (2) where xi is ith x and i = 1 to n; vi is ith v; d is dimension in xi or v and d = 1 to D; t is iteration; xid(t) is dth dimension in ith x and in t iteration; vid(t + 1) is dth dimension in ith v and in t + 1 iteration; xid(t + 1) is dth dimension in ith x and in t + 1 iteration; n is number of particles.
0.029782 - (3) where vid(t) is dth dimension in ith v and in t iteration; w is inertia weight and controls the magnitude of the old velocity vid(t) in the calculation of the new velocity; Pid(t) is dth dimension in ith local best particle and in t iteration; Gd(t) is dth dimension global best particle in t iteration; c1 and c2 determine the significance of Pid(t) and Gd(t); Rand is a uniformly distributed real random number within the range 0–1.
0.079365 - Furthermore, vid at any time-step of the algorithm is constrained by parameters vmax and vmin.
0.094276 - The swarm in PSO is initialized by assigning each particle to a uniformly and randomly chosen position in the search space.
0.040404 - Velocities are initialized randomly in the range vmax to vmin.
0.055556 - Particle velocities on each dimension are clamped to a maximum velocity vmax.
0.060606 - If the velocity of that dimension exceeds vmax or vmin (user-specified parameters), dimension velocity is limited to vmax or vmin.
0.046784 - PSO flowchart is shown in Fig 2.
0.067340 - Step (1) Initialize particles PSO starts with n particles being randomly introduced with respective positions and velocities into the search space.
0.057971 - Step (2) Evaluate fitness Start the loop and evaluate particle fitness.
0.051282 - Step (3) Update Gbest particle The algorithm updates global best particle through problem iterations.
0.047619 - Step (4) Update Pbest particles The algorithm updates local best particles through the current problem iteration.
0.041152 - Step (5) Update particles using steps (3) and (4) The algorithm updates particles using Eqs.
0.059259 - (2) and (3).
0.000000 - Step (6) Convergence?
0.024691 - Particle swarm optimization flowchart Fig 2.
0.027778 - Particle swarm optimization flowchart.
0.038647 - The above steps are repeated until the stop criterion is met.
0.087963 - However, while PSO may be employed in local search and has a track record of experience being used in optimization search processes, it tends to achieve early convergence in highly discrete problems (Korenaga et al., 2006).
0.145912 - Proposed particle-bee algorithm (PBA) In order to integrate BA global search ability with the local search advantages of PSO, this study proposed an optimization hybrid swarm algorithm, the particle-bee algorithm (PBA), based on the intelligent behaviors of bird and honeybee swarms.
0.057778 - For improved BA local search ability, PSO global search ability and to seek records past experience during optimization search process, this study reconfigures the neighborhood dance search (Pham et al., 2006) as a PSO search (Kennedy & Eberhart, 1995).
0.144852 - Based on cooperation between bees (BA) and birds (PSO), the proposed algorithm improves BA neighborhood search using PSO search.
0.098765 - Therefore, PBA employs no recruit bee searching around “elite” or “best” positions (as BA does).
0.101852 - Instead, a PSO search is used for all elite and best bees.
0.083333 - In other words, after PSO search, the number of “elite”, “best” and “random” bees equals the number of scout bees.
0.067019 - In PBA, the particle bee colony contains four groups, namely (1) number of scout bees (n), (2) number of elite sites selected out of n visited sites (e), (3) number of best sites out of n visited sites (b), and (4) number of bees recruited for the other visited sites (r).
0.087977 - The first half of the bee colony consists of elite bees, and the second half includes the best and random bees.
0.083333 - The particle bee colony contains two parameters, i.e., number of iteration for elite bees by PSO (Pelite) and number of iteration for best bees by PSO (Pbest).
0.093567 - PBA flowchart is shown in Fig 3.
0.107937 - Step (1) Initialize scout bees PBA starts with n scout bees being randomly placed with respective positions and velocities in the search space.
0.064815 - Step (2) Evaluate fitness Start the loop and evaluate scout bee fitness.
0.021164 - Step (3) Select elite sites (e) from scout bees.
0.090278 - Elite sites are selected for each elite bee, whose total number is equal to half the number of scout bees.
0.056848 - Step (4) Elite bees initiate the PSO procedure by Pelite iteration for neighborhood-windows (NW) In this step, new particle bees from elite and best bees are produced using Eq (2).
0.053333 - Elite and best bee velocity updates are performed as indicated in Eq (3).
0.050179 - This study further proposed a neighborhood-windows (NW) technique to improve PSO searching efficiency as show in Eq (4).
0.055556 - Thus, after xid(t + 1) is substituted into Eq (2) and Eq (3), the NW ensures PSO searching within the designated xidmin and xidmax.
0.055556 - In other word, if the sum of xid(t + 1) exceeds xidmin or xidmax then xid(t + 1) is limited to xidmin or xidmax.
0.042328 - Fig 4 shows NW behavior in PSO (two dimensions).
0.040404 - (4) where xi is ith x and i = 1 to n; d is dimension in xi and d = 1 to D; t is iteration; xid(t + 1) is dth dimension in ith x and in t + 1 iteration; n is number of particles.
0.123457 - The behavior of NW in PSO Fig 4.
0.137346 - The behavior of NW in PSO.
0.021164 - Step (5) Select best sites (b) from scout bees.
0.058824 - Best sites are selected for each best bee, the total number of which equals one-quarter of the number of scout bees.
0.048780 - Step (6) Best bees start the PSO procedure using the NW Pbest iteration In this step, new particle bees from elite and best bees are produced using Eq (2).
0.048309 - Elite and best bee velocity updates are acquired using Eq (3).
0.074074 - The NW technique improves PSO search efficiency, as show in Eq (4) and Fig 4.
0.033333 - Step (7) Recruit random bees (r) for other visited sites The random bees in the population are assigned randomly around the search space scouting for new potential solutions.
0.082305 - The total number of random bees is one-quarter of the number of scout bees.
0.057348 - Step (8) Self-parameter-updating (SPU) for elite, best and random bees Furthermore, in order to prevent being trapped into a local optimum in high dimensional problems, this study proposed a solution, i.e., the self-parameter-updating (SPU) technique, the idea for which came from Karaboga and Akay (2009).
0.024691 - Eq (5) shows the SPU equation.
0.031746 - (5) (6) (7) where xi is ith x and i = 1 to n; d is dimension in xi and d = 1 to D; xid(cur) is dth dimension in ith x and in current solution; xid(new) is dth dimension in ith x and in new solution; Rand is a uniformly distributed real random number within the range 0–1; j is the index of the solution chosen randomly from the colony as shows in Eq (6), k is the index of the dimension chosen randomly from the dimension as shows in Eq (7); n is number of scout bees.
0.024691 - Particle-bee algorithm flowchart Fig 3.
0.027778 - Particle-bee algorithm flowchart.
0.067436 - In step (8), after elite, best and random bees have been distributed based on fitness, fitness are checked to determine whether they are to be abandoned or memorized using Eq (5).
0.066066 - Therefore, if finesses of elite, best or random bees are both improved using Eq (5) and improved over previous finesses, the new finesses are memorized.
0.111111 - In step (3) through step (8), this differential recruitment is a key operation of the PBA.
0.074074 - The Rastrigin function is provided as a sample for observing the proposed optimization procedure behavior in this study.
0.034188 - Rastrigin function formula and figure are shown, respectively, in Eq (8) and Fig 5.
0.066002 - In this study, while the NW carries out the PSO search of the local optimization at the start of each iteration search space, BA random bees and the SPU technique control the global optimization at the end of each iteration search space.
0.090433 - Therefore, in the PBA procedure, the proposed optimization search techniques may search across each iteration search space based on that particular search space’s potential.
0.104630 - The procedure of this study combines NW, BA’s random bees and the SPU technique, as show in Fig 6.
0.016461 - (8) where −5.12 ≦ xid ≦ 5.12; f(0) = 0 The Rastrigin function Fig 5.
0.029630 - The Rastrigin function.
0.022222 - Optimization procedure behavior in each iteration Fig 6.
0.024691 - Optimization procedure behavior in each iteration.
0.000000 - Step (9) Convergence?
0.071685 - In this step, only the bee with the highest fitness will be selected to form the next bee population.
0.086022 - These steps are repeated until the stop criterion is met and bees are selected to be abandoned or memorized.
0.124444 - In PBA, scout bees are used to classify both elite and best bees.
0.076190 - Classification is controlled by scout bee fitness and optimized by control parameters called ‘‘Pelite” and “Pbest”, which are also important PBA control parameters.
0.137931 - In PBA, the idea of Pelite for elite bees gives a higher potential to search optimization solutions.
0.078078 - The idea of Pbest for best bees gives a second opportunity to search optimization solutions because luck continues to play a role in resource identification.
0.020202 - Therefore, in this study, Pelite is always larger then Pbest.
0.068376 - In a robust search process, exploration and exploitation processes must be carried out together.
0.082540 - In PBA, while elite bees (Pelite) implement the exploitation process in the search space, best bees (Pbest) and random bees control this process.
0.053640 - A sensitivity analysis for Pelite and Pbest was proposed by Cheng and Lien (in preparation) in 2011.
0.090909 - Modeling of a construction site layout problem 3.1.1.
0.090212 - A hypothetical construction site layout A medium-sized project is adopted as a hypothetical construction site (Cheng & Lien, in preparation) to determine optimal site layout through PSO, BA and PBA.
0.060060 - The hypothetical project is a conventional seven-storey reinforced concrete school block, and works including foundation, laying, structural works, external works and building services installation.
0.064815 - The simplified layout of the construction site is shown in Fig 7.
0.066667 - A hypothetical of construction site layout Fig 7.
0.074074 - A hypothetical of construction site layout.
0.041667 - Number and type of facilities This study considers some common site facilities, such as a site office, a labor hut, a materials storage area, a main gate and a refuse storage area (Cheng & Lien, in preparation).
0.021164 - The numbered site facilities are listed in Table 1.
0.047619 - The main gate, materials hoist and refuse chute are regarded as fixed facilities (see Fig 7).
0.067901 - The location of the main gate is usually determined in the hoarding plan, and is therefore seldom relocated until the end of the project.
0.000000 - Table 1.
0.049383 - Facilities used on the case study.
0.000000 - Facility No.
0.024691 - Facility name Note A Site office – B Debris storage area – C Reinforcement bending/storage yard – D Carpentry workshop and store – E Labor hut – F Materials storage area – G Main gate Fixed H Materials hoist Fixed I Refuse chute Fixed 3.1.3.
0.054054 - Travel distance between site locations The travel distance between locations is measured using the rectangular distance representing the actual operations and resource movements on site.
0.016461 - Table 2 shows the travel distances between the possible facility locations (Cheng & Lien, in preparation).
0.000000 - Table 2.
0.000000 - Travel distance between facilities.
0.000000 - Distance Location 1 2 3 4 5 6 7 8 9 10 11 12 13 Location 1 0 1 2 6 7 9 12 14 16 17 13 4 9 2 1 0 1 5 6 8 11 13 15 16 12 3 8 3 2 1 0 4 5 7 10 12 14 15 11 2 7 4 6 5 4 0 1 3 7 9 11 12 9 2 5 5 7 6 5 1 0 2 6 8 10 11 8 3 4 6 9 8 7 3 2 0 3 5 7 8 8 5 4 7 12 11 10 7 6 3 0 2 4 5 7 6 3 8 14 13 12 9 8 5 2 0 2 3 5 8 3 9 16 15 14 11 10 7 4 2 0 1 3 11 6 10 17 16 15 12 11 8 5 3 1 0 2 12 7 11 13 12 11 9 8 8 7 5 3 2 0 9 5 12 4 3 2 2 3 5 6 8 11 12 9 0 4 13 9 8 7 5 4 4 3 3 6 7 5 4 0 3.1.4.
0.057348 - Trip frequency between facilities Trip frequency between facilities influences site layout planning and the proximity of predetermined site facilities.
0.044444 - Therefore, the frequency of trips made between facilities in a single day are assumed (Cheng & Lien, in preparation) as shown in Table 3.
0.000000 - Table 3.
0.052288 - Frequencies of trips between facilities.
0.000000 - Frequency Facility 1 2 3 4 5 6 7 8 9 Facility 1 0 3.11 4.79 4.94 5.15 5.41 6.34 3.48 2.55 2 3.11 0 3.69 3.71 3.7 3.36 4.42 3.07 5.85 3 4.79 3.69 0 4.27 4 4.4 5.65 6.26 2.03 4 4.94 3.71 4.27 0 4.51 4.58 5.14 6.2 2.24 5 5.15 3.7 4 4.51 0 4.99 4.39 4.13 2.48 6 5.41 3.36 4.4 4.58 4.99 0 5.24 6.2 2.65 7 6.34 4.42 5.65 5.14 4.39 5.24 0 4.62 3.75 8 3.48 3.07 6.26 6.2 4.13 6.2 4.62 0 2.37 9 2.55 5.85 2.03 2.24 2.48 2.65 3.75 2.37 0 3.1.5.
0.093851 - Objective function The objective function of the construction site layout (CSL) problem must satisfy two requirements: (1) it must be high for only those solutions with a high design preference; and (2) it must be high for only those solutions that satisfy the layout constraints.
0.096319 - Therefore, this study is based on Ref.
0.061111 - Cheng and Lien (in preparation), giving the objective function as follows Eq (9): (9) subject to • If no reasonable solutions exist that the value of results is 150.
0.044444 - • If i = j then xij = 0; If i = k then fik = dik = 0. where n is the number of facilities; xij is the permutation matrix variable such that when facility i is assigned to location j; fik is the proximity relationship between facilities i and k; and dik is the distance between locations i and k. 3.2.
0.131794 - Results and discussion for case I of CSL problem This study was adapted from 30 experimental runs with the values found in Table 4 through 500 iterations by BA, PSO and PBA.
0.161546 - Table 5 and Fig 8 present the evolution of the CSL problem result.
0.089074 - As seen in Table 5, the best mean and lowest standard error for PBA are respectively 108.37 and 0.0389, which is better than BA (112.83 and 7.3584) and PSO (126.19 and 18.626).
0.100585 - Besides, although BA and PSO both obtain the same best value as PBA (108.36) neither can avoid unreasonable solution results with the worst value (i.e., 150).
0.151526 - Therefore, PBA provides a better evolution of mean fitness, standard error, and worst result that than BA and PSO.
0.000000 - Table 4.
0.024691 - Parameter values used in the experiments.
0.026591 - PSO BA PBA (Lam et al., 2007) n 50 n 50 n 50 w 0.9–0.7 e n/2 e n/2 v Xmin/10∼Xmax/10 b n/4 b n/4 r n/4 r n/4 n1 2 w 0.9–0.7 n2 1 v Xmin/10 ∼ Xmax/10 Pelite 15 Pbest 9 n = Population size (colony size); w = inertia weight; v = limit of velocity; e = elite bee number; b = best bee number; r = random bee number; n1 = elite bee neighborhood number; n2 = best bee neighborhood number; Pelite = PSO iteration of elite bees; Pbest = PSO iteration of best bees.
0.000000 - Table 5.
0.078431 - The result of three algorithms.
0.000000 - Mean Std.
0.103197 - Best Worst PBA 108.37 0.0389 108.36 108.47 BA 112.83 7.3584 108.36 150.00 PSO 126.19 18.626 108.36 150.00 Evolution of mean best values for case I of CSL problem Fig 8.
0.156430 - Evolution of mean best values for case I of CSL problem.
0.127595 - The best layout alternatives of PBA and Lam (Lam, Ning, & Ng, 2007) are shown in Figs.
0.059259 - 9 and 10.
0.111474 - The best layout design of PBA and Lam (Lam et al., 2007) is 108.36 and 114.3, respectively, as calculated by Eq (9).
0.000000 - Figs.
0.042042 - 9 and 10 both place the site office near the main gate so that site staff can enter the site office via the shortest route.
0.081113 - In a practical construction job site, the labor hut should be adjacent to the site office so that the residential area for the site staff and workers can be concentrated in a particular zone, and so the construction plan is easy to navigate.
0.088889 - The PBA result places the site office is near labor hut (Fig 9).
0.047009 - Furthermore, it is potentially dangerous for the site manager/staff to have to travel from the site office to the labor hut through the debris storage area, the materials storage area, and the carpentry workshop and store (see Fig 10).
0.111640 - Besides, the short distance between the materials hoist and materials store (for which PBA is better than Ref.
0.000000 - Lam et al.
0.074074 - (2007)) means that site workers can efficiently transport materials to the superstructure.
0.168350 - Thus, PBA results for this hypothetical CSL problem may better than Ref.
0.000000 - Lam et al.
0.000000 - (2007).
0.074074 - PBA best layout design Fig 9.
0.083333 - PBA best layout design.
0.000000 - Lam (Lam et al Fig 10.
0.000000 - Lam (Lam et al., 2007) best layout design.
0.090909 - Modeling of a construction site layout problem 4.1.1.
0.106085 - A hypothetical of construction site layout A medium-sized project is adopted as a hypothetical construction site (Li & Love, 2000) to determine optimal site layout through PSO, BA and PBA.
0.064815 - The simplified layout of the construction site is shown in Fig 11.
0.041152 - Locations 7 and 8 are small-size locations, while the others are large-size locations.
0.066667 - A hypothetical of construction site layout Fig 11.
0.074074 - A hypothetical of construction site layout.
0.052288 - Number and type of facilities This study considers the location of some common site facilities, such as a site office, falsework workshop, labor residence and two storerooms (Li & Love, 2000), with the numbered site facilities listed in Table 6.
0.057971 - The side gate and main gate are regarded as fixed facilities.
0.063492 - The site office, labor residence and concrete batch workshop must be sited at large-size locations.
0.000000 - Table 6.
0.049383 - Facilities used on the case study.
0.000000 - Facility No.
0.016667 - Facility name Note A Site office Large size B Falsework workshop Small size C Labor residence Large size D Storeroom 1 Small size E Storeroom 2 Small size F Carpentry workshop Small size G Reinforcement steel workshop Small size H Side gate Fixed position I Electrical, water and other utilities control room Small size J Concrete Batch workshop Large size K Main gate Fixed position 4.1.3.
0.054054 - Travel distance between site locations The travel distance between locations is measured using the rectangular distance representing the actual operations and resource movements on site.
0.047619 - Table 7 shows the travel distances between the possible locations of the facilities (Li & Love, 2000).
0.000000 - Table 7.
0.000000 - Travel distance between facilities.
0.000000 - Distance Location 1 2 3 4 5 6 7 8 9 10 11 Location 1 0 15 25 33 40 42 47 55 35 30 20 2 15 0 10 18 25 27 32 42 50 45 35 3 25 10 0 8 15 17 22 32 52 55 45 4 33 18 8 0 7 9 14 24 44 49 53 5 40 25 15 7 0 2 7 17 37 42 52 6 42 27 17 9 2 0 5 15 35 40 50 7 47 32 22 14 7 5 0 10 30 35 40 8 55 42 32 24 17 15 10 0 20 25 35 9 35 50 52 44 37 35 30 20 0 5 15 10 30 45 55 49 42 40 35 25 5 0 10 11 20 35 45 53 52 50 40 35 15 10 0 4.1.4.
0.029630 - Trip frequency between facilities Trip frequency between facilities influences site layout planning and proximity between predetermined site facilities.
0.065768 - Therefore, the frequencies of trips made between facilities on a single day are assumed (Li & Love, 2000) as shown in Table 8.
0.000000 - Table 8.
0.052288 - Frequencies of trips between facilities.
0.002761 - Frequency Facility A B C D E F G H I J K Facility A 0 5 2 2 1 1 4 1 2 9 1 B 5 0 2 5 1 2 7 8 2 3 8 C 2 2 0 7 4 4 9 4 5 6 5 D 2 5 7 0 8 7 8 1 8 5 1 E 1 1 4 8 0 3 4 1 3 3 6 F 1 2 4 7 3 0 5 8 4 7 5 G 4 7 9 8 4 5 0 7 6 3 2 H 1 8 4 1 1 8 7 0 9 4 8 I 2 2 5 8 3 4 6 9 0 5 3 J 9 3 6 5 3 7 3 4 5 0 5 K 1 8 5 1 6 5 2 8 3 5 0 4.1.5.
0.091358 - Objective function This study is based on Ref.
0.061111 - Li and Love (2000), giving the total objective function as follows Eq (10): (10) Subject to • If no reasonable solutions exist that the value of results is 2000.
0.040404 - • If i = j then xij = 0; If i = k then fik = dik = 0. where n is the number of facilities; xij is the permutation matrix variable such that when facility i is assigned to location j; fik is the frequencies of trips per day made by construction personnel between facilities i and k; and dik is the distance between locations i and k. 4.2.
0.131794 - Results and discussion for case II of CSL problem This study was adapted from 30 experimental runs with the values found in Table 4 through 50 iterations by BA, PSO and PBA.
0.161546 - Table 9 and Fig 12 present the evolution of the CSL problem result.
0.090896 - As seen in Table 9, the best mean and lowest standard error for PBA are 932.01 and 11.55, which is better than BA (963.92 and 30.04) and PSO (1072.0 and 316.7).
0.086957 - Although the best value obtained by PSO (928.47) is close to that obtained by PBA and BA (920.12), PSO cannot avoid an unreasonable solution result with the worst value (i.e., 2000).
0.156614 - Therefore, PBA provides a better evolution of mean fitness, standard error, and worst result than BA and PSO.
0.000000 - Table 9.
0.078431 - The result of three algorithms.
0.000000 - Mean Std.
0.103197 - Best Worst PBA 932.01 11.55 920.12 970.47 BA 963.92 30.04 920.12 1033.2 PSO 1072.0 316.7 928.47 2000.0 Evolution of mean best values for case II of CSL problem Fig 12.
0.156430 - Evolution of mean best values for case II of CSL problem.
0.135531 - The best layout alternatives of PBA, PSO and Love (Li & Love, 2000) are shown in Figs.
0.000000 - 13–15.
0.111436 - The best layout design of PBA, PSO and Love (Li & Love, 2000) is 920.12, 928.47 and 1094.5, respectively, as calculated by Eq (10).
0.000000 - Figs.
0.081481 - 13 and 14 present similar solutions with only the locations of the labor residence and two storerooms differing.
0.134106 - However, although the objective PBA and PSO values are both better then Ref.
0.061728 - Li and Love (2000), the Ref.
0.076923 - Li and Love (2000) layout results are more reasonable in a practical CSL situation.
0.029630 - In the Ref.
0.068839 - Li and Love (2000) layout result, the site office and labor residence are both near the main gate (see Fig 15), while the PBA and PSO layout results allow site staff to enter the site office via the longest route (see Fig 14).
0.076765 - Besides, both PBA and PSO layout results present dangers to the site manager/staff to have to travel from the site office to the labor residence through the concrete batch workshop (PBA, see Fig 13) and around half of the buildings (for PSO, see Fig 14).
0.167888 - In summary, although the PBA and PSO can be obtain a better objective value than Ref.
0.082305 - Li and Love (2000), the resulting layouts are both unreasonable in a practical CSL situation.
0.056848 - This hypothetical CSL case study only considers “travel distance between facilities” and “frequencies of trips between facilities” but neglects practical CSL factors such as “work flow”, “information flow”, “safety” and “environment”.
0.144078 - Otherwise, the mentioned algorithms can also provide a more reasonable solution to this hypothetical CSL problem.
0.074074 - PBA best layout design Fig 13.
0.083333 - PBA best layout design.
0.024691 - PSO best layout design Fig 14.
0.027778 - PSO best layout design.
0.000000 - Love (Li & Love, 2000) best layout design Fig 15.
0.000000 - Love (Li & Love, 2000) best layout design.
0.187831 - In the previous section, the performance of the particle-bee algorithm (PBA) was compared with particle swarm optimization (PSO), and bee algorithm (BA) in terms of both construction site layout (CSL) problems.
0.172365 - Results show that PBA performs better than the mentioned algorithms on each CSL problems.
0.120556 - In case I of hypothetical CSL problem, the evolution of mean and best fitness, PBA are 108.37 and 0.0389 better than BA are 112.83 and 7.3584 and PSO are 126.19 and 18.626.
0.086022 - Besides, in the comparison between PBA and reference, the results show that the PBA are more reasonable than reference.
0.120556 - In case II of hypothetical CSL problem, the evolution of mean and best fitness, PBA are 932.01 and 11.55 better than BA are 963.92 and 30.04 and PSO are 1072.0 and 316.7.
0.126744 - In the comparison between PBA, PSO and reference, although the PBA and PSO can be search the objective value better than Reference but the layout results both unreasonable with practical CSL situation.
0.055556 - The situations may possibly this hypothetical CSL case study neglects the practical CSL information such as “work flow”, “information flow”, “safety” and “environment” factors.
0.164530 - Otherwise, the mentioned algorithms also can be solving this hypothetical CSL problem more reasonable.

[Frase 6] The results show that the performance of PBA is comparable to those of the mentioned algorithms and can be efficiently employed to solve those hypothetical CSL problems with high dimensionality.
[Frase 5] This study compares the performance of PBA with that of BA and PSO for hypothetical construction engineering of CSL problems.
[Frase 48] This study compares the performance of PBA algorithm with that of BA (Pham et al., 2006) and PSO for hypothetical construction engineering of CSL problems.
[Frase 4] This study proposed an optimization hybrid swarm algorithm namely particle-bee algorithm (PBA) based on a particular intelligent behavior of honey bee and bird swarms by integrates theirs advantages.
[Frase 3] Swarm intelligence (SI) was very popular and widely used in many complex optimization problems which was collective behavior of social systems such as honey bees (bee algorithm, BA) and birds (particle swarm optimization, PSO).
[Frase 104] Based on cooperation between bees (BA) and birds (PSO), the proposed algorithm improves BA neighborhood search using PSO search.
