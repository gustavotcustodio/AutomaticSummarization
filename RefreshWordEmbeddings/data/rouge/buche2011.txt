This research is situated within human learning environments using virtual reality. We propose to integrate a generic and adaptive tutoring system called PEGASE. PEGASE provides pedagogical aid for the learner and assists the Teacher.

0.279871 - This research is situated within the context of the creation of human learning environments using virtual reality.
0.278062 - We propose the integration of a generic and adaptable intelligent tutoring system (Pegase).
0.183631 - The aim is to instruct the learner, and to assist the instructor.
0.071406 - The multi-agent system emits a set of knowledge (actions carried out by the learner, knowledge of the field, etc.)
0.065574 - used by an artificial intelligence to make pedagogical decisions.
0.106383 - Our study focuses on the representation of knowledge about the environment, and on the adaptable pedagogical agent providing instructive assistance.
0.065813 - Many fields of learning, such as driving, or the professional training undergone by firemen, requires the learners to experience the setting in which they will work.
0.018265 - These learners must therefore acquire not only knowledge, but real hands-on skills.
0.090531 - Virtual environments (VE) immerse the learners in situations such as these.
0.037559 - For example, Fig 1 represents a road safety application (ARe´ViRoad) (Herviou & Maisel, 2006), a SEVESO plant application (Edward, Lourdeaux, Lenne, Barthes, & Burkhardt, 2008) and Gaspar for logistics on aircraft carriers (Marion, Septseault, Boudinot, & Querrec, 2007).
0.070175 - From left to right: screenshots from the ARe´ViRoad, Virthualis and Gaspar… Fig 1.
0.073059 - From left to right: screenshots from the ARe´ViRoad, Virthualis and Gaspar applications.
0.052083 - The work is designed for teaching decision-making in VE.
0.119855 - Tutoring system to instruct the learner and to assist the instructor already exists (Lourdeaux, Burkhardt, Bernard, & Fuchs, 2002; Rickel & Johnson, 1999), but are dedicated to a specific VE.
0.173634 - In this paper, we propose an independent VE tutoring system, called Pegase,2 in the domain of procedural and collaborative work.
0.022989 - Traditionally, most training programmes aim to teach knowledge.
0.126541 - In this context, we propose the use of Intelligent Tutoring Systems (ITS) in which this knowledge is used in conjunction with the training setting.
0.079027 - In this case, knowledge can be manipulated (Romero & Ventura, 2007), to automatically question the learner, for example.
0.016260 - To be competent does not only mean acquiring knowledge, but also how to use that knowledge.
0.094713 - In order to facilitate the acquisition of knowledge, we must provide the learner with the right setting.
0.073776 - In order to do so, we suggest using interactive systems by which the learners can be immersed in VEs in which they can make trial attempts, take initiatives, make mistakes, and try again in similar situation (which may not be possible in reality).
0.125059 - The simulation therefore provides an environment common to the learner, the instructor, and to the skill to be acquired.
0.067511 - It mediates the learning relationship (learner-skill) as well as the instructive relationship (instructor-learner).
0.052174 - Thus, computer-generated simulations, combined with an ITS, create the opportunity to improve learners’ skills by associating knowledge with the opportunity to put their skills into practice.
0.090531 - ITS have already been used without being associated to virtual reality.
0.018265 - As Wenger (1987) has shown, they usually conform to one of four models.
0.049645 - The first, known as the domain model, contains a representation of the knowledge linked to the skill to be acquired.
0.071197 - ITS also use a learner model which defines his/her personal characteristics and ascertains the condition of the knowledge at a given moment.
0.068854 - Using the domain and learner models, the ITS is able to evaluate the knowledge acquired by the learner by comparing his/her activity with information about the field (Keles, Ocak, Keles, & Gülcü, 2009).
0.073751 - However, the main objective of the ITS is to the provide appropriate assistance to the learner (Wang, 1997) or the instructor, depending on the setting (following the activities or offering assistance).
0.081761 - In this context, the pedagogical model can be used to make choices with regards to the training objective, with the aim of facilitating learning.
0.126582 - Finally, an interface model is used to exchange information between the system and the user.
0.052632 - For now, this model has not been reified in existing VEs designed for learning.
0.136323 - Within the context of our VE, we consider an ITS as a system which is part of the human Virtual Learning Environment (VLE).
0.124311 - We propose to evaluate the extent to which ITS are integrated within existing VLE.
0.043716 - We have grouped VLE according to three categories: 1.
0.061033 - VLE as classical simulators This first category groups together those applications which include none of the four models, such as the application designed to assist both in the maintenance and control of mobile cranes (Levesque, 2003).
0.080000 - In this kind of VE, the system provides no explanations about the task to be performed, which would require a domain model.
0.118243 - The environment is therefore unable to adapt to the learner, as this would require a learner model.
0.065574 - Finally, the teaching method is the instructor’s responsibility.
0.075362 - The system is not able to make decisions regarding instructive interventions, however, a system like this one can help learners to improve or modify pre-existing skills.
0.066116 - VLE with domain and/or learner models This second category of VE is made up of applications which include a domain model and/or a learner model (Hubal, 2008).
0.092754 - The most well-known example of this type of VE is Steve, a virtual character who assists in both teaching and learning procedural tasks (Rickel & Johnson, 1999).
0.088429 - Using the domain model, Steve can demonstrate and explain the procedure and above all, verify the learner’s actions.
0.000000 - However, Steve intervenes on demand.
0.078431 - He is incapable of knowing when, how and why to intervene, which would require a pedagogical model.
0.091743 - In a system such as this it is possible to acquire skills, but the participation of the instructor is still required for all pedagogical interventions.
0.070166 - VLE with domain, learner, and pedagogical models This final category groups together the VEs presenting not only domain and learner models, but also a pedagogical model (Amokrane, Lourdeaux, & Burkhardt, 2008).
0.060606 - Let us examine the example of the educational agent Hal, from the Fiacre system (Lourdeaux et al., 2002).
0.107518 - The application is designed to instruct individuals in learning to drive TGV trains (Train Grande Vitesse), using virtual reality (intervention on railways).
0.047655 - As well as having all of Steve’s abilities, Hal assists the instructors in structuring pedagogical discourse.
0.043956 - In concrete terms, each anticipated behavior corresponds to a different instructive assistance (additional information, explanation of an object, etc.).
0.056911 - The instructor must therefore list the possible errors for each piece of knowledge to be acquired.
0.056410 - Furthermore, for each of these errors, the instructor must specify the way in which these pedagogical strategies should be conducted through instructive assistance, and indeed he must do so for each exercise.
0.087753 - The main advantage of this kind of VLE lies in the assistance to the instructor in terms of the educational relationship linked to the learner, and in the didactic relationship linked to the skill to be learnt.
0.059072 - However, the instructor must specify all of the knowledge to be acquired for each exercise.
0.018265 - Thus, most VLE only include the representation of knowledge about one specific domain.
0.104762 - Systems proposing a diagnostic component only provide a mechanism for instructive assistance.
0.076190 - Hal seems to us to be the most successful of these systems.
0.085106 - However, the instructor must still make a list of the possible errors and specify the pedagogical strategies for each exercise.
0.085082 - Furthermore, the impact of the instructive assistance on the learner is not taken into consideration.
0.075849 - In concrete terms, any proposed assistance which does not help the learner to make progress will be reproposed each time that specific situation occurs.
0.137472 - In order to resolve these shortcomings, we propose the integration of an intelligent tutoring system within a VE.
0.093750 - This system must propose a flexible pedagogical model, i.e.
0.018265 - a model in which instructive concepts can be easily added, modified or deleted.
0.071429 - Furthermore, a model such as this must be generic, in so much as the pedagogical model must be exploitable independently of the task to be performed.
0.093081 - Finally, the knowledge of the pedagogical model, along with its past experience, could be used to automatically suggest the appropriate interventions by taking into account both the learner and the context of the simulation: the system therefore becomes adaptive.
0.221983 - Our model is called Pegase (PEdagogical Generic and Adaptive SystEm).
0.085714 - In the next section, we will describe the global architecture of Pegase.
0.019048 - We will then go onto present our domain model (see Section 4).
0.052632 - This will then lead to our description of our pedagogical model (see Section 5).
0.050633 - We shall then go onto discuss the advantages of our proposed models (see Section 6).
0.102151 - It must be noted that the proposal described here is applicable within the context of the learning of procedural and collaborative tasks and cannot be used in general learning situations.
0.086275 - Our proposal consists of reifying the four classical ITS models (domain, learner, pedagogical, interface), within a VE.
0.098485 - We believe that errors can provide crucial information and thus decided to introduce a model called “error model”.
0.073333 - It is through the use of this new model that we will be able to generalize (where Hal could not do so).
0.054983 - Furthermore, we have also added an “instructor model”, in which the instructor specifies the knowledge about the exercise to be performed.
0.070439 - He defines the guidelines which describe the procedure(s) to be carried out, and the role(s) played by the learner (and consequently those which must also be activated automatically).
0.110804 - These models must provide solutions to the shortcomings of the existing systems as detailed above and must therefore display two important characteristics: genericity and adaptability.
0.137123 - We therefore suggest that, from a VE, it is possible to transplant a generic and adaptive ITS by reifying the 6 ITS models.
0.058559 - In order for each model to be able to share its information and conduct its analyzes autonomously (independently of both the situation and of other models), an autonomous entity (known as an agent) is associated to each model.
0.019900 - The agents interact by exchanging messages containing data (see Fig 2).
0.065476 - This data can be extracted from the situation or inferred from the agent’s internal reasoning from its knowledge (the model to which it is linked).
0.088471 - Step 1.Observation: Using the interface model, the system analyzes the learner’s activity.
0.110407 - The elements that are important for learning are supplied to the learner model.
0.095755 - This information concerns the learner’s actions, those elements which the learner can observe, and the learner’s movements.
0.081479 - Step 2.Detecting and identifying an error: The system analyzes the learner’s actions (learner model) and compares them to the actions to be performed (domain model).
0.087432 - This confrontation is used in order to detect errors.
0.047059 - If an error has been detected, an error identification mechanism is set up (using the error model).
0.092142 - Step 3.Proposing instructive assistance: Using the learner model (characteristics, activities, errors, etc.
0.093759 - ), and the domain model (knowledge of the organisational structures), a mechanism stimulating instructive reasoning recommends the instructive assistance for the given situation.
0.030303 - It must be noted that this step is not optional; it intervenes even if no error is detected.
0.057552 - Step 4.Choosing instructive assistance: The instructor can choose one specific instructive assistance amongst those proposed.
0.079699 - Step 5.Representing instructive assistance: The instructive assistance selected is presented in the VE.
0.041667 - The instructive process of our five-stage system Fig 2.
0.045977 - The instructive process of our five-stage system.
0.057971 - To use the information from the VE, we must inform the environment in order to obtain controllable knowledge: we thus achieve an informed VE (see Section 4).
0.076923 - We must therefore reify the environment.
0.073059 - This knowledge is complemented by additional information contained within the 6 ITS models.
0.133929 - This data makes up a knowledge base for the pedagogical model which we call the pedagocical situation.
0.043860 - This knowledge fuels the ITS’s motor for making instructive decisions (see Section 5).
0.056738 - An example of the way in which the rules governing this motor are specified is presented in Section 5.3.
0.079602 - For reification, we define the Veha (VE for Human Activity) metamodel.
0.078147 - The aim of Veha is to provide a metamodel to describe the VE, not in terms of geometric space, but by providing the semantics required for the artificial agents (ITS, autonomous characters) or humans (learners or instructors) to be able to construct for themselves a representation of the environment and to act together to reach their goals.
0.061162 - The Veha metamodel is based on Uml and enables the construction of domain patterns from VEs and from the corresponding concrete VEs (see Table 1).
0.110398 - However, the metamodel does not allow us to define the specific concepts of virtual reality.
0.074695 - In Veha, we propose to extend Uml in order to represent these concepts.
0.094118 - The aim of this extension is to reify the realistic VE in which humans carry out activities.
0.049751 - However, it is not adapted to all VE (metaphoric, phenomenological, etc.).
0.000000 - Table 1.
0.065041 - Layers of modeling (Mi): the positioning of Veha within the Mof guidelines, in parallel to Uml.
0.000000 - M4 Mof (Uml limitation) M3 Meta–model Uml Veha metamodel M2 Umluser model VE1 model … M1 User object VE1a VE1b … … 4.1.
0.050847 - The Veha metamodel The ITS needs to know which objects make up the VE, how to access it, its properties, its behavior and how to interact with it.
0.020833 - Three kinds of knowledge can be expressed using Veha: 1.
0.062745 - Domain concepts: This entails the semantic description of the concepts relating to the field of activity concerned.
0.068204 - This represents some of the knowledge that the learner must acquire (Section 4.1.1).
0.063768 - The possibility of structuring and interacting with the environment: These concepts resemble those suggested in smart objects (Kallmann & Thalmann, 1998) which reify those properties required for interactions.
0.071598 - The means available to the learner or to the ITS must be specified in order to modify the environment (Section 4.1.2).
0.092682 - Entities’ behavior: Within the framework of a VLE the environment’s reactions to the learner’s actions must be simulated.
0.060000 - Entities’ behavior also represents one of the elements of the knowledge to be transmitted and must be enforceable (Section 4.1.3).
0.066667 - In the following part of this section, we shall explain how Veha can be used to express these three kinds of knowledge.
0.066116 - Domain concepts Knowledge of the domain is expressed both at the model (concept) level, and at the level of the occurrences of these concepts (tangible objects populating the environment).
0.067511 - In Veha as in Uml, this knowledge is represented by classes (Class) and instances (InstanceSpecification).
0.070922 - In Veha, the notion of class is used to define a type of object Fig 8 from domain-specific ontology.
0.044077 - The aim is to be able to apply semantics to each of the domain concepts, whether or not they are tangibly represented in the VE (concepts vs concrete objects).
0.024242 - All classes stem from the Element class.
0.075472 - This class enables the identification of each of the elements of a domain model from its name and the addition of a textual comment.
0.081301 - This can be useful when providing the user with explanations regarding the significance of an object.
0.065934 - The structural properties (Property) and behavioral features (BehavioralFeature) of the classes are assigned to the Classifier3via the Feature class.
0.027491 - The Property class represents the structural component of the Classifier (as much the attributes as the relationships with other domain concepts).
0.052632 - As in Uml, the Operation class is the only tangible sub-class of BehavioralFeature.
0.075758 - It is used to express the effect that an object or a user can have on another object.
0.073260 - It does this by defining the object’s actual behavior rather than the method used to achieve that behavior.
0.054983 - The way in which the behaviors associated with Operation are modeled is described using behavioral models (see Section 4.1.3).
0.033755 - After the notion of Class, Instance, synonymous of object, is Veha’s second key concept.
0.065041 - The InstanceSpecification, Slot and AssociationInstance classes represent the instantiation of de Class, Property and Association respectively.
0.051780 - The term InstanceSpecification indicates that here, we represent an M1 level entity Table 1, independently of the circumstances in which it is implemented.
0.069182 - The set of knowledge about the environment as specified in Veha can be accessed by the ITS and by the users (learners or instructors).
0.080426 - The ITS can, for example, suggest to the learner a list of operations to be performed on one specific kind of object.
0.058608 - Likewise, the instructor can modify the environment during the simulation by changing the attribute values of a tangible object.
0.079000 - The possibility of structuring and interacting with the environment Within the context of VEs, most of the tangible objects within those environments are represented geometrically, and are situated within the environment.
0.105655 - The learner must be able to observe, recognize and manipulate these objects.
0.063252 - The ITS also needs to be able to manipulate them within the context of the instructive assistance that it will implement (transparency, refocusing from the learner’s point of view, etc.).
0.048930 - Knowledge about the geometry of these objects must also be specified so that the ITS will be able to recontextualize its suggestions within the VE.
0.045307 - These objects are entities and all have the properties of the instances veha::Class as well as geometric and topological properties Fig 7.
0.043716 - Each entity is located at a global reference point.
0.090909 - The Shape class is used to assign an instance of EntityClass to a graphical representation in the VE.
0.038095 - It is possible to assign many forms to one class of entity.
0.062745 - The ITS can use this knowledge to highlight an object or, on the contrary, to hide it.
0.081159 - The TopologicalProperty class supports the notion of location (position and orientation) and is used to describe the topological properties of the elements within the VE Fig 7.
0.043956 - It is possible to assign informed points to an entity (Point) which can be used to create an interaction.
0.125059 - This information is used by the ITS to turn the learner’s attention to a specific object, for example.
0.053030 - Any entity within the VE is an instance of EntityClass: the Entity class, which derives from Kernel::InstanceSpecification.
0.019048 - The values of an entity’s properties are defined by its slots.
0.070922 - These therefore depend on the semantic, morphological, geometric and topological properties of the objects within the VE (supplied by InstanceSpecification).
0.075662 - Entities’ behaviors When the learner carries out an action in the environment, that environment must react in a realistic way for the learner to be able to understand the consequences of his actions.
0.094828 - The learner therefore constructs a representation of the entities’ behavior.
0.068854 - For the ITS to be able to regulate this representation, the knowledge of entities’ behaviors must also be specified, as for the two previous kinds of knowledge, and it must also could be executed.
0.079653 - The role of the Behavior package is to model the possible behaviors of the entities within the VE; the objective being for the model to be interpreted in real-time by a behavioral controller, and to be introspected online.
0.079399 - As for the structural aspects, introspection relies both on the behavioral model (M2) and on its “instantiation”, that is to say, the way it is carried out (M1).
0.054795 - The two classes which support these notions are Behavior and BehaviorExecution (Fig 6).
0.040899 - The Veha entities have reactive behaviors which are triggered by events that can be caused either by the learner or by another of the VE’s entities.
0.084388 - Traditionally, behaviors are assigned pre-conditions and post-conditions concerning the entities and the environment.
0.059701 - Behavioral modeling relies on state machines and the Uml activity model.
0.000000 - Finally, it can also be based on functions written in programming language that can be consulted online (OpaqueBehavior).
0.042553 - The first two methods are introspectable; the ITS can therefore describe or check the way the behavior is carried out.
0.067092 - The tutor can thus analyze, explain or check the context in which an entity’s behavior is carried out by the learner.
0.024465 - Better still, if a particular behavior has been specifically described (state machine or activity) it can also explain the way it will be carried out.
0.047059 - Example of an environment in Veha The Veha metamodel can automatically interpret a model described in Uml.
0.043860 - Fig 5 shows the class diagram for an example of a VE in Veha.
0.030303 - This example comes from an application created in Veha, but which has been greatly simplified for demonstration purposes.
0.056738 - The application (Gaspar, Marion et al., 2007) is made up of around fifty classes and more than one thousand entities.
0.083333 - This model shows the classes Deflector and CatapultControlPod (left window).
0.032520 - The catapult control pod shields the operators working on the catapult deck of an aircraft carrier.
0.048780 - A pod can open (raise above the deck) or close (drop back down into the deck).
0.036530 - The domain model specifies all of the pod’s properties (height, speed, etc.).
0.048780 - The reactive behavior of a pod is specified by a state machine (top right-hand window).
0.119403 - This state machine is sensitive to the signals Open and Close.
0.075472 - Therefore, when the pod is Closed, if it receives the signal to Open, it changes to the Open state and performs the operation: Open ( ).
0.071942 - Within the context of this application, this operation is detailed by an OpaqueBehavior, a C++ code which carries out the visual displacement of the pod depending on the speed attribute, and updates the height attribute.
0.021858 - In much the same way, deflectors also react sensitively.
0.078947 - Due to the additional needs of this demonstration, we added a testing operation (Test).
0.041667 - This operation takes its settings from a catapult control pod.
0.050633 - The behavior of this operation is specified by an activity diagram (bottom right-hand window).
0.056604 - Therefore, when a Test operation is evoked in an instance of the Deflector class, the operation sends the signal Open to the predefined pod.
0.068966 - This model is defined using Objecteering modeling software.
0.022989 - It is then exported in an XMI file.
0.129342 - The first proposal is to add an interpreter to the Veha metamodel within the AReVi virtual reality platform.
0.056604 - The interpreter reads the XMI file and, for each class of Uml metamodel, creates an instance of the corresponding class in the Veha metamodel.
0.050314 - Thus, for each domain class defined in the XMI file, the interpreter creates a new instance of the class class from the Veha metamodel.
0.079867 - In the context of our example, an instance of the Class class is created for the Deflector class, and another created for the CatapultControlPod class.
0.075601 - The interpreter enables the reification of the domain model and provides an set of methods facilitating the introspection of this model.
0.072356 - It is therefore possible to ask the interpreter for the set of a class’s properties, the signal which enables the passing from one state to another, and the operation which will then be conducted, all independently of any tangible object.
0.050633 - The VE is populated with entities; instances of the Entity class of the Veha metamodel.
0.019048 - From a technical standpoint, these instances are defined in an XML file.
0.070175 - Using Uml, class instances can also be described and exported in the XMI file.
0.060606 - However, no Uml modeler can make it simple to attribute a geometry and a position to these instances.
0.056738 - The geometric design of the VE is, in general, the result of specialist modelers such as 3DS MAX or Blender.
0.085106 - We therefore suggest using an export plugin for 3DS Max which would generate the instance file read by the interpreter.
0.061162 - Fig 4 show the visual result of the file defining the model (XMI) and the instance file (XML) in an application implemented using ARéVi.
0.104762 - The interpreter also provides the methods for interrogating and manipulating the entities.
0.044077 - It is therefore possible to ask an entity for its property values, to carry out an operation, or to send it a signal in order to change its state.
0.039801 - Example of a procedure written using an activity diagram Fig 3.
0.043716 - Example of a procedure written using an activity diagram.
0.062500 - Visualisation of the instances of CatapultControlPod and Deflector Fig 4.
0.068966 - Visualisation of the instances of CatapultControlPod and Deflector.
0.076190 - Class diagram for a deflector and a catapult control pod Fig 5.
0.083333 - Class diagram for a deflector and a catapult control pod.
0.038095 - Class diagram from the Veha metamodel: Behavior::Common package, the… Fig 6.
0.038095 - Class diagram from the Veha metamodel: Behavior::Common package, the BehaviorExecution class.
0.069652 - Procedure and collaboration Here we shall examine the acquisition of skills.
0.056800 - The domain model not only contains knowledge about the environment in use, but also knowledge about the task which must be performed within that environment by the learners.
0.067278 - Within this context, activities are defined by the procedures describing the Actions to be performed by a number of entities, each with specifically defined roles.
0.021858 - The procedures are therefore defined by UML activity diagrams.
0.054902 - This kind of diagram uses the traditional possibilities for organizing its Actions (parallelism, sequence, junction, condition, etc.)
0.041237 - As we are dealing with representing human activity, we consider that the sequence of activities takes place in an asynchronous manner.
0.022989 - The organization roles are represented by activity corridors.
0.073394 - The name of the corridor defines its role and its type, as well as the type of agent that is authorized to take this role.
0.000000 - As in Uml 2.1, there are many different types of activity.
0.053333 - This could be the execution of an agent’s operations, a basic virtual action (playing an animation, reaching a given position, etc.)
0.045977 - or sending a signal to a specific resource.
0.075949 - The resources are played by the environment’s entities and represented by objects in Uml.
0.062745 - The conditions are expressed in Ocl and stem from the roles and resources participating in the procedure.
0.054795 - Fig 3 illustrates the example of a procedure expressed using an activity diagram.
0.042813 - This procedure solicits the intervention of three roles (such as CabinOperator) which must be played by characters of a pre-defined type (PEH for example).
0.050633 - The characters which play these roles are those which are effectively instantiated in the environment.
0.075472 - This procedure aims to make the airplane which is to be catapulted advance towards a given point by manipulating the deflector (a protective plate).
0.067146 - The example of the procedure in Fig 3 illustrates the complementary nature of the state machines used to define the reactive behavior of the objects in the environment and the activity diagrams defining a procedure.
0.051643 - A procedure’s action can be represented by sending an event to a given object to be manipulated, and the conditions of moving onto the following action can depend on the current state of the object.
0.073059 - We implemented agents’ behaviors using knowledge about the procedures to select their actions.
0.064745 - The learner plays one or more roles in the context of these procedures.
0.067511 - The ITS also draws on this knowledge in order to choose which assistance to suggest.
0.085048 - As for the environment, there are two levels of modeling available to the agents (including the ITS) and the users (instructors): the organizational structure and the organisational instances.
0.073171 - The intelligent tutor is therefore able to recognize the sequence of actions independently of all organization.
0.037054 - It can also follow the precise progress of the procedure being carried out in the team in which the learner plays one or more roles.
0.083786 - It is therefore able to detect the learner’s errors regarding the order of the actions to be completed and the respect for the conditions defined in the procedure (Trinh, Buche, Querrec, & Tisseau, 2009).
0.080586 - Knowledge about the environment (the entities and about the task to be performed) are represented with the Veha model.
0.040580 - Our ITS can thus manipulate them in order to construct its own knowledge, as shown in Section 5.1, and can simulate pedagogical reasoning (Section 5.2).
0.068729 - Finally, a tangible implementation of the ITS is proposed in Section 5.3 (specification of the rules of simulated pedagogical reasoning).
0.073260 - Pedagogical situation It must here be emphasized that our work takes place within the context of in situ learning.
0.048110 - Within this theoretical framework, the contextual elements are paramount in the ITS’s decision-making (Pomerol & Brézillon, 2001; Turner, 1993).
0.095238 - In our case, we refer to context as the pedagogical situation which serves as a basis for decision-making.
0.080437 - The aim is to define a context such as this from a “generic” standpoint, which would enable us to alter information without having to take into account the specific task being carried out.
0.064790 - In order to do this, we must separate knowledge on the task to be performed (see Section 5.1.1) from knowledge about the learner (see Section 5.1.2).
0.073260 - Information concerning the task to be performed We positioned our work within the context of training for procedural work.
0.103152 - The aim of the ITS is to assist the learner in his/her progression through the procedure.
0.047059 - First of all, we can consider the procedure as a sequence of actions defined by an expert.
0.058608 - The elements to be considered are therefore subject to sequencing which cannot be questioned, and sometimes cannot be explained.
0.033755 - Secondly, we think that memorization of the sequence of actions could be facilitated through understanding.
0.067511 - In this context Richard (1990) suggests adding the notion of sub-objectives to the procedure.
0.051282 - To meet this aim, i.e.
0.033755 - the completion of the procedure, an set of causally linked sub-objectives must be conducted.
0.048930 - The procedure must therefore be studied taking into the account the distance to the procedure’s goal from a causal, rather than a chronological standpoint.
0.052980 - The above analysis thus highlights two ways of dealing with procedural learning: the study of the domain sequencing links which are strongly linked to the roles in the procedure, and the study of causal links between sub-objectives: 1.
0.047059 - Sequencing links Sequencing links conduct the relationships between the actions using the strict description of the procedure.
0.033755 - They are the direct consequence of the sequencing of actions as defined by the expert.
0.076312 - We are interested in the information linked to the actions closest to the action requested by the learner.
0.024066 - More precisely: • the last correct action completed before that which the learner has just solicited; • the action which has just been solicited by the learner; • the correct actions to be carried out, taking into account the role(s) to be played (which are potentially different to the solicited action); • the correct actions to be performed, when considering that all roles are played by the learner; • those actions following all the correct actions.
0.078658 - We chose the actions closest to that which is solicited in order to try to reduce the “distance” between the goal (the end of the procedure) and the learner’s location in the procedure.
0.042553 - Technically, this is done by carrying out plan recognition based on the Veha activity diagram shown in Section 4.3.
0.078014 - The pedagogical situation thus retains the knowledge linked to the actions that are chronologically close to that which is requested.
0.042553 - Causal links between sub-objectives The procedure can be considered like a graph representing the sequence of causal sub-objectives.
0.101959 - We therefore contemplate all of the actions linked to that which the learner is performing.
0.053333 - In concrete terms, this means the actions requiring the effect of the correct desired action (usage conditions, state of a resource, etc.).
0.055046 - A distinction must be made between these links, which correspond to individual logic, and sequencing, whose links correspond to the organization of a collective procedure.
0.056738 - Technically, we are dealing with the links between post-conditions and pre-conditions as mentioned in Section 4.1.3.
0.052174 - It must be stressed that our objective here is to extract knowledge relating to the work to be carried out in order to assist pedagogical decision-making.
0.066667 - Within this context, we shall consider the knowledge detailed in Table 2.
0.106383 - All the actions which have been identified up to this point (sequential and causal links) make up the pedagogical situation.
0.070175 - More specifically, we are interested in the information that relates to the selected actions.
0.087719 - At this point, we must specify the knowledge relating to the concept of action.
0.068729 - From this perspective, the “action context” is made up of knowledge that is directly linked to the Action (description, resources, etc.
0.041026 - ), knowledge relating to the Operation, which is the target of the Action, as well as knowledge relating to the agent that has requested the action, as that agent is the central character.
0.075117 - We therefore use action contexts in order to represent the knowledge associated with particular actions (a sub-group of the environment made up of the entities and agents considered relevant in the context of the action).
0.000000 - Table 2.
0.093750 - The pedagogical situation: knowledge about the task to be performed.
0.047059 - Knowledge Nature Description ① Context of the previous action Sequential The last correct action to have been performed.
0.047619 - This action serves as a point of reference from which one can position oneself in the procedure ② Context of the requested action Sequential The requested action.
0.024242 - This action could be correct or incorrect.
0.033835 - The action has not necessarily been performed, in accordance with the pedagogical model ③ Context of the correct action(s) without considering their roles Sequential In considering the last correct action, we can determine the actions to be performed within the context of the current procedure ④ Context of the correct action(s) Sequential A sub-group of the previous item which does not take the roles played by the learner into account ⑤ Context of the following action(s) Sequential For each correct action, we determine the actions which follow it according to the current procedure ⑥ Context of related action(s) Causal In considering the actions to be performed following the last correct action, we retrieve the “causal” links between the actions independently of the procedure.
0.080000 - We therefore obtain the actions which are related It is the responsibility of the pedagogical agent to construct this set of knowledge.
0.052493 - The pedagogical agent retrieves or constructs the knowledge required about the task to be performed when it receives a message from the interface agent detailing an action which has been requested.
0.080586 - This choice is be debatable and indeed another possible solution is to update the knowledge when an error occurs.
0.061518 - We chose to reconstruct the knowledge of the actions in order to retain the option to intervene, even if the learner’s actions are correct.
0.078913 - This means that we can provide pedagogical assistance in order to reassure the learner about the decisions that they make, or inversely to imply doubt if it looks like they are about to make a mistake (example: confirm false rules which contradict the choices the learner has made).
0.058653 - Information concerning the learner The information about the learner comes from a number of sources, but are all collected by the learner model.
0.060000 - This information relates both to static data (such as age) and dynamic data (such as elements of memory at a given time).
0.079699 - It must be noted that the learner’s errors are recorded and are analyzed.
0.070175 - Our error model is based on the Cognitive Reliability and Error Analysis Method (CREAM).
0.073260 - This approach proposed a classification scheme which makes a distinction between observations of errors (phenotypes) and its causes (genotypes).
0.050633 - The causal links between phenotype-genotype are represented using a number of consequent-antecedent links.
0.056911 - Finally, the scheme could be associated with a method of retrospective analysis (the search for causes).
0.068729 - The most probable cause-effect links is found using Dempster-Shafer’s theory presented in El-Kechaï and Després (2006).
0.052632 - In much the same way, the contexts relating to the actions are also recorded.
0.083333 - This information allows us to see whether or not learner has already used a particular resource, for example.
0.075601 - In concrete terms, we have just defined the input information and the pertinent elements from which pedagogical decisions can be made.
0.094340 - The pedagogical agent The pedagogical situation (Section 5.1) gives us the option of triggering pedagogical assistance relating to the elements detailed within it.
0.066667 - It thus provides the possible outcomes of the pedagogical decision-making process.
0.110276 - We shall now go onto define a model for simulating the behavioral decision-making of the pedagogical agent providing instructive assistance, that is to say, a model linking knowledge and the proposed assistance.
0.094118 - It must be noted that we are working within the context of learning procedural and collaborative tasks.
0.099774 - We must therefore consider: • The atypical nature of the knowledge involved (knowledge stemming from basic pedagogical methods to virtual reality).
0.039216 - • Adaptability (the agent’s reasoning processes must auto-adapt in order to take past experience into account).
0.045455 - • This reasoning must be specified prior to the event (initial specifications can therefore be made by an instructor).
0.073813 - The criteria which arise from these considerations are as follows: expressiveness, hierarchy, modularity, reactivity and adaptability.
0.056658 - After having examined the existing families of behavioral architecture (connectionist, automata-based, rule-based), we opted for the rule-based families (Goran & Vladan, 2003) which best respond to the criteria outlined above.
0.043716 - More precisely, we chose classifier systems (Sigaud & Wilson, 2007).
0.119539 - This is a reactive and adaptive form of architecture, based on conditional rules.
0.101274 - We propose the use of a model based on a hierarchical classifier system.
0.070175 - This system organizes knowledge while taking into account the abstraction of the data involved.
0.055371 - It structures knowledge according to three levels, from rules based on abstract knowledge of educational methods (the pedagogical approach), to the rules based on concrete knowledge of virtual reality (pedagogical techniques), via an intermediary level (pedagogical attributes).
0.018265 - Each level of abstraction contains sets which group together a number of rules.
0.033755 - One set represents a way of dealing with a particular approach, attitude or pedagogical technique.
0.080586 - The rules are conditioned by the elements of the pedagogical situation, and favor the sets from the lower level.
0.080586 - The system therefore uses a diffusion mechanism in all three levels which considers the rules matching the pedagogical situation.
0.101266 - This gives rise to a list which then arranges the different suggestions for pedagogical assistance.
0.068182 - Fig 9 illustrates the structure and the dynamics of the pedagogical model controlling the pedagogical agent’s behavior.
0.051282 - The information taken into account in the conditional part of the rules are retrieved by our ITS (pedagogical situation).
0.056911 - These “inputs” are available at the three levels of data abstraction (approach, attitudes and pedagogical techniques).
0.032362 - The rules whose conditional elements are satisfied in terms of input favor some of the sets of pedagogical rules from the lower level.
0.073171 - The upper level (techniques), directly favors those pedagogical suggestions which can be applied within the environment.
0.045455 - These suggestions are made to the instructor who chooses that which they consider to be the most relevant.
0.021858 - Class diagram from the Veha metamodel: EntityClass Fig 7.
0.024242 - Class diagram from the Veha metamodel: EntityClass.
0.038095 - Class diagram from the Veha metamodel: Features of a Classifier Fig 8.
0.041667 - Class diagram from the Veha metamodel: Features of a Classifier.
0.034483 - Complete representation of the pedagogical model Fig 9.
0.038462 - Complete representation of the pedagogical model.
0.024242 - Simulating pedagogical reasoning has two advantages: 1.
0.045662 - As instructors are not always teachers, they too are being given pedagogical assistance.
0.066403 - The instructors are not simulation software experts, so the pedagogical agent will offer assistance to the learner who will have the opportunity to make the most of the VE.
0.086870 - Specifications of the pedagogical model In order to implement the pedagogical model, the teacher must specify: 1.
0.063578 - The sets of rules for the three levels of abstraction.
0.072917 - The pedagogical rules for each of the sets of rules.
0.070588 - Here, we will discuss information from the literature which can be used when specifying the pedagogical model.
0.059072 - Specifying the sets of pedagogical rules We worked from the studies by Lourdeaux et al.
0.052083 - (2002) in order to define the sets of pedagogical rules.
0.086275 - We obtained the following Tables 3–5 corresponding to the three levels; approaches, attitudes and techniques, respectively.
0.058608 - This information represents the opportunity to specify sets of rules at each of the three levels (see Fig 10).
0.000000 - Table 3.
0.047655 - Examples of set definitions for the “pedagogical approach” level of abstraction based on (Lourdeaux et al., 2002).
0.075601 - Pedagogical approach Description Active/constructivist An active approach is learner-centered, considering him/her the main actor in the learning process.
0.057143 - This approach suggests techniques through which they can produce, create and search.
0.073333 - The knowledge required can be found in the environment Expositive/affirmative This is the most traditional approach which uses the display technique.
0.045977 - It is based on a content-transfer approach.
0.091463 - Knowledge is external Interrogative This approach makes recommendations to the learner, guiding him/her towards the desired outcome.
0.045307 - Learners may have the impression that they have discovered something new, but it is the instructor who will have guided the thought process.
0.027211 - Knowledge is internal Table 4.
0.047655 - Examples of set definitions for the “pedagogical attitudes” level of abstraction based on (Lourdeaux et al., 2002).
0.073877 - Pedagogical attitudes Description Perform Perform the task in the place of the learner.
0.059078 - This strategy can be used by the instructor to show the learner the correct technique or move Disruption Some instructors tease and disrupt the learners by giving them incorrect information or potentially incorrect solutions in order to test the learners’ conviction of their ability to reason independently Suggest Showing where the learners can find theoretical information or where to find information within the environment.
0.055396 - These attitudes allow the instructor to show the learners that they can find the required information independently and therefore deal with the situation in a calm manner Independent learning This attitude encourages the instructor to remain in the background as an observer rather than to intervene Explain The explanations and information are also designed, quite simply, to explain the functioning of certain devices, rules of analysis, safety rules, etc.
0.067560 - Encourage Encouraging the learners when they perform a task correctly Table 5.
0.047655 - Examples of set definitions for the “pedagogical techniques” level of abstraction based on (Lourdeaux et al., 2002).
0.028169 - Pedagogical techniques Description Improvement Addition of visual and audio symbols or animated films Deterioration Unrealistic images (erased points of reference, feed-back, proprioceptifs dégradés, altered colors, blurred background/surround, reduction of objects, iconization, etc.)
0.032520 - Upscaling Exageration of reality (representing objects on a larger scale, surreal, brighter or shinier objects, etc.)
0.050314 - Simplification Simplification of the virtual scene (a crowd can be represented by people with simplified movements, simplified objects, simplified kinetic systems, wireframe images, etc.
0.052180 - ), schematic representations of certain devices Restriction Limitation of certain movements or actions (limiting the area within which the learner can move around, etc.)
0.000000 - Animation Animated sequence (automatic positioning, keys which turn automatically once in place, etc.)
0.048512 - Perspective Altering the learner’s normal viewpoint (view from behind, above, etc.)
0.041667 - Modification Changes in appearance and texture (colors, flickering objects, etc.)
0.045455 - Modeling The representation of abstract concepts, of physical phenomena invisible to the naked eye, types of errors, etc.
0.041667 - Visualisation Hidden mechanisms (the inside of a motor, gears, etc.)
0.047619 - Specifying the three levels of the pedagogical decision-making model Fig 10.
0.052083 - Specifying the three levels of the pedagogical decision-making model.
0.066451 - Specifying the pedagogical rules Once the sets of pedagogical rules are defined, the teacher must specify the associated rules.
0.043716 - A rule is represented by a sequence of characters.
0.096491 - The effect and condition parts are based on the elements of the pedagogical situation.
0.063830 - In the following example, we position ourselves at the Pedagogical Methods abstraction level, with an set of rules called Active.
0.076456 - A first rule for this set is fulfilled is the learner is a novice (Learner.Level==novice), if they have performed an organization error (Learner.Error.type==procedural) and if the action performed is different from the correct action (!Task.RequestedAction in Task.CorrectActions).
0.054795 - In this case, the rule favors the Explain set from the following level.
0.022989 - if (Learner.Level == novice && Learner.Error.type==procedural && !
0.000000 - Task.RequestedAction in Task.CorrectActions) then (Explain) 5.3.3.
0.085106 - Use A specific pedagogical model was created from the structure described above, and from the papers by Lourdeaux et al.
0.000000 - (2002).
0.000000 - These sets are described in Fig 10, with each set containing an average of five rules.
0.087719 - This pedagogical model was applied to two distinct VEs designed for learning collaborative procedures.
0.073491 - No modification of the pedagogical model (sets and rules) is required for either of these applications, which are very different, but which are both based on the same kind of learning.
0.048780 - However, we believe that these changes would only need to be made at the intermediate level.
0.051282 - For other types of learning (for example for a scientific practical), these rules would probably need to be changed.
0.075601 - Artificial learning Thanks to artificial learning, the weight of the rules can be refined for adapting to the instructor’s preferences.
0.063927 - The learning algorithm is inspired by the Bucket Brigade (Holland, 1986; Wilson, 1987).
0.063927 - This system distributes remunerations to the rules which enabled them to be obtained.
0.061162 - It is adapted to classifier systems (Sigaud & Wilson, 2007) with a list of rules which, when followed one after the other, lead to an action.
0.048780 - In our case, this sequence of events corresponds to the passing from one level to another.
0.048930 - Remuneration is reflected by the instructor’s choice: the pedagogical technique which they choose defines the rules in the third level which will be compensated.
0.054795 - By back-chaining, the rules in levels one and two are also compensated.
0.053571 - The weights of the rules which match the pedagogical situation, but which participate in activating a technique other than that chosen by the instructor will decrease.
0.064935 - The algorithm shares out the remuneration, including a tax which means that the rules which rarely match are not put at a disadvantage, and that the strong rules are penalized in order to retain the adaptive nature of the system.
0.066667 - Therefore, as the exercises progress, the pedagogical agent must make suggestions which correspond more and more closely to the instructor’s decisions.
0.067797 - The pedagogical agent could therefore temporarily take over and directly apply the assistance that it has chosen itself, should there be more than one learner at a time.
0.066667 - Before concluding, we would like to discuss the benefits of our proposal.
0.089286 - The study put forward in this article begins by a examining previous studies in this field and analyzing the uses of pre-existing ITS within VLE.
0.089347 - We then went onto show that the Hal system is the most successful, and underlined the elements which could be improved.
0.089347 - Indeed, in this system, the pedagogical model depends partly on the exercise, and the errors and pedagogical strategies must be defined.
0.027397 - Furthermore, the instructor can only choose between two pedagogical methods (active or explanatory).
0.126086 - We believe that it is possible to resolve the pedagogical model’s problems of genericity and modularity.
0.038835 - Without re-examining every element of our work, we can show how our proposal could solve some of the difficulties of existing models.
0.083333 - The knowledge used for pedagogical reasoning does not depend on the specifics of the task to be performed.
0.062662 - Therefore pedagogical rules do not and indeed do not need to consider specific information, (“if the learner can see aeroplane 2 then…”), but will rather use general knowledge independently of the exercise (“if the resources of the correct actions are visible, then…”).
0.068966 - In much the same way, although the pedagogical assistance proposes tangible solutions to the instructor (”make the fireman flicker”), generic knowledge is also manipulated independently of the exercise (”make the characters involved in the following actions flicker”).
0.051020 - Thus, the genericity of our proposal is one of its strongest characteristics, as illustrated by the inclusion of our ITS at the heart of numerous applications: the learning of collaborative procedures on aircraft carriers (Gaspar) (Marion et al., 2007) and for firemen intervening in Seveso areas (Se´cuRe´Vi) (Querrec, Buche, Maffre, & Chevaillier, 2004).
0.023474 - In addition, the pedagogical model of our ITS has strong modularity, as it offers the option of adding, deleting or modifying each of its components that participates in pedagogical decision making (rules or sets of rules).
0.135715 - Moreover, the artificial learning mechanism adapts the proposed pedagogical assistance to the learner-instructor pair.
0.038095 - Therefore, our proposition offers solutions to the problems raised in our introduction.
0.093521 - Finally, it must be emphasized that Pegase is directly based on the learner-instructor relationship.
0.061162 - However, we must not forget that there will undoubtedly be limitations linked to the use of our ITS in the context of non-procedural learning.
0.055096 - To be able to deal with this kind of training, we would have to rethink the elements which are so strongly linked to the notion of procedure, i.e.
0.068027 - knowledge of the pedagogical situation.
0.000000 - 1 Tel.
0.000000 - : +33 298058966; fax: +33 298058979.
0.184787 - 2 Pegase: PEdagocial Generic and Adaptable SystEm.
0.041667 - 3 UML metamodel class which generalizes the concept of class.

[Frase 1] This research is situated within the context of the creation of human learning environments using virtual reality.
[Frase 15] In this paper, we propose an independent VE tutoring system, called Pegase,2 in the domain of procedural and collaborative work.
[Frase 34] Within the context of our VE, we consider an ITS as a system which is part of the human Virtual Learning Environment (VLE).
