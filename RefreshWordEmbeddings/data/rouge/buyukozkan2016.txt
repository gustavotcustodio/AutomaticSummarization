Lexicographic bottleneck mixed-model assembly line balancing problem is studied. Artificial bee colony and tabu search algorithms are proposed. Parameters of the proposed algorithms are optimised using response surface method. Test problems are solved to assess the performance of the proposed methods. It is observed that both algorithms provide promising results in reasonable times.

0.107011 - The lexicographic bottleneck assembly line balancing problem is a recently introduced problem which aims at obtaining a smooth workload distribution among workstations.
0.036036 - This is achieved hierarchically.
0.069433 - The workload of the most heavily loaded workstation is minimised, followed by the workload of the second most heavily loaded workstation and so on.
0.102715 - This study contributes to knowledge by examining the application of the lexicographic bottleneck objective on mixed-model lines, where more than one product model is produced in an inter-mixed sequence.
0.197899 - The main characteristics of the lexicographic bottleneck mixed-model assembly line balancing problem are described with numerical examples.
0.102543 - Another contribution of the study is the methodology used to deal with the complex structure of the problem.
0.158744 - Two effective meta-heuristic approaches, namely artificial bee colony and tabu search, are proposed.
0.138297 - The parameters of the proposed meta-heuristics are optimised using response surface methodology, which is a well-known design of experiments technique, as a unique contribution to the expert and intelligent systems literature.
0.081565 - Different from the common tendency in the literature (which aims to optimise one parameter at a time), all parameters are optimised simultaneously.
0.075753 - Therefore, it is shown how a complex production planning problem can be solved using sophisticated artificial intelligence techniques with optimised parameters.
0.064815 - The methodology used for parameter setting can be applied to other metaheuristics for solving complex problems in practice.
0.214022 - The performances of both algorithms are assessed using well-known test problems and it is observed that both algorithms find promising solutions.
0.117962 - Artificial bee colony algorithm outperforms tabu search in minimising the number of workstations while tabu search shows a better performance in minimising the value of lexicographic bottleneck objective function.
0.062722 - Six decades have passed since the idea of balancing assembly lines has been introduced by Bryton (1954).
0.030651 - This idea was described systematically and formulated mathematically by Salveson (1955) and has received a great deal of attention from both academia and industry.
0.067758 - With the change of the global market, product diversity has become one of the key parameters in attracting customers.
0.021164 - Mass customisation has been adopted by companies as a flexible manufacturing tool to meet diversified customer demands in a timely manner (Goh & Zhang, 2003; Kucukkoc & Zhang, 2014).
0.060226 - In this context, companies converted existing single-model lines into mixed-model lines to enable producing more than one product model on the same line where set-up times between model changes are small enough (Zhang & Kucukkoc, 2013).
0.047337 - Thus, similar product models could be produced on the same line, avoiding the cost of utilising a new line for each product model.
0.072686 - Battaïa and Dolgui (2013) presented a taxonomy of line balancing problems and their solution approaches, recently.
0.092294 - In its traditional and simplest form, which is called simple assembly line balancing problem, the assembly line balancing problem is assigning tasks into a serially linked set of workstations by ensuring that capacity constraints and precedence relationship constraints are satisfied.
0.071225 - The tasks belonging to a single commodity (or product model) are performed on the line and a decision is made to determine which task will be accommodated in which workstation (Kucukkoc & Zhang, 2013; Kucukkoc & Zhang, 2015a).
0.056053 - Obtaining a smooth workload distribution among the workstations is very important to have a well-balanced and reliable assembly line which has strengths against unforeseeable circumstances such as breakdowns and other tolerable small extra works that can be performed while the line is running.
0.053601 - For this aim, Pastor (2011) and Pastor, Chueca, and García-Villoria (2012) proposed new approaches to systematically distribute the total workload among the workstations utilised across the line.
0.089158 - Also, they showed the advantage of the lexicographic bottleneck objective function (Buyukozkan, Kucukkoc, & Zhang, 2014).
0.125680 - The main aim of this paper is to experiment the lexicographic bottleneck objective on mixed-model assembly line balancing problem and to address the lexicographic bottleneck mixed-model assembly line balancing problem.
0.140031 - Two powerful solution approaches, namely artificial bee colony and tabu search, are also developed to solve the addressed problem efficiently.
0.200087 - The parameters of the proposed algorithms are optimised using a robust methodology that can be applied to other metaheuristics.
0.109257 - The remainder of the paper is organised as follows.
0.128544 - Section 2 provides a comprehensive review of the literature on mixed-model assembly line balancing problem as well as the applications of proposed techniques on various line balancing configurations.
0.143510 - Section 3 describes the main characteristics of the lexicographic bottleneck mixed-model assembly line balancing problem and briefly presents its differences from the existing problems.
0.124639 - Section 4 presents the artificial bee colony and tabu search algorithms developed to solve the addressed problem and gives numerical examples to describe their solution procedures stepwise.
0.078223 - Section 5 explains the response surface methodology (called RSM hereafter) used for parameter setting, and reports the experimental test results.
0.099554 - After a brief discussion on the strengths and weaknesses of the proposed research method in Section 6, Section 7 draws conclusions along with the future research directions.
0.085090 - The mixed-model assembly line balancing problem, which aims at finding an optimal assignment of tasks belonging to more than one product model produced on the same line, has been introduced by Thomopoulos (1967, 1970).
0.123000 - Since then, the mixed-model assembly line balancing problem has attracted a vast number of researchers from both academia and industry.
0.044693 - Minimising the number of workstations, which could also help reduce cost, has been considered as an ultimate goal in the majority of studies, e.g.
0.005464 - Simaria and Vilarinho (2009), Kara and Tekin (2009), Ozcan and Toklu (2009), Xu and Xiao (2011), Yagmahan (2011), Akpinar and Bayhan (2011), Hamzadayi and Yildiz (2012), Rabbani, Moghaddam, and Manavizadeh (2012), Chutima and Chimklai (2012), Liao et al.
0.013468 - (2012), Akpinar, Bayhan, and Baykasoglu (2013), Kucukkoc et al.
0.012821 - (2013), Manavizadeh, Hosseini, Rabbani, and Jolai (2013), Kucukkoc et al.
0.015873 - (2013) and Kucukkoc and Zhang (2014b).
0.080859 - This problem is called type-1, as the number of workstations is minimised for a predefined cycle time value.
0.090129 - Minimising cycle time for the given number of workstations is another type of line balancing problem, called type-2.
0.030651 - This problem has been studied by Simaria and Vilarinho (2004), Battini, Faccio, Ferrari, Persona, and Sgarbossa (2007) and Ozcan, Kellegoz, and Toklu (2011) recently.
0.049844 - Some studies considered both objectives (the minimisation of cycle time and the number of workstations) at the same time, such as Manavizadeh, Rabbani, Moshtaghi, and Jolai (2012) and Kucukkoc and Zhang (2015b).
0.000000 - Manavizadeh et al.
0.088235 - (2012) proposed a multi-objective genetic algorithm based approach to optimise both the number of workstations and the cycle time (called type-E) in a stochastic make-to-order environment.
0.105102 - Kucukkoc and Zhang (2015a) addressed the type-E problem on parallel two-sided assembly lines and proposed an ant colony optimisation algorithm where the parameters of ant colony optimisation algorithm are calibrated through RSM, which is a well-known design of experiment method proposed by Box and Wilson (1951).
0.045908 - Workload smoothness is an important criterion which also needs to be taken into account: (i) to maintain an even workload distribution among workstations and so workers, (ii) to improve the quality of product(s) assembled on the line, and (iii) to reduce the risk of incomplete tasks exceeding the cycle time due to some unforeseeable circumstances.
0.014599 - This criterion has been taken into account as an additional performance measure in many researches, such as Simaria and Vilarinho (2009), Ozcan and Toklu (2009), Ozcan, Cercioglu, Gokcen, and Toklu (2010), Akpinar and Bayhan (2011), Yagmahan (2011), Hamzadayi and Yildiz (2012), Liao et al.
0.014184 - (2012), Chutima and Chimklai (2012), Manavizadeh et al.
0.016878 - (2013) and Kucukkoc et al.
0.000000 - (2013).
0.104723 - In terms of the applied solution techniques, there is an increasing interest in the applications of population (or swarm intelligence) based and neighbourhood search based optimisation algorithms on a variety of line balancing problems.
0.012821 - Specifically, Simaria and Vilarinho (2009), Yagmahan (2011), Kucukkoc et al.
0.023981 - (2013) and Kucukkoc and Zhang (2014a, 2014b) developed different ant colony optimisation based approaches; Ozcan et al.
0.009950 - (2011), Xu and Xiao (2011), Akpinar and Bayhan (2011), Hamzadayi and Yildiz (2012), Rabbani et al.
0.000000 - (2012), Manavizadeh et al.
0.016878 - (2012) and Kucukkoc et al.
0.128082 - (2013) developed different genetic algorithm based techniques and Chutima and Chimklai (2012) proposed a particle swarm optimisation approach for the solution of mixed-model assembly line balancing problem.
0.127228 - However, the applications of bee colony optimisation (D. Karaboga, 2005) and bees algorithm (Pham et al., 2006) are quite scarce in the entire line balancing domain.
0.167479 - Akpinar and Baykasoğlu (2014) applied the bee colony algorithm for solving the mixed-model assembly line balancing problem.
0.097861 - Özbakir and Tapkan (2011) and Tapkan, Ozbakir, and Baykasoglu (2012a, 2012b) used bee colony intelligence and bees algorithms, respectively, to solve zone constrained two-sided assembly line balancing problem.
0.103817 - Lapierre, Ruiz, and Soriano (2006) applied tabu search algorithm for solving the simple assembly line balancing problem (with the aim of minimising the number of workstations) and non-standard versions of this problem coming from real life.
0.120607 - Computational tests showed that the proposed tabu search method had advantages over existing priority based procedures.
0.121489 - Özcan & Toklu (2008) presented a tabu search algorithm for two-sided assembly line balancing problem, where workstations are located on both sides (left and right) of a straight line.
0.160648 - The performance of the proposed method was compared to the existing methods and it was observed that the proposed method performed well.
0.085136 - Ozcan, Cercioglu, Gokcen, and Toklu (2009) used the tabu search to balance the parallel lines, where resources between two adjacent lines are shared, with the aim of maximising line efficiency.
0.112493 - The proposed method was illustrated through a numerical example and its performance was tested through existing test problems.
0.057611 - Özcan, Gökçen, and Toklu (2010) introduced the parallel two-sided assembly line configuration, which is referred to as advantageous for producing large-sized items (such as buses and trucks) and developed a tabu search based approach.
0.096253 - Two numerical examples were given and computational tests were performed to explain the solution building mechanism of the algorithm and to prove its performance.
0.094653 - Esmaeilian, Sulaiman, Ismail, Hamedi, and Ahmad (2011) presented a tabu search approach, which incorporates a heuristic procedure to provide an initial solution, for solving the parallel assembly line balancing problem in a mixed-model production environment.
0.111327 - The computational experiments showed that the proposed approach produces promising solutions.
0.096780 - The lexicographic bottleneck objective has been recently introduced for assembly line balancing domain.
0.086348 - Pastor (2011) presented and formalised the lexicographic bottleneck assembly line balancing problem; which aims at hierarchically minimising the workload of the most heavily loaded workstation, followed by the workload of the second most heavily loaded workstation and so on.
0.094527 - Two mixed-integer linear programming models and three heuristic procedures were proposed for solving the problem.
0.050933 - Pastor (2011) have proven that the lexicographic bottleneck objective has advantages over traditional smoothness index objectives to obtain a more smoothly distributed workload across the workstations.
0.014981 - In their latter study, Pastor et al.
0.082840 - (2012) proposed and tested new algorithms, which were different combinations of a heuristic procedure and several local search procedures derived from the literature.
0.044818 - The computational experiments showed that the heuristic procedure developed by Pastor et al.
0.031558 - (2012) was an improvement upon the heuristic procedures (three heuristic procedures based on two mixed-integer linear programming models) published by Pastor (2011).
0.100551 - The lexicographic bottleneck assembly line balancing problem, which is different from type-2 line balancing problem as it was exposed by Pastor et al.
0.078945 - (2012), has not been studied properly for mixed-model lines in the literature.
0.158255 - Based on this motivation, we apply the lexicographic bottleneck objective on mixed-model assembly line balancing problem and propose new solution techniques, namely an artificial bee colony algorithm and a tabu search algorithm, for the possible solution of the addressed problem.
0.160006 - This paper is original in terms of both the addressed problem and the proposed solution methods.
0.090113 - This paper addresses the lexicographic bottleneck mixed-model assembly line balancing problem, whose primitive version was introduced by Pastor (2011) for the simple assembly line balancing problem, by building work on Kucukkoc, Buyukozkan, Satoglu, and Zhang (2015).
0.166331 - In addition to the developed artificial bee colony algorithm, the tabu search algorithm is applied for any type of lexicographic bottleneck assembly line balancing problem for the first time in the literature.
0.130823 - Also, the parameters of both proposed techniques are optimised using RSM as a pioneering research in expert and intelligent systems domain.
0.118537 - Therefore, this paper contributes to knowledge by not only addressing a newly introduced assembly line balancing problem type but also developing novel artificial bee colony and tabu search algorithms (with optimised parameters through RSM) for solving this problem.
0.075472 - The workload time of a workstation is constituted by the summation of processing times of all tasks assigned to that workstation.
0.101185 - In traditional type-2 assembly line balancing problems, the workload of the most heavily loaded workstation is minimised as it determines the cycle time of the entire production system in synchronised assembly lines.
0.121209 - As only the workload of the workstation which has the largest workload time is minimised, the remaining workload times are ignored in type-2 assembly line balancing problems.
0.000000 - However, as indicated by Pastor et al.
0.055896 - (2012) and Boysen, Fliedner, and Scholl (2007), there are some important factors that tightly depend on the workload distribution among all workstations: the reliability of the line, uniform (or equitable) distribution of the total workload among all operators, quality defects caused by stations with disproportionately large station times, etc.
0.088717 - Therefore, it is important to consider the second-largest workload, the third-largest workload, etc., as the criticalness of the workstations and the reliability of the line are tightly interrelated to each other.
0.060606 - The larger the difference between the total workload of a workstation and cycle time, the less critical becomes the workstation.
0.067890 - That means the reliability of the entire system could be increased by reducing the criticalness (Pastor, 2011).
0.038713 - Pastor (2011) have already proven with an example that the optimal solution based on the lexicographic bottleneck objective may be different from the optimal solution based on the ‘Smoothness Index’ objective, which was considered as an additional objective in many researchers.
0.108854 - Although this situation has been proven for only the simple assembly line balancing problem, it is highly possible to observe the same situation for mixed-model assembly lines, as well.
0.105565 - The main aim of the problem addressed in this research, which is called lexicographic bottleneck mixed-model assembly line balancing problem, is to hierarchically minimise the weighted-workload of the most heavily loaded workstation, followed by the weighted-workload of the second most heavily loaded workstation and so on.
0.044776 - More details on how to calculate the weighted-workload of a workstation will be specified below.
0.074456 - Let us consider the graph given in Fig 1 as the combined precedence relationships diagram of three models (m1, m2, and m3), where a model is symbolised with mj , assembled on a mixed-model assembly line.
0.071279 - Table 1 presents the processing times (ptji) of tasks, where a task is represented by tji, belonging to the product models.
0.044776 - Demands (Dj) are considered 16, 24 and 8 for models m1, m2, and m3, respectively and .
0.074074 - The task processing times given in this table are taken from Simaria (2006) except that of task-10.
0.068376 - As cycle time (CT) is assumed 12.5 time units, in such an environment where parallel workstations or feeding lines are not allowed, the processing times of all tasks must be smaller than the cycle time.
0.062092 - For that reason, the processing time of task-10 is assumed 8.6 time units rather than its original value of 13.6 time units, which exceeds the cycle time.
0.000000 - Fig 1.
0.062884 - Combined precedence relationships diagram of the instance, adapted from Gökçen and Erel (1998).
0.000000 - Table 1.
0.097518 - Task processing times of the models for the given instance.
0.039809 - Task no./Model m1 m2 m3 1 8.3 8.6 8.3 2 0.0 2.0 2.0 3 9.6 9.6 9.6 4 1.8 1.8 1.8 5 2.4 2.4 2.5 6 2.3 2.3 2.3 7 2.3 2.3 2.5 8 4.7 4.7 4.7 9 0.0 9.0 9.0 10 8.6 8.6 8.6 11 1.0 1.0 1.0 The two possible line balancing assignments of the example problem are given in Table 2 where upper bound of CT is set to 12.5 time units.
0.051948 - The table presents the task assignments to the workstations, symbolised with , and the workloads of workstations based on these assignments.
0.089826 - Each workstation's workload time for individual models and also the total weighted-workloads (WW) of the workstations are calculated and presented in the table.
0.000000 - Table 2.
0.072611 - Two alternative assignment solutions of the given instance.
0.001723 - Alternative assignment 1 Alternative assignment 2 Station Assigned tasks Workloads (time units) Weighted-workload (WW) Station Assigned tasks Workloads (time units) Weighted-workload (WW) m1 m2 m3 m1 m2 m3 1 1,2,4 10.10 12.40 12.10 11.58 1 1,4 10.10 10.40 10.10 10.25 2 3,5 12.00 12.00 12.10 12.02 2 2,3 9.60 11.60 11.60 10.93 3 6,8 7.00 7.00 7.00 7.00 3 5,6,8 9.40 9.40 9.50 9.42 4 9,7 2.30 11.30 11.50 8.33 4 7,9 2.30 11.30 11.50 8.33 5 10,11 9.60 9.60 9.60 9.60 5 10,11 9.60 9.60 9.60 9.60 Fig 2.
0.000000 - Workload distributions among workstations: (a) Solution-1, (b) Solution-2.
0.052846 - The weighted-workload (WW) of a workstation corresponds to the sum of weighted processing times of all tasks assigned to this workstation.
0.065217 - The weighted processing time of a task is obtained by summing the multiplications of processing times belonging to different models by proportional demands of these models.
0.065634 - Also, proportional demand of a model corresponds to division of this model's demand by the total demand of the models produced on the same line .
0.043165 - Thus, the weighted-workload of station k, represented by WWk, could be calculated as in Eq (1).
0.067019 - (1) where Sk denotes the set of tasks assigned to workstation k. Dj and ptji are demand for model mj and processing time of task tji, respectively.
0.067114 - As seen from Table 2, five workstations are needed to perform a total of 11 tasks for both situations.
0.074627 - However, there are differences in the workloads and weighted-workload columns of these two alternative solutions.
0.035088 - Fig 2 comparatively depicts the workload distributions among workstations for both solutions.
0.032258 - Apparently, the second solution has a more uniform workload distribution than the first solution.
0.046901 - It should be noted here that there could be more fluctuation in the distribution of workloads between workstations if there were tens of tasks (not five) to be assigned.
0.059701 - However, even this small-sized numerical example shows the dependency of workload times to model types.
0.069106 - For example, the workload of workstation 4 equals to 2.30 time units when model 1 is being operated in this workstation.
0.039801 - However, this will change when model 2 and model 3 will be assembled in workstation 4.
0.061856 - Specifically, the workload will dramatically increase from 2.30 time units to 11.30 and 11.50 time units when model 2 and model 3 are assembled, respectively.
0.025840 - On one hand, huge idle times will occur when producing model 1 in workstation 4.
0.046296 - On the other hand, the workstation will be loaded almost full when producing model 2 and model 3.
0.087446 - This clearly shows the importance of having a smooth workload across workstations on mixed-model assembly lines.
0.050420 - Fig 3 exhibits the weighted-workload of each workstation for both alternative solutions.
0.035354 - As seen from the figure, distributing the weighted-workload among five workstations as 11.58, 12.02, 7.00, 8.33 and 9.60 is not equivalent to distributing it as 10.25, 10.93, 9.42, 8.33 and 9.60.
0.076295 - Although both solutions are obtained under the same upper bound for the cycle time , the second solution has less critical workstations and it is more reliable.
0.000000 - Fig 3.
0.040404 - Weighted-workload of each workstation for both alternative solutions.
0.126252 - Following assumptions are made for the solution of the lexicographic bottleneck mixed-model assembly line balancing problem: • Two or more models of a product are assembled on a paced (synchronous) mixed-model assembly line.
0.052632 - • Model demands are deterministic and known for a pre-defined planning horizon.
0.082687 - • Task processing times are deterministic and known for each product model produced on the line.
0.037037 - When a specific task is not necessary for a certain model, then its processing time is considered zero.
0.046448 - • A common (or joint) precedence diagram, which satisfies all precedence relationships between tasks belonging to different product models, is used in order to maximise the resource utilisation by assigning common tasks between similar models to the same workstation.
0.022409 - • Each task for each product model must be assigned to exactly one workstation.
0.000000 - Tasks cannot be split into two or more workstations.
0.029851 - • A task can only be assigned if all of its predecessors have been assigned and completed.
0.056277 - • Operators are multi-skilled and any task can be performed at any workstation with no change in its processing time.
0.053763 - • Parallel workstations and buffers between workstations (or work in progress inventory) are not allowed.
0.056738 - • Setup operations are not required between model changes.
0.067511 - • Operator travel times are ignored.
0.220843 - This section presents the artificial bee colony and tabu search algorithms proposed for solving the lexicographic bottleneck assembly line balancing problem.
0.113361 - Both artificial bee colony and tabu search approaches have been recognised as powerful and flexible optimisation algorithms, which have the capability of robustly solving global optimisation problems with linear and nonlinear objective functions.
0.086715 - As shown by Karaboga and Akay (2009) through a set of comprehensive experimental tests, artificial bee colony is better than or similar to those of other population-based algorithms with the advantage of employing fewer control parameters.
0.082434 - It is flexible and has strengths in both local and global searches.
0.042813 - This reduces the possibility of being trapped at a local optimum.
0.091804 - In comparison with evolutionary algorithms, the fast convergence feature of artificial bee colony algorithm – which can be considered an advantage in a timely manner – may result in premature convergence as a possible disadvantage of the algorithm.
0.065837 - Different from most metaheuristics, including tabu search, the basic artificial bee colony approach employs multiple random starting points for initialisation.
0.051282 - This attribute helps to explore the search space more effectively.
0.029795 - On the other hand, as emphasised by Glover and Marti (2006) a bad strategic choice may often yield better results than a good random choice.
0.059420 - Therefore, by taking the advantage of keeping search history, this strategic choice builds a base point for the progressive improvement of tabu search.
0.126245 - Both tabu search and artificial bee colony algorithms can be easily implemented for a wide range of optimisation problems.
0.090504 - Although some promising areas of the search space may be missed when only one solution is used and the algorithm is purely progressed from its neighbourhood solutions, tabu search still produces promising results as will be shown in the following subsections.
0.119942 - Tabu search needs relatively less number of parameters in comparison with most of the metaheuristics, including ant colony, genetic and artificial bee colony algorithms.
0.101354 - However, as in the majority of other metaheuristics, both algorithms need parameter tuning.
0.049217 - For this reason, a novel RSM based parameter optimisation approach is adopted, as will be explained in Section 5.
0.116975 - Artificial bee colony algorithm Artificial bee colony algorithm, which is proposed by Karaboga (2005), is a swarm intelligence method.
0.079511 - It was inspired from the foraging behaviour of bees in nature.
0.026936 - In social life, foraging begins with random food search.
0.090129 - The scout bees find new food sources in their neighbourhood and perform waggle-dance in front of the hive.
0.051357 - This dance movement gives information about (i) the distance from the food source to the hive, (ii) the nectar quality of the source and (iii) the nectar quantity of the source.
0.062350 - The onlooker bees in the hive watch this dance movement and choose the scout bees to follow.
0.047962 - When an onlooker bee follows a scout bee, it starts foraging and is called a follower bee.
0.046512 - Each bee, which collects food, performs waggle-dance to give information about the food source.
0.082996 - By this way, the bees meet the food need of the hive.
0.041667 - When a food source is exhausted, this source is abandoned and scout bees continue to seek new sources.
0.104283 - When the behaviour of bees is adapted to an optimisation problem, each bee represents a solution and the algorithm starts with randomly generated initial solutions.
0.097275 - These solutions are considered as scout bees and the algorithm continues with the neighbourhood search with the help of the follower bees around these solutions.
0.198988 - The general structure of the proposed artificial bee colony algorithm is presented in Fig 4.
0.000000 - Fig 4.
0.213294 - Flow chart of the proposed artificial bee colony algorithm.
0.090646 - The parameters of the algorithm (namely, the number of scout bees (S), the number of follower bees (F), the maximum number of iterations (MaxIter), life time (LF), cycle time (CT) and hierarchy parameter (β)) are initialised.
0.073394 - Afterwards, S number of solutions are generated considering the precedence relationships.
0.062640 - While generating these solutions, the tasks are sequenced in random orders ensuring that the precedence relations are not violated.
0.067039 - The workstations are formed by splitting the ordered tasks into groups (which is equivalent to allocating the tasks into the workstations) considering the CT value.
0.107998 - Hence, it is ensured that the initial solutions (scout bees) are produced very quickly.
0.069106 - Each scout bee is assigned an LF value, which corresponds to the maximum number of trials that can be passed without improvement.
0.084577 - F number of follower bees are directed to each scout bee for the neighbourhood search mechanism.
0.119850 - The neighbourhoods are searched using insert method.
0.014184 - In doing so, two random numbers, i.e.
0.067039 - r1 and r2, are generated and the task located at r1th position is relocated to r2th position by checking the precedence relationships to ensure feasibility.
0.046901 - If this move is considered to violate the precedence relationships, a new point (r2), which satisfies the precedence relationships is determined and the task is allocated to this position.
0.086285 - After completing neighbourhood searches for all followers in such a way, the performance values (δ) of scout bees and their followers are calculated using Eq (2), which is modified from Pastor (2011).
0.046784 - This is equivalent to using Eq (3) when comparing two different solutions.
0.098259 - By this way, it is endeavoured to hierarchically minimise the weighted-workload of the most heavily loaded workstation.
0.060606 - (2) (3) where Δkj is the positive, null, or negative workload difference in terms of model mj in the kth most heavily loaded workstation between the worst and best solutions compared.
0.111327 - CTbest is the best cycle time of the two solutions compared.
0.088613 - β is a parameter whose value must guarantee the hierarchy of the objectives and dj is the proportional demand of model mj, .
0.025641 - Please refer to Pastor (2011) for more details about β parameter.
0.073526 - The best performance value among the followers is compared with the performance value of its scout bee and the scout bee is replaced with that follower if the follower is better.
0.094692 - If not, LF value of the scout bee is decreased by one.
0.049751 - When the LF value gets zero, scout bee is replaced with a randomly generated feasible solution.
0.080227 - The global best solution is updated if any of the scout bees has a better performance value than the global best.
0.058166 - The same procedures are carried out for all scout bees and this cycle continues until all iterations are completed.
0.039801 - Note that better performance values could be obtained with solutions which require larger numbers of workstations.
0.067183 - However, in practice, designs which require fewer number of workstations are preferred by line managers.
0.074766 - For that reason, when two solutions which require different numbers of workstations are subject to comparison, the solution which requires the fewer number of workstations is favoured regardless of its performance value.
0.105280 - For a better understanding of the steps of the algorithm, a numerical example is given below.
0.069652 - The precedence relationships and task processing times are given in Fig 1 and Table 1, respectively.
0.082397 - The parameters considered are as follows: , , , , and .
0.038462 - Table 3 shows the initial solutions (scout bees) generated randomly.
0.057692 - Let us consider the first scout bee in Table 3.
0.056022 - Three follower bees generated from this scout bee are given in Table 4.
0.059701 - The follower bees search neighbourhood solutions around the scout bee using the randomly determined two numbers.
0.079602 - It could be seen that the random numbers are 2 and 5 for the first follower ( ).
0.057554 - So the job located in the 2nd position is relocated to the 5th position for this follower.
0.058166 - The random numbers for the second and the third followers are 3 and 9, and 7 and 5, respectively.
0.130342 - The performance values of the followers are also given in Table 4.
0.093611 - To calculate the performance value of a solution, the tasks are assigned to the workstations as in the same order they are sequenced by bees and Eq (2) is used for calculation.
0.000000 - Table 3.
0.079365 - Initial solutions generated by the algorithm.
0.011396 - # Sequence of tasks Workstations 1 2 3 4 5 6 1 1 2 3 4 8 9 5 10 6 7 11 Assignments 1,2 3,4 8 9,5 10,6 7,11 Weighted stat.
0.000000 - workloads 9.783 11.400 4.700 8.417 10.900 3.333 2 1 2 4 3 5 6 7 8 9 10 11 Assignments 1,2,4 3,5 6,7,8 9 10,11 – Weighted stat.
0.000000 - workloads 11.583 12.017 9.333 6.000 9.600 – 3 1 2 3 4 8 5 6 9 10 7 11 Assignments 1,2 3,4 8,5,6 9 10,7,11 – Weighted stat.
0.000000 - workloads 9.783 11.400 9.417 6.000 11.933 – 4 1 4 5 6 8 3 9 2 10 7 11 Assignments 1,4 5,6,8 3 9,2 10,7,11 – Weighted stat.
0.000000 - workloads 10.250 9.417 9.600 7.333 11.933 – 5 1 4 8 5 6 2 9 3 7 10 11 Assignments 1,4 8,5,6 2,9 3,7 10,11 – Weighted stat.
0.000000 - workloads 10.250 9.417 7.333 11.933 9.600 – Table 4.
0.097383 - Followers of the first scout bee.
0.015336 - Task sequence Weighted-workload times (WW) Performance value (δ) 1 2 3 4 5 6 Scout Bee 1 2 3 4 8 9 5 10 6 7 11 9.78 11.40 4.70 8.42 10.90 3.33 92.080 Follower-1 1 3 4 8 2 9 5 10 6 7 11 8.45 11.40 6.03 8.42 10.90 3.33 91.999 Follower-2 1 2 4 8 9 5 10 6 3 7 11 11.58 4.70 8.42 10.90 11.93 1.00 96.376 Follower-3 1 2 3 4 5 8 9 10 6 7 11 9.78 11.40 7.12 6.00 10.90 3.33 92.000 The overall survival of this scout bee through 25 iterations is presented in Table 5.
0.067061 - As could be seen from the table, the scout bee is regenerated randomly in the tenth and twentieth iterations to avoid local minima.
0.079392 - Better solutions are sought by local search procedures within the neighbourhoods of all scout bees at different locations of the global search space.
0.060606 - Fig 5 presents the movements of five scout bees.
0.058166 - As seen, these five scouts find solutions with different performance values, which prove the algorithm's effective search capability.
0.000000 - Table 5.
0.082321 - Survival of the first scout bee through 25 iterations.
0.001121 - Iteration Task sequence Iteration Task sequence Scout Bee 1 2 3 4 8 9 5 10 6 7 11 Iteration 13 1 8 2 3 9 10 4 5 6 7 11 Iteration-1 1 3 4 8 9 5 2 10 6 7 11 Iteration-14 1 8 2 3 9 10 4 5 6 7 11 Iteration-2 1 4 8 9 5 2 3 10 6 7 11 Iteration-15 1 8 2 3 9 4 5 6 7 10 11 Iteration-3 1 4 8 9 5 3 10 2 6 7 11 Iteration-16 1 8 2 3 9 4 5 6 7 10 11 Iteration-4 1 8 4 9 5 3 10 2 6 7 11 Iteration-17 1 8 2 3 9 4 5 6 7 10 11 Iteration-5 1 8 4 9 3 10 2 5 6 7 11 Iteration-18 1 8 2 3 9 4 5 6 7 10 11 Iteration-6 1 8 4 9 3 10 2 5 6 7 11 Iteration-19 1 8 2 3 9 4 5 6 7 10 11 Iteration-7 1 8 4 9 3 10 2 5 6 7 11 Iteration-20 1 8 4 2 5 9 3 10 6 7 11 Iteration-8 1 8 4 9 3 10 2 5 6 7 11 Iteration-21 1 8 4 2 9 5 3 10 6 7 11 Iteration-9 1 8 4 9 3 10 2 5 6 7 11 Iteration-22 1 8 4 2 9 5 3 6 7 10 11 Iteration-10 1 2 8 3 4 9 10 5 6 7 11 Iteration-23 1 8 4 2 5 3 6 7 9 10 11 Iteration-11 1 2 8 3 9 10 4 5 6 7 11 Iteration-24 1 4 8 2 5 3 6 7 9 10 11 Iteration-12 1 8 3 9 2 10 4 5 6 7 11 Iteration-25 1 4 8 2 5 3 6 7 9 10 11 The convergence of the artificial bee colony algorithm for solving the given instance is also depicted in Fig 5 (please see the ‘Solution’ curve).
0.052493 - As could be seen from the figure, the algorithm finds the best solution in only three iterations consuming a CPU time of 0.1976 s. Please note that the solution curve does not follow the minimum values for all iterations.
0.063116 - This is why scouts find solutions with larger number of workstations, which yield lower performance values (see the shaded area in the figure).
0.089431 - However, such solutions are discarded by the algorithm as the solutions with fewer number of workstations are favourable in real world implementations.
0.084824 - The task assignments, the weighted-workload times, the number of workstations and the performance value (calculated using Eq (2)) of the best balancing solution are given in Table 6 along with the CPU time consumed.
0.080645 - Five workstations are needed to perform 11 tasks under the predefined cycle time constraint.
0.000000 - Table 6.
0.115991 - Best balancing solution obtained using artificial bee colony algorithm.
0.010616 - Task assignment Number of Stations Performance value CPU (s) Workstations Station-1 Station-2 Station-3 Station-4 Station-5 5 82.87 0.1976 Assigned tasks 1,4 5,6,2,8 3 9,7 10,11 Weighted-workloads 10.25 10.75 9.60 8.33 9.60 Fig 5.
0.113256 - The movements of the scout bees.
0.000000 - Table 7.
0.115164 - Tabu tables employed by the tabu search algorithm.
0.012821 - (a) Tabu table-1 (b) Tabu table-2 Task no.
0.000000 - Position Position Position 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 11 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 5 0 3 0 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 11 0 0 0 0 0 0 0 0 0 0 0 Table 8.
0.129569 - The best balancing solution obtained by the tabu search algorithm.
0.010616 - Task assignment Number of Stations Performance value CPU (s) Workstations Station-1 Station-2 Station-3 Station-4 Station-5 5 82.77 0.0175 Assigned tasks 1,4 3 8,2,5 9,6 7,10,11 Weighted-workloads 10.25 9.60 8.45 8.30 11.93 4.2.
0.073264 - Tabu search algorithm Tabu search, defined and developed primarily by Glover (1989, 1990), is a neighbourhood search algorithm which uses effective local search procedures.
0.056437 - It uses some taboos in neighbourhood search process to escape local optimality and has been used widely for solving complex combinatorial optimisation problems (Özcan et al., 2010).
0.043537 - Please refer to Glover and Laguna (1993, 1997) and Gendreau (2003) for more details on tabu search.
0.137988 - With motivation from successful applications of tabu search in assembly line balancing domain, a tabu search algorithm is also developed in this research as well as the artificial bee colony algorithm proposed.
0.115480 - The steps of tabu search procedure proposed in this research are explained below through a numerical example.
0.000000 - Step 1.
0.089636 - The algorithm starts by determining the algorithmic parameters and initialising the tabu lists.
0.071588 - The tabu size and the maximum number of iterations are determined as 10 and 300, respectively, for this example.
0.000000 - Step 2.
0.096593 - An initial solution is generated randomly using the same procedure to produce scout bees for artificial bee colony algorithm in the previous subsection (please see Section 4.1).
0.043668 - To give an example, let us assume that the initial solution has the same task sequence (1-2-3-4-8-9-5-10-6-7-11) given in the first row of Table 3.
0.000000 - Step 3.
0.033755 - A neighbourhood solution is generated.
0.084691 - To do this, as in artificial bee colony algorithm, two random numbers (r1 and r2) are generated and a new neighbourhood solution is built by moving the task located at r1thth position to r2thth position.
0.012232 - For example, let r1 and r2 be 2 and 5, respectively.
0.032520 - Then, the new neighbourhood solution will have the task sequence of 1-3-4-8-2-9-5-10-6-7-11.
0.000000 - Step 4.
0.093157 - The feasibility of newly generated neighbourhood solution is ensured by checking the precedence relationships matrix of the problem as well as the tabu tables used by the algorithm.
0.156776 - The proposed tabu search algorithm incorporates two tabu tables, which are given in Table 7.
0.061856 - The first table, given in Table 7a, is used to hold the number of iteration values during which the tasks cannot be moved to the same position again.
0.034632 - The second table, given in Table 7b, forbids moving the tasks into their previous locations until a predefined iteration number.
0.000000 - Step 5.
0.063116 - If the newly generated neighbourhood solution is not feasible, new random values are determined for r1 and r2 until the feasibility is maintained.
0.055556 - An unfeasible solution becomes feasible upon the sequence of tasks in this solution satisfy the precedence relationships matrix.
0.000000 - Step 6.
0.095238 - The values in the tabu tables are updated based on the move performed.
0.056277 - In our example, the neighbourhood solution is built by moving the task placed in the second position to fifth position.
0.080537 - • In tabu table-1, the value of cell corresponding to the second row of fifth column is updated as .
0.040410 - The cell that will be updated is determined based on the task's number (in our case it is task 2 as it is located at the second position in the task sequence) and its new location (it is five as the task is relocated to fifth position in the task sequence).
0.045177 - Thus, it is not allowed to move task 2 into fifth position again until iteration 11.
0.071942 - • In tabu table-2, the value of cell on fifth row and second column is updated as .
0.069790 - By this way, it is prohibited to relocate task 2 in its previous position in the next iteration.
0.080808 - Thus, the algorithm avoids getting stuck in local optima.
0.040404 - Table 7 depicts the tabu tables after these operations.
0.000000 - Step 7.
0.100030 - The current solution and the new neighbourhood solution are compared to each other based on their performance values, which are computed as in the artificial bee colony algorithm.
0.034632 - If the neighbourhood solution has a better performance value than the current solution, the neighbourhood solution replaces the current solution.
0.000000 - Step 8.
0.064516 - This cycle continues until the maximum iteration number and the best solution is taken.
0.099095 - Table 8 shows the best solution found by tabu search algorithm.
0.117212 - As can be seen from the table, a total of five workstations are required to perform 11 tasks, which is the same as the artificial bee colony algorithm.
0.096073 - However, tabu search finds a better configuration of tasks, which has a slightly better performance value (82.77) than the performance value of the solution (82.87) obtained by the artificial bee colony algorithm.
0.150328 - Test data Twenty test problems, whose main characteristics are given in Table 9, are taken from Vilarinho and Simaria (2002) and solved using the proposed artificial bee colony algorithm and tabu search algorithm.
0.084577 - Information regarding the precedence diagrams used for the problem set is shown in the second column.
0.083585 - Tj and CT columns denote the number of tasks of the combined precedence diagram and the cycle time of the assembly line, respectively.
0.074906 - Models demands are given in Dj column.
0.103060 - The minimum, maximum and average processing times of tasks for the considered test problems are also presented in columns ptmin, ptmax and ptavg.
0.000000 - Table 9.
0.018018 - Data for computational tests.
0.004927 - # Test problem Tj CT mj Dj ptmin ptmax ptavg 1 Bowman 8 10 A 20 1.8 7.8 3.73 B 28 1.8 7.9 3.57 2 Bowman 8 10 A 16 0 10 3.54 B 24 0 7 4.40 C 8 0 10 5.87 3 Gökçen and Erel (1998) 11 10 A 20 1.9 8.8 4.97 B 28 0 8.7 3.37 4 Gökçen and Erel (1998) 11 12.5 A 16 0 9.6 3.56 B 24 1 9.6 4.59 C 8 1 9.6 4.59 5 Mitchel 21 10 A 20 0 9.6 5.29 B 28 0 9.6 4.46 6 Mitchel 21 10 A 16 0 7.5 4.06 B 24 0 7.5 4.19 C 8 0 10 4.68 7 Simaria and Vilarinho 25 10 A 20 0 9.6 4.74 B 28 0 9.4 4.35 8 Simaria and Vilarinho 25 10 A 16 0 9.9 4.37 B 24 1 10 4.85 C 8 1 10 4.87 9 Heskiaoff 28 10 A 20 0 10 5.46 B 28 0 10 5.75 10 Heskiaoff 28 10 A 16 0 10 5.39 B 24 0 10 5.53 C 8 0 10 5.78 11 Sawyer 30 10 A 20 0 9.9 4.49 B 28 0 9.9 4.46 12 Sawyer 30 10 A 16 0 9.9 4.65 B 24 0 9.9 4.40 C 8 0 9.9 4.79 13 Lutz1 32 10 A 20 0 9.5 3.85 B 28 0 10 4.21 14 Lutz1 32 10 A 16 0 9.7 4.60 B 24 0 9.5 4.40 C 8 0 9.7 4.61 15 Gunther 35 10 A 20 0 8.2 4.97 B 28 0 9 4.88 16 Gunther 35 10 A 16 0 8.7 4.66 B 24 0 8.7 4.84 C 8 0 8.8 4.90 17 Kilbridge and Wester 45 10 A 20 0 10 4.63 B 28 0 10 4.53 18 Kilbridge and Wester 45 10 A 16 0 9.3 4.64 B 24 0 9.3 4.61 C 8 0 9.3 4.24 19 Tonge 70 10 A 20 0 9.9 4.85 B 28 0 10 4.99 20 Tonge 70 10 A 16 0 9.7 5.02 B 24 0 9.7 5.02 C 8 0 9.6 5.03 Please note that if the processing time of a task belonging to any product model exceeds the cycle time, processing times of that task are divided into two for all product models.
0.081129 - The reason for this modification is that parallel workstations are not allowed in the current work, different from the original study belonging to Vilarinho and Simaria (2002).
0.106258 - Parameter setting The proposed artificial bee colony algorithm and tabu search algorithm have been coded in C# environment and run on a workstation with the specifications of Intel Xeon CPU E5-2643 3.30 GHz (2 processors) with 128 GB RAM.
0.118139 - The parameters of the algorithm were determined through a well-known design of experiments method, response surface methodology (RSM) to get high quality solutions (where for all test problems).
0.068381 - RSM is a combination of statistical and mathematical techniques and has been used extensively to examine and characterise problems and/or processes in which the input variables (called factors) influence the outputs (called response) of the process (Bicakci, Akdas, & Deniz Karaoglan, 2014).
0.079710 - It was proposed by Box and Wilson (1951) to determine the best combination of input parameters that minimise the output of a real non-simulated system.
0.072797 - The main advantage of RSM is its capability to provide process optimisation by simultaneous testing of numerous factors in a limited number of experiments.
0.055556 - This consumes less time and effort in comparison to experimenting all possible combinations of parameters one-by-one.
0.082377 - Another advantage of RSM is that RSM provides a mathematical relation between the inputs and outputs of the system, including the interactions between the factors.
0.057175 - Eq (4) shows the general second-order polynomial response surface model (full quadratic model) used for the experimental design (Demirtas & Karaoglan, 2012).
0.069584 - (4) where Yu is the corresponding response; β0, βi, βii and βij represent the regression coefficients; Xiu and Xju are coded values of the ith and jth input parameters (i < j) respectively, and eu is the residual experimental error of the uth observation.
0.000000 - Table 11.
0.061162 - Design of experiments matrix showing un-coded values and observed responses.
0.000000 - Experiment no.
0.002979 - Run order Factors (un-coded values) Responses (average) S F Maxiter LF Number of Stations LB Fitness 1 1 5 5 50 10 22.90 95.96 2 2 35 5 50 10 22.20 96.95 3 3 5 25 50 10 22.40 95.93 4 4 35 25 50 10 21.90 95.95 5 5 5 5 300 10 22.30 97.14 6 6 35 5 300 10 22.00 95.04 7 7 5 25 300 10 22.10 94.94 8 8 35 25 300 10 22.00 94.86 9 9 5 5 50 40 23.20 95.05 10 10 35 5 50 40 22.50 95.83 11 11 5 25 50 40 23.20 93.42 12 12 35 25 50 40 22.10 96.26 13 13 5 5 300 40 22.80 94.42 14 14 35 5 300 40 21.80 96.66 15 15 5 25 300 40 22.30 95.46 16 16 35 25 300 40 22.00 94.94 17 17 5 15 175 25 22.40 95.64 18 18 35 15 175 25 21.90 95.55 19 19 20 5 175 25 22.10 96.14 20 20 20 25 175 25 21.90 96.07 21 21 20 15 50 25 22.30 95.35 22 22 20 15 300 25 22.00 94.94 23 23 20 15 175 10 21.90 95.65 24 24 20 15 175 40 22.10 95.94 25 25 20 15 175 25 22.00 95.34 26 26 20 15 175 25 22.10 95.84 27 27 20 15 175 25 22.10 94.94 28 28 20 15 175 25 22.10 95.64 29 29 20 15 175 25 22.00 95.05 30 30 20 15 175 25 22.00 94.94 31 31 20 15 175 25 22.00 95.86 The model in terms of the observations may be written in matrix notation as ɛ , where X and Y represent input and output matrices, respectively; and ɛ is the matrix of residuals (error term) (Montgomery, 2001).
0.062011 - The least square estimator of β matrix that is composed of coefficients of the regression equation is calculated as (Kucukkoc, Karaoglan, et al., 2013; Yalcinkaya & Bayhan, 2009).
0.077519 - The fitted regression models with the fitness value coefficients are formulated in the next section.
0.104944 - Optimisation of artificial bee colony algorithm parameters Experiments have been conducted on a randomly selected large-sized test problem (#15) given in Section 5.1.
0.130156 - The factor levels of artificial bee colony parameters for the experiments are listed in Table 10.
0.000000 - Table 10.
0.129676 - Levels and values of parameters belonging to artificial bee colony algorithm.
0.048566 - Parameter Symbol Level −1 0 1 The number of scout bees S 5 20 35 The number of follower bees F 5 15 25 The maximum number of iterations Maxiter 50 175 300 Life time LF 10 25 40 Table 11 shows the experimental design, detailing the experiment run order and un-coded values of the algorithm parameters.
0.092421 - To have a more consistent analysis, the artificial bee colony algorithm was run for 5 times with the designated factor levels for each experiment.
0.110548 - The average values of the responses (Number of Stations and LB Fitness, where LB means lexicographic bottleneck) are reported in Table 11.
0.055556 - A commercial statistical software package (Minitab-17) was used to find the coefficients matrix and establish the mathematical models for predicting the responses (namely, Number of Stations and LB Fitness).
0.072165 - The regression equations, which depict the RSM based mathematical models representing the relations between the responses and the factors based on the results observed, are given in Eqs.
0.029963 - (5) and (6) in un-coded units.
0.013468 - Please see Fig A1 (in Appendices) for residual plots.
0.063796 - (5) (6) The parameter optimisation was performed with the aim of minimising Number of Stations and LB Fitness values, where the importance of responses were set to 2 and 1, respectively.
0.101192 - The optimal un-coded process parameter setting of artificial bee colony algorithm was found as , , and with a composite desirability of .
0.085106 - The optimisation plot is given in Fig 6.
0.000000 - Fig 6.
0.168712 - Optimisation results for the parameters of artificial bee colony algorithm.
0.119832 - Optimisation of the tabu search algorithm parameters The optimised parameters of tabu search algorithm were the number of iterations (Maxiter) and tabu size.
0.106631 - Experiments have been conducted on the same test problem (#15) used for optimising artificial bee colony parameters.
0.081913 - Table 12 presents the factor levels for Maxiter and tabu size while Table 13 provides experimental design, detailing the experiment run order and un-coded values of the algorithm parameters, as well as observed responses.
0.000000 - Table 12.
0.129569 - Levels and values of parameters belonging to tabu search algorithm.
0.080509 - Parameter Symbol Level −1 0 1 The maximum number of iterations Maxiter 100 550 1000 Tabu size Tabu size 10 20 30 As in the previous subsection, the tabu search algorithm was run for 5 times for each experiment using the designated factor values and the average values of the observed responses are reported.
0.077052 - The regression equations, which depict the RSM based mathematical models that represent the relations between the responses and the factors based on the observed results, are given in Eqs.
0.029963 - (7) and (8) in un-coded units.
0.013468 - Please see Fig A2 (in Appendices) for residual plots.
0.063492 - (7) (8) A multi-objective optimisation analysis was performed to minimise the Number of Stations and LB Fitness value based on the developed mathematical formulation in Eqs.
0.019324 - (7) and (8).
0.044693 - The Minitab-17 software was utilised for multi-objective optimisation with the weights of 2 and 1 for Number of Stations and LB Fitness, respectively.
0.054726 - The optimum parameter setting was obtained as and with a composite desirability of (see Fig 7).
0.000000 - Fig 7.
0.080438 - Optimisation results for tabu search parameters.
0.138006 - Experimental test results This section presents the experimental tests, which were conducted using the optimised values of the algorithm parameters for each solution method, namely artificial bee colony algorithm and tabu search algorithm.
0.103805 - The decimals obtained from the RSM for the artificial bee colony and tabu search parameters have been rounded to the nearest integer value.
0.131456 - Thus, optimum parameters were considered as , , and for artificial bee colony algorithm and and for tabu search algorithm and the test problems have been solved.
0.000000 - Table 13.
0.061162 - Design of experiments matrix showing un-coded values and observed responses.
0.000000 - Experiment no.
0.022586 - Run order Factors (un-coded units) Responses (average) Maxiter Tabu size Number of Stations LB Fitness 1 1 100 10 23.40 97.74 2 2 1000 10 23.00 94.71 3 3 100 30 23.80 94.72 4 4 1000 30 23.00 94.10 5 5 100 20 24.00 94.18 6 6 1000 20 22.80 97.36 7 7 550 10 24.20 89.74 8 8 550 30 23.80 89.50 9 9 550 20 23.00 94.52 10 10 550 20 23.00 93.90 11 11 550 20 23.00 95.52 12 12 550 20 22.60 94.52 13 13 550 20 23.40 94.49 As mentioned earlier, a tabu search algorithm, as well as artificial bee colony algorithm, was also developed to provide a comprehensive experimental study.
0.163327 - Table 14 reports the best results obtained for each test problem using artificial bee colony and tabu search algorithms.
0.082840 - The columns K and IT provide the total number of workstations and the iteration number in which the best solution is found, respectively.
0.112855 - Furthermore, the CPU time consumed to solve the relevant test problem by each algorithm is presented in the CPU column.
0.105385 - The overall performance measures (δ) of the best solutions are also provided in Table 14 to provide comparable results for future studies.
0.000000 - Table 14.
0.038647 - Computational test results.
0.010944 - Problem # Artificial bee colony Tabu search K δ IT CPU K δ IT CPU 1 4 79.34 1 39.92 4 79.34 17 0.01 2 8 78.87 1 45.83 8 78.87 32 0.01 3 7 87.85 1 44.21 7 87.85 50 0.01 4 5 81.86 1 44.45 5 81.86 118 0.00 5 13 97.98 4 45.86 13 97.98 232 0.01 6 13 82.52 5 53.09 13 84.32 49 0.01 7 15 94.89 38 53.09 16 94.89 258 0.01 8 14 99.98 8 62.89 15 99.88 353 0.01 9 19 100.99 30 52.80 20 101.00 171 0.01 10 19 101.00 92 57.62 19 101.00 106 0.01 11 16 99.96 39 65.11 17 99.96 487 0.01 12 18 99.98 62 47.92 18 99.98 153 0.02 13 17 95.94 8 48.15 17 95.94 496 0.02 14 18 97.46 7 47.53 18 97.46 89 0.02 15 22 94.94 9 47.24 23 93.91 281 0.02 16 21 90.41 24 47.27 22 87.88 487 0.02 17 25 97.71 79 47.22 25 97.65 483 0.02 18 26 97.92 96 46.80 27 93.93 400 0.02 19 45 99.97 66 56.36 44 99.97 476 0.03 20 44 96.97 80 74.51 46 96.96 413 0.04 As can be seen from Table 14, artificial bee colony algorithm found solutions with fewer numbers of workstations for test problems 7–9, 11, 15, 16, 18 and 20.
0.112822 - That is why tabu search algorithm found solutions with lower δ values for the same instances, except test problem 9.
0.119942 - In this particular case, artificial bee colony algorithm outperformed tabu search in terms of the number of workstations value as well as the δ value.
0.099525 - In only one test problem (test problem 19), tabu search obtained a solution with one lower workstation than the one found by artificial bee colony algorithm (where δ values were the same).
0.113216 - For test problems 7 and 11, the solution gathered by artificial bee colony algorithm requires one lower workstation than the one gathered by tabu search (while δ values were the same for both methods).
0.161086 - It can be said that the artificial bee colony algorithm provided more promising results in comparison with tabu search in terms of the number of workstations.
0.065078 - On the other hand, tabu search performed better in obtaining smoother workload distributions with better δ values.
0.105385 - Therefore, it can be concluded that neither of the algorithms outperformed the other one in terms of the sought performance measures.
0.092243 - The weighted-workloads of workstations for the solutions obtained are given in descending order in the Appendices section for both methods.
0.073593 - As seen from the table, the weighted-workloads of workstations are quite close to each other in both solution strategies.
0.069444 - Please note that the difference between the weighted-workloads of workstations is a bit higher in some solutions.
0.049751 - This situation occurs if there are tasks, which require zero processing time for some product models.
0.052910 - Another reason could be the processing times of tasks, which exceed the cycle time were divided into “two” to make the dataset suitable for the experimental study.
0.085977 - Therefore, the compatibility of the total workload of the test problems for predefined cycle times may have been impaired.
0.167665 - The methodology used in this research adopted an RSM based parameter optimisation strategy for the proposed artificial bee colony and tabu search algorithms.
0.188203 - The variants of both artificial bee colony and tabu search algorithms have been applied successfully in solving many assembly line balancing problems in the literature.
0.080645 - However, as known, there is no algorithm, which works perfectly for all optimisation problems.
0.000000 - Table A1.
0.182616 - The weighted-workloads of workstations when the problems are solved using artificial bee colony algorithm.
0.055046 - # The weighted-workloads of workstations in descending order 1 7.858
0.111812 - The proposed RSM based parameter optimisation technique aims to overcome this issue and determine the best combinations of different parameter values for both algorithms.
0.082201 - As it concurrently determines all input parameters (or factors) of the system for an optimised output (or response), RSM is more economical than conventional experimental or optimisation methods in which one input parameter at a time is optimised.
0.047619 - Also, the regression equation produced by the RSM represents the effects for binary combinations of input parameters on the output.
0.061856 - Furthermore, in comparison to other design of experiments techniques (including Taguchi), RSM has the strength of providing optimised parameter values between the parameter levels determined by the user.
0.140332 - One could argue that the artificial bee colony and tabu search parameters could be optimised for each test problem individually.
0.071910 - However, due to the page limit, the parameters have been optimised for a large-sized test problem (i.e.
0.086493 - #15) and the same parameter sets have been used for solving all test problems.
0.061594 - The truth lying behind this idea was that the parameters used for solving the large-sized problems will have the ability to solve smaller sized ones.
0.098122 - Although this may yield extra computational time in terms of solving the small and medium-sized test problems, the CPU times reported together with the experimental results are quite desirable due to the efficient and compact structure of the developed algorithms.
0.000000 - Table A2.
0.179306 - The weighted-workloads of workstations when the problems are solved using tabu search algorithm.
0.055046 - # The weighted-workloads of workstations in descending order 1 7.858
0.086959 - Different from existing traditional mostly studied types of line balancing problems in the literature, a new type of problem, called lexicographic bottleneck assembly line balancing problem, has been defined for the simple (straight) assembly line configuration, recently.
0.101110 - Moving from that base point, the lexicographic bottleneck assembly line balancing problem has been handled in a mixed-model production environment, which is a more flexible but complicated version of the simple assembly line balancing system tackled in the former study.
0.177394 - One of the major contributions of this paper is addressing the lexicographic bottleneck mixed-model assembly line balancing problem.
0.043478 - The weighted-workloads of workstations have been minimised hierarchically starting from the most heavily loaded workstation, followed by the second heavily loaded workstation and so on.
0.061625 - Illustrative examples were given to describe the problem and explore its main characteristics.
0.137624 - The artificial bee colony and tabu search algorithms developed for efficiently solving the problem by dealing with the variations in processing times of tasks among different product models are of major contributions of this research.
0.123560 - The solution procedures of the algorithms were depicted using numerical examples.
0.148439 - Furthermore, RSM has been applied to systematically optimise the parameters of the proposed algorithms for the first time in the literature.
0.124007 - In accordance with the experimental test results, artificial bee colony algorithm found slightly better solutions than tabu search in terms of the number of workstations.
0.116595 - However, tabu search performed better in obtaining smoother workload distributions in terms of the lexicographic bottleneck objective.
0.117484 - It was observed that CPU times consumed by the algorithms were quite reasonable especially for the large-sized test problems.
0.130612 - The lexicographic bottleneck model has a wide range of application area in the assembly line balancing domain.
0.116223 - Therefore, the proposed lexicographic bottleneck model can be applied to other types of line configurations, e.g.
0.013468 - two-sided lines, U-shaped lines, parallel lines, etc.
0.019324 - in future studies.
0.115877 - New solution methods can also be developed and their performances can be compared to the performances of the algorithms developed in the current work.
0.054013 - Developing robust models considering dynamic model demands in a lexicographic bottleneck environment may also be of interest for researchers.
0.000000 - Appendices Table A1, Table A2, Fig A1, Fig A2.
0.000000 - Fig A1.
0.086795 - Residual plots for artificial bee colony parameter optimisation.
0.000000 - Fig A2.
0.068364 - Residual plots for tabu search parameter optimisation.
0.000000 - 1 Tel.
0.000000 - : +904623772954.
0.000000 - 2 Tel.
0.000000 - : +902122856801.
0.000000 - 3 Tel.
0.000000 - : +441392723641.

[Frase 84] Based on this motivation, we apply the lexicographic bottleneck objective on mixed-model assembly line balancing problem and propose new solution techniques, namely an artificial bee colony algorithm and a tabu search algorithm, for the possible solution of the addressed problem.
[Frase 400] The artificial bee colony and tabu search algorithms developed for efficiently solving the problem by dealing with the variations in processing times of tasks among different product models are of major contributions of this research.
[Frase 378] The variants of both artificial bee colony and tabu search algorithms have been applied successfully in solving many assembly line balancing problems in the literature.
[Frase 100] The main aim of the problem addressed in this research, which is called lexicographic bottleneck mixed-model assembly line balancing problem, is to hierarchically minimise the weighted-workload of the most heavily loaded workstation, followed by the weighted-workload of the second most heavily loaded workstation and so on.
