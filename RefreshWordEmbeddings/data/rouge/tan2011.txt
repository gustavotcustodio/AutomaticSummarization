Reinforcement learning is used to formalize an automated process for determining stock cycles by tuningthe momentum and the average periods. The secondary and tertiary trends or short-term wave cycles are eliminated by a smoothing technique. The use of reinforcement learning (RL) as a non-arbitrage algorithmic trading system. Our study attempts to identify the change of a primary trend or a broad movement. Dynamic asset switching based on the detection of peaks and troughs within a portfolio of stock counters.

0.178536 - Based on the principles of technical analysis, this paper proposes an artificial intelligence model, which employs the Adaptive Network Fuzzy Inference System (ANFIS) supplemented by the use of reinforcement learning (RL) as a non-arbitrage algorithmic trading system.
0.166392 - The novel intelligent trading system is capable of identifying a change in a primary trend for trading and investment decisions.
0.098995 - It dynamically determines the periods for momentum and moving averages using the RL paradigm and also appropriately shifting the cycle using ANFIS-RL to address the delay in the predicted cycle.
0.129440 - This is used as a proxy to determine the best point in time to go LONG and visa versa for SHORT.
0.125228 - When this is coupled with a group of stocks, we derive a simple form of “riding the cycles – waves”.
0.111959 - These are the derived features of the underlying stock movement.
0.105820 - It provides a learning framework to trade on cycles.
0.012579 - Initial experimental results are encouraging.
0.109162 - Firstly, the proposed framework is able to outperform DENFIS and RSPOP in terms of true error and correlation.
0.130318 - Secondly, based on the test trading with five US stocks, the proposed trading system is able to beat the market by about 50 percentage points over a period of 13 years.
0.070988 - Numerous market gurus such as G. Soros, W. Henry II, and L. Hite have accumulated huge fortunes through the judicious application of technical analysis and its concepts.
0.076355 - Despite the claims and refutes put forward by the proponents of the Efficient Market Hypothesis (Fama, 1970) and the Random Walk Hypothesis (Malkiel, 1973), technical analysis does have its place in the financial world of trading and investments.
0.177070 - The objective of this paper is to propose an artificial intelligence model; which employs the Adaptive Network Fuzzy Inference System (ANFIS) and supplemented by reinforcement learning, as a non-arbitrage algorithmic trading system.
0.110077 - Such a novel intelligent trading system is able to judiciously identify a change in a trend for investment decisions.
0.089669 - The origin of trend analysis can be attributed to the Dow Theory, named after its creator Charles Dow.
0.044150 - Many of today’s more sophisticated models are essentially variants of Dow’s approach.
0.095369 - The Dow Theory posits that there are three trends in stock prices; namely: • The primary trend is the long-term movement of prices, lasting from several months to several years.
0.128913 - • The secondary or intermediate trends are the short-term deviations of prices from the underlying trend.
0.128662 - These deviations are eliminated by corrections and prices revert back to the underlying trend.
0.110193 - • The tertiary or minor trends are daily fluctuations.
0.299262 - Our study attempts to identify the change of a primary trend or a broad movement.
0.116195 - In our study, a primary up trend, followed by a primary down trend and a primary up trend again would constitute a cycle.
0.302524 - The secondary and tertiary trends or short-term wave cycles are eliminated by a smoothing technique.
0.098822 - Artificial intelligent models based on neural networks, genetic algorithm and fuzzy neural techniques can learn to detect complex patterns inherent in the data.
0.055249 - Mathematically, these AI techniques are universal non-linear function approximators capable of capturing and modelling almost any input–output relationships.
0.000000 - Artificial intelligence models also have advantages over statistical models.
0.075758 - Relatively, they are more efficient and effective than statistical models in pattern recognition (cycles is a pattern) and prediction.
0.081871 - Unlike most of the statistical models, they do not require any specific distribution of data or underlying theory.
0.097731 - They are able to manage non-linear or complex relationships better and at the same time accommodate relatively larger number of variables.
0.090615 - Another advantage of artificial intelligence models is that they can learn patterns from the past data, a feature that cannot be matched by statistical models.
0.058201 - But not all artificial intelligence models are the same.
0.114472 - It is illustrated in this paper that, the Adaptive Network Fuzzy Inference System (ANFIS), when supplemented by the reinforcement learning paradigm, is a powerful and valuable tool in predicting stock cycles, and hence is a significant tool in stock investment decisions.
0.100529 - The rest of the paper is organized as follows.
0.052910 - A brief literature review is presented in Section 2.
0.165486 - Section 3 outlines the formalism for reinforcement learning as well as the processes of cycle determination and shifting in stock cycles.
0.117686 - Experimental results demonstrating the derivation of stock cycles based on GM stock are also analyzed in Section 3.
0.082437 - ANFIS-RL will be introduced to predict the next inflexion point together with a concise introduction to ANFIS in Section 4.
0.164711 - Section 5 presents the mathematical description of a maximum reward reinforcement learning based trading system using ANFIS-RL.
0.221556 - Extensive experiments were undertaken with dynamic asset switching based on the detection of peaks and troughs within a portfolio of stock counters and the results are presented in Section 5.
0.057471 - A conclusion is presented in Section 6.
0.103330 - Numerous literature employ trends to decide on the timing to trade.
0.058480 - Research by Lee, Liu, and Chen (2006) and Kamijo and Tanigawa (1990) capitalised on candlestick patterns to trade.
0.000000 - Lee et al.
0.092961 - (2006) employed a knowledge based method by representing candlestick patterns with fuzzy time series while Kamijo and Tanigawa (1990) employed a recurrent neural network to recognize the triangular pattern after a series of candlesticks.
0.053870 - Ang and Quek (2006), Tan, Quek, and Yow (2007) Cheng, Quek, and Mah (2007) employ novel neuro-fuzzy systems in their design of such trading systems.
0.055848 - Their trading system utilized technical indicators such as moving average crossover and Relative Strength Index.
0.091304 - On the other hand, Kuo, Chen, and Hwang (2001), Moral-Escudero, Ruiz-Torrubiano, and Suarez (2006) and Huang, Pasquier, and Quek (2009) made use of genetic algorithms (GA) and fuzzy logic in their design of the trading systems.
0.129344 - GA is used to determine the best set of trading rules or to address the combinatorial problem in asset allocation.
0.126779 - Moody and Saffell (2001) and Moody and Wu (300) proposed a trading system that made use of direct reinforcement learning to learn to trade a portfolio of assets and to optimize the portfolio by making use of the Sharpe ratio and the downside deviation.
0.064228 - There are also several research efforts devoted to stock selection, where Zargham and Sayeh (1999) used weighted fuzzy rules to select stocks based on some rule of thumb in investing and Fan and Palaniswami (2001) employed support vector machine to select stocks.
0.035330 - These trading systems generally have subjective rules or suffer from black box characteristic or involved in unnecessary trades.
0.091097 - One of the classic problems, optimal option pricing had been attempted by Tsitsiklis and Roy (1999).
0.087025 - Recent work by Quah and Quek (2005) and Quah, Quek, and Leedham (2005) proposes an actor-critic model that made use of Fuzzy Input Takagi–Sugeno–Kang (FITSK) (Quah & Quek, 2006) and maximum reward reinforcement learning to approximate the optimal stopping time, which achieved a superior performance to Tsitsiklis and Roy (1999) in terms of reward and input dimension.
0.049587 - There are several interesting studies on business cycles.
0.096674 - Gallegos (2004) utilises time series theory to identify market cycles in Sweden while Plummer (2005) adopts a different approach by using the price momentum in the decision process.
0.099653 - Generally, the values for the parameters are subjective and the cycles found are not well-defined.
0.074434 - Lucas, Dijk, and Kloek (2002) tried out several stock selection styles and found that the best performance are derived from investment using the business cycle.
0.094966 - Sarantis (2001) employed the STAR model (smooth transition autoregressive model) to investigate the cyclical properties for seven countries and Blackman (2004) investigated the possibility of investment based on business cycles in mutual funds.
0.078949 - However many of these research efforts do not provide much empirical evidence and the actual applicability.
0.113912 - In this section, reinforcement learning is applied to judiciously determine cycles.
0.093028 - These cycles are fed to the proposed framework in Section 4, as training data.
0.078414 - Cycles of stock prices are often periodic and coincidently reflect major events such as Gulf war and Great Depression (Plummer, 2005; Sarlan, 2001).
0.111111 - Some of the earliest studies were undertaken by Jugular and Kitchin and in these studies, cycles of different length are found.
0.106913 - A long cycle of 9–11 years was discovered by Jugular and on the other hand, a shorter cycle was found by Kitchin (1923), which is around 3–4 years.
0.098291 - In a recent study by Plummer (2005), a relationship between the cycles had been observed.
0.114790 - The observed relationship demonstrates that a long cycle is composed of three shorter cycles.
0.112450 - In the case for Jugular and Kitchin, the Jugular cycle is made up of three Kitchin cycles.
0.093575 - In this paper, in order to operate within a shorter investment period, the period of the cycle to be used in this paper is one-third of the Kitchin cycle, which is around 300 days or 1 year.
0.099545 - Mathematical definitions in reinforcement learning (RL) Reinforcement learning (RL) is a trial and error learning process, whereby the agent learns through its interaction with the environment, very much akin to a form of learning (in psychology) exhibited by human in discovering new knowledge through a system of reward and punishment based on the outcome of an action undertaken by the human (Skinner, 1953).
0.065097 - The agent does not have any idea as to what the actual correct action would achieve but it attempts to evaluate the different actions from the feedback provided by the environment.
0.106061 - The feedback in this case is a reward and does not quantify whether the action is correct or otherwise.
0.037879 - After several trials, the agent will have gained sufficient experience that it could exploit should it encounter similar situation.
0.119596 - In general, a reinforcement learning system consists of three main elements; namely: the policy, the reward function and the value function (Sutton, 1998).
0.093567 - The policy is the mapping from the state of the environment to the probabilities of deciding its action.
0.115942 - The state of the environment is a form of representation of the environment at that time.
0.080808 - It can be as simple as the actual representation of the environment or it can be some form of preprocessed data, which is able to represent the current environment better.
0.068273 - This mapping can be represented with using a lookup table or any other suitable forms of representation.
0.080279 - This lookup table with the expected rewards and actions is the experience of the agent and will be called upon during exploitation.
0.082816 - In this section, a brief introduction to the mathematical formulation in RL paradigm will be provided.
0.074074 - These formulations will be applied to all the RL applications in this paper for updating the experience during exploration and for generating the expected reward during exploitation.
0.071247 - The reward function is the expected reward for the agent.
0.089372 - The mathematical definition of the expected return in a state is described in Eq (3.1) (3.1) where k is the number of times action a is chosen and r1…k are the individual reward for each time.
0.056029 - Eq (3.1) can be modified as a recursive form, for easy updating and is stated in Eq (3.2) (3.2) The return function over the long run is usually defined as the accumulated reward over the future time steps.
0.052980 - It is defined in Eq (3.3) (3.3) where γ is the discount rate.
0.072289 - The discount rate, γ, determines the present value of the future rewards that can be achieved over time.
0.046595 - It can be interpreted as follows: • When the discount rate is high, the agent will take the future rewards more seriously.
0.049689 - • When the discount rate is small, the agent will only be concerned with the current reward.
0.112428 - With the Markov property, one is able to determine the probability of the next state based on only the current state and action.
0.058252 - This is formulated in Eq (3.4) (3.4) where st is the current state and at is the action taken in the current state.
0.097924 - With the current state, current action and the next state, one is able to compute the expected value of the next state.
0.061303 - This is formulated in Eq (3.5) (3.5) where E is the expectation function of the next reward, st is the current state, st+1 is the next state and at is the current action.
0.009804 - Eq (3.3) can then be updated as follows in Eqs.
0.070922 - (3.6) and (3.7) (3.6) where γ is the discount rate.
0.079254 - Under policy π, (3.7) where Eπ is the expectation function for the policy π, a is an action that belongs to the set of actions, is the probability from s to s′, and γ is the discount rate and is the future reward.
0.090909 - Given the current state and action taken, one can also formulate the action-value function in a recursive manner.
0.011494 - This is formulated in Eq (3.8).
0.078292 - Under policy π, (3.8) where Eπ is the expectation function for the policy π, s′ is a state that belongs to the set of states, is the probability from s to s′, γ is the discount rate and is the future reward.
0.051802 - An optimal policy will be the policy that has the highest state-value and is defined in Eq (3.9) (3.9) Likewise to represent an optimal state-value function, Eq (3.7) has to be updated as shown in Eq (3.10).
0.068627 - This is also known as the Bellman optimality equation for V∗.
0.074689 - Under optimal policy, (3.10) where γ is the discount rate, s′ is the next state, a is the action taken, is the probability from s to s′ and is the future reward.
0.102591 - Formulation of rewards and states in cycle finding This section discusses the formulation and the implementation of the tuning of the two parameters, momentum period and the moving average period using RL.
0.118687 - The momentum or the rate of change of the stock price represents the market sentiments on the trading of the stock.
0.112450 - As the rate of change decreases, it is assumed that the stock is overbought and vice versa.
0.148191 - The moving average, on the other hand, is used to remove the short-term trend and noise in the cycle.
0.091996 - The use of these two parameters promises well-defined cyclical patterns, if available.
0.086235 - Reward The cycles used in this paper, has a period from 260 days (1 year = 52 weeks) to 340 days (1/1/4 year).
0.093341 - These cycles are generated by tuning these two parameters; namely: momentum and moving average.
0.080941 - The detection of trough is mathematically formulated in Eq (3.12) using Eq (3.11) (3.11) where t is the current day and x ∈ {40, 80} (3.12) where t is the current day.
0.095382 - Similarly, the detection of peak is formulated in Eq (3.13) (3.13) where t is the current day.
0.111261 - Using Eq (3.12), the period of a cycle can be formulated as shown in Eq (3.14) (3.14) where x is the index of Period.
0.089466 - As such, the reward for the agent to determine a single cycle will be formulated as described in Eq (3.15) (3.15) where x is the index for Period.
0.052910 - However, Eq (3.15) is a biased reward function.
0.100402 - Consider the case, where the period is 300 days, the agent will receive a reward of 40.
0.070922 - This is unjustified as any period within the range should be acceptable.
0.073529 - To remove the bias, zero is included into Eq (3.15).
0.042328 - Eq (3.16) shows an updated equation and Figs.
0.036036 - (3.15) and (3.16) respectively.
0.075621 - By analyzing Fig 3.2, it can be observed that the same reward value is given to the agent for any cyclical period between 260 and 340 days (3.16) Thus, the reward for the agent using a particular set of parameters is described in Eq (3.17): (3.17) where N is the total number of cycles found, mom is the momentum period used and ma is the moving average period.
0.000000 - Biased reward function Fig 3.1.
0.000000 - Biased reward function.
0.000000 - Unbiased reward function Fig 3.2.
0.000000 - Unbiased reward function.
0.089744 - However, Eq (3.17) does not assure the agent of the number of cycles found.
0.068627 - Thus a better formulation is required and is described in Eqs.
0.061350 - (3.18) and (3.19) (3.18) where MinN is the minimum number of cycles and TotalDays is the number of days in the financial times series (3.19) where MaxN is the maximum number of cycles and TotalDays is the number of days in the financial times series.
0.000000 - Eqs.
0.136804 - (3.18) and (3.19) are used to determine the acceptable minimum and maximum number of cycles.
0.112245 - The reduction is needed to consider the case where there are non-cycles at the head and tail of the financial time series.
0.084457 - Thus, the final reward formulation can be mathematically described by Eq (3.20) (3.20) where N is the number of cycles found, mom is the momentum period used, ma is the moving average period used, MaxN and MinN are the maximum and minimum number of cycles.
0.116402 - States A state is a representation of the environment.
0.084847 - In this case, the environment is the stock data and to represent it efficiently, each stock is being quantified by the percentage standard deviation of the time series, see Eq (3.22) and the correlation to an index, see Eq (3.21).
0.097443 - As such, similar stocks are being grouped together and are presented as a state.
0.013201 - There are two benefits.
0.092369 - Firstly, the agent will be exploring (learning) more intelligently by averaging the past and new experience together.
0.045245 - Secondly, the exploitation will be more efficient as the state-reward table is smaller (3.21) where X is the financial time series of the stock data, Y is the time series of the Dow Jones Index and N is the number of data (3.22) where N is the number of stock data, xi is the closing price, is the mean of the stock price and round{ } is to round it to the nearest integer (3.23) Eq (3.23) shows the formulation of the state.
0.113117 - Flow of the algorithm The investor will attempt different combinations of the moving average period and the momentum period to achieve the respective reward.
0.055096 - It follows the flow in Fig 3.3.
0.159880 - Flowchart of the cycle tuning module as a reinforcement learning process Fig 3.3.
0.177638 - Flowchart of the cycle tuning module as a reinforcement learning process.
0.107843 - The state of the stock is computed using Eq (3.23).
0.077025 - If a past experience exists, generate a random number to decide whether the agent should exploit the experience by getting the highest reward in the state-reward or to explore (learn) the new experience.
0.152289 - To explore, the cycle data is computed with a set of parameters (moving average period and momentum period).
0.107126 - Using the cycle data as input for Eq (3.12), the trough is determined and is used to compute the reward using Eq (3.20).
0.073059 - The reward is then updated to the state table with Eq (3.2).
0.078675 - This exploration process will continue till all the possible combinations of the parameters have been attempted.
0.061069 - The parameters will be bounded from 60 to 260 days.
0.132804 - The minimum and maximum bounds are justified as our main concern is on the longer trend of the stock.
0.096692 - The tuning of parameters is undertaken in steps of 5.
0.034483 - Experiments on cycle finding 3.3.1.
0.072650 - Singapore market In the Singapore market, the macroscopic aspect of the market is evaluated first.
0.093567 - The indices of the various industries from the year 2000 to 2006 are used as the input data.
0.073298 - Fig 3.4 shows the cycle found for the hotel index and Fig 3.5 shows the cycles found for different industries.
0.028736 - Cycles for hotel industry Fig 3.4.
0.033003 - Cycles for hotel industry.
0.028736 - Cycles for various industries Fig 3.5.
0.033003 - Cycles for various industries.
0.073746 - The ‘Close’ in Fig 3.4 is the closing stock price/index value on that particular day and ‘Tuned’ is the cycle data identified in Section 3.2.3.
0.024024 - These parameters are used throughout Figs.
0.055249 - From Fig 3.5, it can be seen that the cycles for the different industries approximately coincides with one another.
0.049020 - However, some industries have leading cycles and others have lagging cycles.
0.074074 - In order to apply the proposed novel trading strategy, it was hoped that uncorrelated cycles could be identified.
0.064394 - As such, the most leading and lagging industries; namely the finance and hotel were selected in the microscopic analysis.
0.074316 - In each industry, two stocks from the year 2000 to 2006 were selected based on their market capitalization.
0.028369 - By doing so, it was hoped that uncorrelated cycles could be found.
0.027548 - Optimum cycles for Bear Sterns Fig 3.7.
0.031447 - Optimum cycles for Bear Sterns.
0.029412 - Cycles for Bear Sterns using sub-optimal parameters Fig 3.8.
0.033058 - Cycles for Bear Sterns using sub-optimal parameters.
0.028736 - Optimum cycles for Oracle Fig 3.9.
0.033003 - Optimum cycles for Oracle.
0.030534 - Cycles for Oracle using sub-optimal parameters Fig 3.10.
0.034483 - Cycles for Oracle using sub-optimal parameters.
0.047281 - Fig 3.6 shows the four companies selected from the two industries.
0.064516 - DBS and Kim Eng Securities are in the finance industry and Hotel Plaza and Hotel Negara are in the hotel industry.
0.085317 - By analyzing Fig 3.6, cycles that are completely out of sync can possibly be determined and a trader can capitalise on these cycles to buy Kim Eng Securities at the trough as indicated and sold it in the peak in year 2004 before switching to Hotel Plaza at the trough.
0.086758 - This observation demonstrates that the proposed trading strategy is plausible and highly applicable.
0.022989 - Perfect combination for trading Fig 3.6.
0.026403 - Perfect combination for trading.
0.107527 - US market In this experiment, the applicability and scalability of the algorithm were tested on 20+ stocks from the US market.
0.076923 - These stocks have at least 12 years of history from the year 1994 to 2006.
0.085104 - The system will utilize the data from the first 6 years to determine the parameter values and subsequently attempts to use these sub-optimal parameters for generating the cycle for the following 6 years.
0.090153 - These sub-optimal parameters and the cycles are then compared against the optimal parameters and the optimal cycle.
0.064725 - From the experimental results, it can be observed that there are some differences between the parameters found for the 6-year and 12-year period.
0.070640 - Most of them only differ from the optimal parameters by at most 10 days.
0.063927 - However, there are a few stocks that have significant difference in their parameters.
0.118721 - The analysis of two such stocks, Bear Sterns and Oracle, are shown below.
0.096195 - The sub-optimal parameters for Bear Sterns are 135 and 210 days for the momentum and moving average period respectively.
0.110533 - On the other hand, the optimal parameters are 220 and 130 days for the momentum and moving average period.
0.078431 - There is a difference of approximately 70 days for each parameter.
0.087696 - Fig 3.7 shows the cycle for Bear Sterns using the optimal parameters and Fig 3.8 shows the cycle for Bear Sterns that made use of the sub-optimal parameters.
0.095238 - Statistically, these cycles have a correlation coefficient of 0.9354 and graphically, significant inflexion points as indicated on both figures are similar to each other as indicated in the figures.
0.068627 - Another stock that has wide differences in the parameters is Oracle.
0.098941 - The sub-optimal parameters for Oracle are 155 and 230 days for the momentum and moving average period respectively.
0.110533 - On the other hand, the optimal parameters are 160 and 85 days for the momentum and moving average period.
0.110688 - There is a difference of at most 145 days in the moving average period.
0.091582 - Fig 3.9 shows the cycle for Oracle using the optimum parameters and Fig 3.10 shows the cycle for Oracle that made use of the sub-optimal parameters.
0.084656 - These cycles have a correlation coefficient of 0.7209.
0.045307 - From these analyses, it can be observed that generally the parameters found in the first 6 years, can be applied to the next 6 years.
0.071363 - But it will be advisable if the tuning can be done periodically for every 3–4 years to ensure that the cycles are well-defined.
0.133016 - Formulation of cycle shifting using reinforcement learning The goal for a potential investor is to determine the shift that can fit the tuned cycles to the actual price movements.
0.063191 - Therefore the reward for the agent will be the Pearson’s linear correlation coefficient that is computed using the shifted price movement with the tuned cycles.
0.076285 - The reward is mathematically formulated in Eq (3.24) (3.24) where X is the tuned cycle and Y is the actual price movement.
0.095238 - Fig 3.11 shows the flow of the algorithm.
0.096186 - Initially, the size of the entire tuned cycle will be found and this size will be the window size for the actual stock data.
0.085770 - The window will initially end at the last stock data and will gradually be shifted to the left.
0.108483 - On every shift, the reward (correlation) will be computed based on the window and the cycle.
0.079365 - Flow of the shift tuning algorithm Fig 3.11.
0.090090 - Flow of the shift tuning algorithm.
0.100766 - The amount of shift depends on the moving average period (Gallegos, 2004) and can be mathematically formulated in Eq (3.25).
0.108691 - As the agent steps through, this window will be shifted by a step size of 5 days.
0.053870 - After all iterations, the shift that achieves the highest correlation coefficient will be considered the optimal shift (3.25) where MAperiod is the moving average period.
0.102729 - Experiments on cycle shifting Experiments were performed on the same basket of stocks used in Section 3.3.2.
0.097130 - One of the stocks, General Motors, is being demonstrated and analyzed in this section.
0.071247 - Fig 3.12 shows the tuned cycles for General Motors.
0.108597 - The parameters ‘Close’ is the closing price of the stock on that day and ‘Not Shifted’ or ‘Shifted’ are the cycles before being shifted and after shifted respectively.
0.081448 - From the indications in the figure, it can be observed that the peak of the identified cycle lags the peak of the actual price by around 80 days.
0.052910 - Un-shifted cycle of General Motors Fig 3.12.
0.060060 - Un-shifted cycle of General Motors.
0.097756 - Fig 3.13 shows the cycle after the automatic shifting achieved through reinforcement learning.
0.137477 - The automated shifting algorithm manages to identify a shift of 65 days.
0.064725 - It can be observed that the cycle had been shifted nearer to the actual inflexion point, lagging from the actual inflexion by only 15 days.
0.067961 - Thus, it can be observed that the shifted cycle is able to better reflect the actual turning points fairly accurately as illustrated with the indicators.
0.055096 - Shifted cycle of General Motors Fig 3.13.
0.062893 - Shifted cycle of General Motors.
0.080739 - ANFIS-RL∗ is a framework that employs ANFIS as a function approximator.
0.128498 - This framework attempts to optimize the performance of ANFIS in terms of accuracy and correlation.
0.100501 - In this framework, three different forms of learning can be observed, from unsupervised learning of the data to supervised learning of the network and then finally to reinforcement learning of the different models.
0.078949 - The function approximator will subsequently be employed in Section 5 to identify inflexion points for trading.
0.110497 - ANFIS Artificial neural network is a network of artificial neurons that mimics the signaling and processing of the human brain.
0.088648 - They have very strong pattern recognition ability but suffer from the inherent problem of being a black box, as they are not able to explain the causal relationship between the inputs and the results (outputs).
0.090036 - On the other hand, fuzzy systems model human reasoning ability in an environment of uncertainty.
0.104068 - These systems employed the use of fuzzy IF-THEN rules that are similar to human reasoning.
0.045549 - These fuzzy logics are easy to comprehend and they tend to be tolerant to imprecise data.
0.093028 - There are two main models for fuzzy systems; namely: the Mamdani and the Sugeno.
0.061069 - Their difference lies in the way their outputs are interpreted.
0.074074 - Mamdani model generates a fuzzy logical system that has a highly interpretable consequent; while Sugeno model generates a consequent that is a crisp function of the inputs.
0.063927 - The latter is computationally more accurate but not as interpretable as the former.
0.018913 - Neuro-fuzzy systems are hybrid systems, integrating neural networks with fuzzy systems.
0.129338 - These systems do not suffer from the limitation of a black box and is able to perform in an environment of uncertainty.
0.030710 - Neuro-fuzzy systems such as Pseudo Outer-Product based Fuzzy Neural Network (POPFNN) (Quek & Zhou, 1999, 2006), eFSM (Tung & Quek, 2010) and SeroFNN (Javan & Quek, 2010) – are examples of Mamdani model, ANFIS (Jang, Sun, & Mizutani, 1997), MS-TSKFnn (Wang, Quek, & Ng, 2004), GA_TSKFnn (Tang, Quek, & Ng, 2005) and FITSK (Quah & Quek, 2006) – examples of Sugeno model are gaining recognition in several different areas such as finance, security and health care, as their performance and interpretability are superior to other systems such as radial basis function (RBF) networks.
0.056738 - The Adaptive Neuro-Fuzzy Inference System (ANFIS) implements the TSK fuzzy model.
0.081782 - The inference process based on the TSK fuzzy model is shown in Fig 4.1.
0.076336 - Inference process of the TSK fuzzy model Fig 4.1.
0.086207 - Inference process of the TSK fuzzy model.
0.083885 - The ANFIS network has a five-layered structure as illustrated in Fig 4.1.
0.107660 - For the ANFIS network, the inputs and outputs are not considered part of the network structure.
0.105960 - Moreover, the network structure is predetermined by the user prior to commence of training.
0.078431 - The training cycle of the ANFIS network thus tunes the parameters of the network (known as parameter learning) but do not modify the connectionist structure of the network.
0.070175 - In this introduction, the input nodes to the ANFIS network are denoted as Li, where i ∈ {1…n1}.
0.091324 - The label n1 refers to the number of inputs to the ANFIS network.
0.057971 - The vector X = [X1, … , Xi, … , Xn1]T denotes the numerical inputs presented to the ANFIS network.
0.081871 - The output is denoted as f. Here, only the multiple-inputs-and-single-output (MISO) system is considered.
0.060606 - This is because a multiple-inputs-and-multiple-outputs (MIMO) system can be readily decomposed into several MISO systems.
0.076285 - With reference to Fig 4.2, layer 1 essentially consists of the linguistic terms (fuzzy sets) of the input nodes to the ANFIS network.
0.095890 - The jth linguistic term of the ith input is denoted as ILi,j.
0.082192 - The label Ti denotes the number of linguistic terms that input Li has.
0.037825 - Each input node Li may have different number of linguistic terms Ti.
0.089947 - Hence, the number of nodes in layer 1 is .
0.075269 - Layer 2 of the ANFIS network is the fuzzy rule base that models the underlying characteristics of the numerical training data.
0.068627 - The rule nodes are denoted as Rk, where k ∈ {1…n3}.
0.017007 - There are n1 nodes (fuzzy terms) from layer 1 (one from each input variable) feeding into an arbitrary node Rk in layer 2.
0.088300 - The label n3 refers to the number of fuzzy rules in the ANFIS network.
0.091603 - Layer 3 is the normalization layer of the ANFIS network.
0.105023 - There is full connectivity between the nodes of layer 2 and layer 3.
0.097731 - The number of nodes in layer 3 (denoted as n4) is determined by the number of fuzzy rules in the ANFIS network.
0.013201 - That is, n4 = n3.
0.081633 - The functionality of each of the layer 3 nodes is to perform normalization of the firing strength of the fuzzy rule it represents.
0.082816 - Subsequently, the computation of the rule consequents is performed at layer 4 of the ANFIS network.
0.075758 - Since the ANFIS network adopts the TSK fuzzy model, the consequents of the rules are functions of the inputs.
0.020356 - These functions are denoted as Cm, where m ∈ {1…n5}.
0.115646 - The label n5 refers to the number of output functions in layer 4 and is again determined by the number of fuzzy rules.
0.000000 - Hence, n5 = n3.
0.081921 - Each output function Cm may be interpreted as Eq (4.1): (4.1) where Xi is the ith numerical input to the ANFIS network and is the set of real numbers.
0.071625 - Structure of the ANFIS network Fig 4.2.
0.081761 - Structure of the ANFIS network.
0.071934 - Since each rule would compute an inferred output (crisp for ANFIS) based on the input stimulus X = [X1, … , Xi, … , Xn1]T, the final network output is the aggregation of all the computed inferred outputs.
0.087571 - Hence, the function of the last ANFIS layer (layer 5) is to aggregate all the inferred outputs of the rules through summation and presents the computed value as the network output.
0.056180 - This output is denoted as f. During the training cycle of the ANFIS network, the numerical training data set S consisting of the desired input–output pairs (X(p), Y(p)) (where p ∈ {1…P} and P denotes the number of training instances) is fed into the ANFIS network from the input and output layers.
0.082337 - The parameters of the ANFIS network can be subsequently tuned either using the negative-gradient-descent-based back-propagation algorithm (Rumelhart, Hinton, & Williams, 1986) or the hybrid learning algorithm proposed by Jang et al.
0.000000 - (1997).
0.026403 - With reference to Figs.
0.092369 - Step 1 of the TSK inference is implicitly performed by the input nodes of the ANFIS network.
0.083333 - The input nodes functioned as singleton fuzzifiers to the inference process.
0.088398 - The function of layer 1 nodes of the ANFIS network is readily mapped to step 2 of the inference process.
0.089744 - The membership values of the numerical inputs with respect to the fuzzy sets are computed.
0.078231 - Layer 2 of the ANFIS network implements step 3 of the inference process where the firing strengths of the fuzzy rules are determined.
0.101222 - Step 4 of the TSK inference process is performed by the nodes in layer 3 and layer 4 of the ANFIS network.
0.041408 - Layer 3 nodes compute the normalized fuzzy rule strengths while layer 4 derives the inferred output.
0.083333 - Layer 5 of the ANFIS network subsequently aggregates the inferred outputs to derive the required crisp output as stated by step 5 of the TSK inference process.
0.096774 - ANFIS is a fuzzy inference system implemented in the framework of an adaptive network, where the membership parameters are automatically tuned.
0.078675 - The fuzzy inference system can be generated in two ways, either by clustering or non-clustering.
0.078853 - Clustering is a form of unsupervised learning, where unknown data is grouped into several clusters that are associated to different patterns.
0.084011 - Using this method to generate the fuzzy inference system is able to reduce the curse of dimensionality and can easily generate the fuzzy inference system without the need to specify the membership functions.
0.094787 - The tuning of the membership parameters will be done via supervised learning of the input–output pairs that are given to the system as training data.
0.098822 - This employs a hybrid learning algorithm that synergizes both the back propagation method and the least squares estimate to improve the learning performance.
0.080472 - Design and formulation In this paper, ANFIS is used as the function approximator to predict the gradient to the next inflexion point.
0.061069 - Initially, a fuzzy inference system is generated via subtractive clustering.
0.068783 - Subsequently, they undergo tuning through training of the network.
0.130522 - Reinforcement learning will be then be applied to determine the optimum input dimension and radius of influence by evaluating the network whereby the radius of influence is a parameter for subtractive clustering of the fuzzy inference system.
0.094017 - Over fitting is a problem where the network is trained and evaluated using similar data.
0.062827 - This is often due to limited data or due to situation when the validation data is coincidently similar to the training data.
0.070197 - In these cases, it is not uncommon to have 100% correct classification on the validation data, which is overly optimistic.
0.091097 - The model selected will be incorrect and may subsequently perform badly using out-of-sample data.
0.025641 - In this paper, K-fold cross validation will be extended and employed in this framework.
0.059701 - The past data will be split into K parts, with K − 1 parts as the training set and 1 part as the testing set.
0.009456 - This validation is then executed K times, trying out all different parts.
0.047506 - The advantage of this strategy is that all the past data have the chance to be trained and evaluated, giving the true error shown in Eq (4.3) of the model (4.2) where n is the number of outputs predicted, is the predicted output and yi is the expected output (4.3) where K is the number of folds and k is the index of each fold.
0.096566 - However the true error is often insufficient to gauge the performance of the model and, the correlation as shown in Eq (3.24), is often used to complement the RMSE for benchmarking of the performance.
0.061181 - In order to adopt this measure in K-fold cross validation, Eq (3.24) have to be updated to Eq (4.4) (4.4) where x is the model used, K is the number of folds used, y is the expected value and is the predicted value.
0.050228 - Thus, a performance measure employing these two measures is proposed in this study.
0.069808 - This is illustrated in Eq (4.5) (4.5) where x is the model used and MeanCorr is the mean correlation coefficient.
0.069510 - The tuning of the two parameters will be done simultaneously to determine the model that yields the highest reward which is expressed in Eq (4.5).
0.072198 - After the optimum parameters are found, the entire past data set will be used to train the network, ANFIS.
0.124998 - Fig 4.3 shows the flow chart of the learning process for the training and evaluation of ANFIS.
0.117424 - The inflexion point detector is a combination of both the trough and peak finders which are expressed in Eqs.
0.037736 - (3.12) and (3.13).
0.069382 - With the identified inflexion points from the inflexion point detector, the inflexion point sorter module will then sort them accordingly a trough to peak, peak to trough sequence.
0.045977 - Framework of ANFIS-RL∗ Fig 4.3.
0.052805 - Framework of ANFIS-RL∗.
0.080378 - The tuned cycle will then be preprocessed to generate the training set.
0.095238 - The design of the prediction model employs the past gradients of the tuned cycle as inputs.
0.070461 - These past gradients are spaced exponentially and can be mathematically formulated as shown in Eq (4.6) (4.6) where x is the number of input dimensions and t is the current day.
0.049058 - On the other hand, with the inflexion points identified in the inflexion point detector, the next valid inflexion point can be determined.
0.055556 - The gradient from the current day to the next inflexion point can be mathematically formulated as in Eq (4.6) and will be used as the expected output data, see Eq (4.7) (4.7) where T ∈ {Inflexion Pts}.
0.076305 - After the data is processed, it will be split into three parts, training, checking and testing data.
0.091660 - ANFIS will make use of the training data to tune the membership parameters.
0.099188 - ANFIS will then be evaluated thru reinforcement learning and the reward as expressed in Eq (4.5) will be feedback to the framework.
0.090909 - The parameters for the most rewarding model will then be remembered with respect to the state of the stock.
0.096533 - Finally, this model will then be trained with 95% of the past data and the remaining 5% of the data is used for validation.
0.064965 - ANFIS-RL∗: experimental setup Stock data from five companies, namely, Citigroup, General Motors, Walmart, Wyeth and IBM are used to generate their cycles from 1986 to 1994.
0.082528 - These cycles are then used as the training data in the following experiments.
0.089669 - The number of folds, K, used for K-fold cross validation in the framework is set as 4.
0.089835 - Lastly, the number of training episodes for all the models is 200.
0.037960 - Model comparison using K-fold cross validation In this experiment, two neuro-fuzzy models, Dynamic Evolving Neural Fuzzy Inference System (DENFIS) (Kasabov & Song, 2002) and Rough Set-Based Pseudo Outer-Product (RSPOP) (Ang & Quek, 2006) are benchmarked against ANFIS_RL∗.
0.055848 - DENFIS and RSPOP are based on two different fuzzy models; namely: Sugeno and Mandami respectively.
0.041885 - DENFIS have better prediction capability as compared to ANFIS (Jang et al., 1997) and RSPOP has better interpretability than Sugeno type model.
0.077973 - Default parameters for DENFIS are set and RSPOP will be using three labels for the fuzzy inference system.
0.072942 - Table 4.1 shows the mean true error, correlation coefficient and the proposed performance measure.
0.075650 - ANFIS-RL∗ has the smallest mean true error and highest mean correlation.
0.033898 - However, considering the worse case in the true error measure, where the standard deviation is taken into consideration, it is observed that RSPOP with four input dimensions has the best performance.
0.066578 - On the other hand, DENFIS has the highest mean correlation.
0.055556 - However, if the overall performance measure is considered, it can be observed that ANFIS-RL∗ is able to consistently achieve the highest correlation to true error ratio.
0.106838 - Thus, the proposed framework is able to optimize the performance of the network through reinforcement.
0.000000 - Table 4.1.
0.000000 - Overall performance measures.
0.000000 - Model Input dim.
0.000000 - True error Correlation Overall performance Mean Std.
0.000000 - deviation Mean Std.
0.003325 - deviation DENFIS 4 0.1423 0.0406 0.6556 0.1060 4.6089 DENFIS 5 0.1598 0.0478 0.5733 0.1137 3.5884 RSPOP 4 0.1399 0.0381 0.6281 0.1533 4.4884 RSPOP 5 0.1547 0.0512 0.5945 0.1261 3.8419 ANFIS-RL∗ Variable 0.1363 0.0511 0.6638 0.1078 4.8696 4.5.
0.077610 - Prediction evaluation In this subsection, simulation benchmark is based on the two different performance measures and the final model will then be evaluated with the entire dataset.
0.092593 - The two different performance measures are the proposed performance measure as expressed in Eq (4.5) – reward and Eq (4.3) – true error a function of RMSE.
0.107660 - The objective of this experiment is to determine the impact of the proposed performance measure (Rx).
0.000000 - From Figs.
0.050179 - This is illustrated in the indicated area whereby the prediction, using the proposed performance measure – (Rx), does not generate large fluctuation.
0.011494 - Such fluctuations are intolerable in certain applications.
0.026911 - Prediction based on true error (Eq Fig 4.4.
0.036044 - Prediction based on true error (Eq (4.3)) as reward.
0.024899 - Prediction based on proposed performance measure (Rx) (Eq Fig 4.5.
0.033458 - Prediction based on proposed performance measure (Rx) (Eq (4.5)) as reward.
0.100654 - Detection of inflexion region Even though, there is a prediction to the next inflexion point but one is still unable to identify an inflexion point.
0.052910 - In this section we shall formulate the identification mathematically.
0.056872 - From Eq (4.7), it can be observed that as the cycle approaches the inflexion points, the value for Cyclet will be very close to CycleT.
0.060606 - This implies that Outputt will approach near to zero when the current day is near to the inflexion point.
0.128897 - To know whether it is a trough or peak, the trading system needs to know the past trend.
0.099120 - We can mathematically formulate the past trend in Eq (4.8) (4.8) where t is the current day and X is a parameter value that is found via reinforcement learning.
0.083562 - With the past trend and the predicted gradient from ANFIS-RL∗, the inflexion point can be identified via Eqs.
0.030905 - (4.9) and (4.10) (4.9) (4.10) Using Eq 4.11, Eqs.
0.040712 - (4.9) and (4.10) can be updated as Eqs.
0.075457 - (4.12) and (4.13) (4.11) where Offset and Precision are parameters that are identified via reinforcement learning (4.12) (4.13) The parameter, Precision in Eq (4.11) marks out the region where a value will be deemed as an inflexion point.
0.120482 - The other parameter, Offset is a multiplicative factor to reduce the lagging effect of the tuned cycle.
0.123803 - Maximum reward reinforcement learning is claimed in Quah and Quek (2005) to be more appropriate in applications, where the use of cumulative rewards is unjustifiable.
0.080378 - Stock trading is one such application where the profit is non-cumulative.
0.054027 - In addition to this, maximum reward reinforcement learning had shown superior performance in finding optimal solution without being hindered by sub-optimal solutions (Quah & Quek, 2005).
0.081236 - Mathematical definitions for maximum reward reinforcement learning In this subsection, equations for reinforcement learning will be modified to implement the maximum reward reinforcement learning paradigm.
0.053030 - The reward function,Rt, is modified as shown in Eq (5.1) (5.1) where γ is the discount rate.
0.012579 - Using Eq (5.1), Eqs.
0.038986 - (3.7), (3.8) and (3.10) are updated as 5.2, 5.3 and 5.4 respectively.
0.078591 - Under policy π, (5.2) where Eπ is the expectation function for the policy π, γ is the discount rate, a is an action, is the probability from s to s′ and is the future reward.
0.078292 - Under policy π, (5.3) where Eπ is the expectation function for the policy π, γ is the discount rate, s′ is a state that belongs to the set of states, is the probability from s to s′ and is the future reward.
0.074689 - Under optimal policy, (5.4) where γ is the discount rate, s′ is the next state, a is the action taken, is the probability from s to s′ and is the future reward.
0.117864 - Learning to trade The proposed learning will be different from Moody & Saffell’s (2001) in terms of concept and technique.
0.095421 - Conceptually, the agent will learn to trade at potential states (troughs or peaks) based on actual price actions to get potential high returns.
0.132479 - In terms of technique, the agent will learn to trade in a value based approach.
0.063927 - This agent will be termed as Max-Reward trading agent (the “agent”) subsequently.
0.086758 - The inexperienced agent will undergo an evaluative learning session prior to actual trade.
0.116466 - To learn when to buy, the selling day is first fixed at the peaks of each cycle.
0.071197 - The agent will then retrieve the state of the current day which composed of three processed components; they are computed from the historical price data.
0.012012 - These are mathematically formulated in Eqs.
0.028369 - (5.5) and (5.6) (5.5) where T ∈ {30, 70, 90}.
0.098485 - The timing intervals, {30, 70, 90}, are arbitrary values to represent the past short, medium and long term trend.
0.099379 - As the gradient is a continuous value, it will be rounded to the nearest discrete value.
0.073801 - Since the state is represented by three components, it can be expressed as in Eq (5.6) (5.6) With knowledge of the current state, the agent will buy on that day and sell at the next peak.
0.110713 - The agent will then evaluate his action by using the multiplicative profit (Moody & Saffell, 2001) as a form of reward.
0.063218 - The reward formulation is shown in Eqs.
0.068182 - (5.7) and (5.8) (5.7) where Wt is the current wealth and Wo is the initial wealth.
0.067612 - The wealth of the trading system is formulated in Eq (5.8) (5.8) where Wt is the current wealth, Wo is the initial wealth and where z0 is the initial price, zt is the current price of the securities and δ is the transaction rate.
0.080279 - In Eq (5.8), the transaction rate is fixed at 0.5%, to simulate as the brokerage charges and miscellaneous handling fees.
0.055556 - After the reward is given, the agent will update his experience using Eq (3.2).
0.088398 - This trial and error learning will continue until there is no more peak for the agent to learn to buy.
0.091358 - This process is exactly the same in learning to sell, except that the trough is used for the buying and the selling will be done on every day until there is no more peak left.
0.080579 - Decision making process During trading, the agent will exploit his experience to decide on the trading signals.
0.091137 - The agent will attempt to retrieve the current state using Eq (5.6) and will decide on its actions.
0.025157 - Prior to decision making, Eqs.
0.066194 - This modification will allow the agent to take the future values seriously.
0.099548 - Under policy π, (5.9) where a is an action that belongs to the set of actions, is the probability from s to s′ and is the future reward.
0.096531 - Under policy π, (5.10) where s′ is a state that belongs to the set of states, is the probability from s to s′ and is the future reward.
0.081448 - Under optimal policy, (5.11) where s′ is the next state, a is the action taken, is the probability from s to s′ and is the future reward.
0.076563 - In the decision making process, the agent will compare the current state value and the future value.
0.073665 - The future value can be computed using Eq (5.11) with the number of look ahead states set as 5.
0.048780 - If the future value is lower than the current state-value, then the agent will decide to buy, as there is no other days that has better opportunity other than the current day.
0.066538 - On the other hand, if the reverse occurs, the agent will decide to hold.
0.010582 - However this control is still inadequate in some cases.
0.089506 - Consider the case where the agent reaches a state that has a reward of 5% and it is higher than the future value, then should he buy?
0.069652 - Considering the fact that the proposed investing style is a long term investing, it will be better if the expected reward is high enough.
0.051661 - These stopping criteria can be mathematically formulated as shown in Eq (5.12) (5.12) where t is the current time and is the expected future value and Y is the expected reward that is identified via RL.
0.086055 - On the other hand, the agent will decide to sell based on the current profit.
0.061810 - Then the agent will get the expected future value by using Eq (5.11).
0.049383 - If the current reward is higher than the future value, the agent will decide to sell, since the current reward is higher than any expected future rewards.
0.059701 - This optimal stopping time is formulated in Eq (5.13) (5.13) where t is the current time and is the expected future value.
0.107291 - Fig 5.1 shows the design of the trading system.
0.095980 - It consists of three modules, cycle tuner, ANFIS and the trading agent that are generated in Sections 3–5 respectively.
0.105694 - The cycle tuner, in Section 3, is used to generate the cycle data.
0.106814 - This output data is then used by ANFIS, in Section 4, to predict the next inflexion point of the cycle.
0.085034 - The prediction is employed by the trading agent (Section 5) as an indicator that the stock pricing is now within the inflexion region.
0.084198 - The agent will then exploit its trading experience to decide on the trading action.
0.076923 - With the trading decision, the portfolio will be updated with the new holdings and capital.
0.099670 - Design of the trading system Fig 5.1.
0.113863 - Design of the trading system.
0.089552 - Experimental setup Five stocks, having 20+ years of history, from different industries are randomly selected from the US market, for trading simulation and analysis.
0.038986 - These stocks are; namely: Citigroup (Finance), General Motors (Automotive), Wyeth (Healthcare), IBM (Information Technology) and Walmart (Variety Stores).
0.089656 - By selecting from different industries, the stock data will be highly uncorrelated from one another and thus will allow the proposed trading system to switch funds easily.
0.066158 - Table 5.1 shows the correlation between the individual stocks.
0.000000 - Table 5.1.
0.073333 - Correlation ratio of stocks.
0.035154 - Correlation IBM Walmart Citigroup Wyeth General Motors IBM 1.000 0.224 −0.002 0.406 0.566 Walmart 0.224 1.000 0.320 0.273 −0.190 Citigroup −0.002 0.320 1.000 0.028 0.179 Wyeth 0.406 0.273 0.028 1.000 0.312 General Motors 0.566 −0.190 0.179 0.312 1.000 In the following experiments, historical data from each stock from 1986 to 1994 was fed to the cycle finding module to determine the cycles of each stock.
0.105098 - These cycles were then used to train the inflexion point predictor, ANFIS-RL∗ (see Section 4) and the Max-Reward trading agent.
0.142158 - Reinforcement learning is then used to tune the parameters in the trading system (see Section 5).
0.104418 - The simulations span a period of 13 years, starting from 24th August 1994 to 30th August 2006.
0.126693 - The trading system will start off with an initial capital of US$100,000 and each buying or selling will incur a transaction cost of 0.5%.
0.075055 - Experimental results Table 5.2 shows the trading performance for trading each individual stock.
0.118079 - It shows that the trading system is able to achieve an average of 95% winning trades for the five counters.
0.104554 - It can be observed that the average actual return over a year is around 36.91% based on the holding period.
0.103777 - If it is based on the simulation period of 13 years, then the average yearly return is around 13.05%.
0.063725 - This analysis shows that the trading performance is not optimized yet.
0.094563 - To optimize it, the waiting period (peak to trough) must be reduced.
0.070933 - Furthermore, by analyzing the average return and average trades, it can be observed that for every trade, the investor can expect around 36.88% (169.68%/4.6) return.
0.000000 - Table 5.2.
0.050314 - Trading performance for each stock.
0.012579 - Company Profit (%) Wining trades (%) No.
0.015907 - of trades Total holding period in year Profit (% per holding year) IBM 212.76 75.00 4 4.86 43.73 Walmart 110.69 100.00 4 5.09 21.74 Citigroup 131.68 100.00 3 3.55 37.09 Wyeth 189.30 100.00 6 4.01 47.23 General Motors 203.95 100.00 6 5.87 34.75 Average 169.68 95.00 4.6 4.67 36.91 5.5.1.
0.094697 - Trading activity on IBM In this section, the trading activity of one of the stocks, IBM is being demonstrated.
0.083722 - Fig 5.2 shows the trading activity on the counter: IBM.
0.089400 - The parameter ‘Close’ is the closing price of the stock, ‘Trading Signal’ is the trading signal (low to high -> buy; high to low -> sell) and ‘Cycle’ is the cycle being generated as described in Section 3.
0.066116 - Table 5.3 shows the detailed trading activity.
0.092352 - Generally, from Fig 5.2, it can be observed that the trading is done near the inflexion points of the generated cycle and 3 out of 4 trades are profitable.
0.080729 - On further analysis of the losing trade, it can be observed that the trading loss is almost negligible compared to the profits made and most importantly, the system is still trading in the inflexion region.
0.105238 - From Fig 5.2 and Table 5.3, it can be observed that most of the 13 years is used to wait for a new buying opportunity.
0.109929 - In Section 5.5.3, the trading system will utilize all the five stocks for trading, attempting to maximize the number of buying opportunities and thus reducing the waiting period.
0.022989 - Trading actions on IBM Fig 5.2.
0.026403 - Trading actions on IBM.
0.000000 - Table 5.3.
0.026403 - Trading activities on IBM.
0.002420 - Date bought Price bought Date sold Price sold Profit (%) Holding period (days) Wealth 22-May-96 $110.37 7-April-97 $132.50 20.05 220 $118785.59 28-January-98 $97.00 4-May-99 $212.00 118.56 318 $257135.86 2-December-99 $105.27 7-February-02 $103.91 −1.29 546 $251238.79 15-October-02 $68.48 7-July-03 $86.09 25.72 181 $312743.02 17-September-04 $85.74 NA NA NA NA NA Total profit $212743.02 Total profit 212.74% 5.5.2.
0.060858 - Performance benchmark The return from each individual stock is compared against the stock market (as proxied by the market indices) returns as well as the individual stock return, see Table 5.4.
0.098291 - This provides an effective evaluation of the performance of the proposed long term trading method.
0.087696 - Table 5.4 shows the return of two market indices (Dow Jones Index and the S&P 500 index) and the five stocks prices for the period from 1994 to 2006.
0.081670 - Comparing the returns from the indices with Table 5.2, it can be observed that the average total return of trading a single stock is 8.63% lesser than the S&P Index and 26.23% lesser than Dow Jones Index.
0.054567 - However, by comparing the yearly return of the indices with the returns per holding year in Table 5.2, it can be observed that the proposed investing style is capable of beating the market by at least around 21.84%.
0.118966 - In addition to the analysis above, by analyzing the trading performance of a buy-and-hold strategy for the entire trading period, it can be observed that the expected yearly return of trading a stock using this strategy is −6.8%.
0.108747 - The highest return is from IBM, having a total of 37.06%.
0.049751 - However achieving a 37.06% return after a 13-year period is not significant as it implies only a 2.85% yearly return only.
0.088625 - Comparing these results with Table 5.2, it is apparent that the proposed trading system is able to filter downside periods and capture the upside potential.
0.000000 - Table 5.4.
0.040712 - Returns on Dow Jones Index and S& P 500 Index.
0.007937 - Index/stock Performance Return (%) Yearly return (%) S&P (1994–2006) 178.31 13.72 Dow Jones (1994–2006) 195.91 15.07 IBM 37.06 2.85 Walmart −29.87 −2.30 Citigroup −42.51 −3.27 Wyeth 20.56 1.58 General Motors −19.26 −1.48 5.5.3.
0.117505 - Trading with dynamic asset switching strategy In Section 6, the trading system is traded using only one stock and hence, is unable to truly reflect the actual performance of the proposed trading strategy and system.
0.104220 - In this section, dynamic asset switching strategy is used to switch investment funds to another stock as soon as there is a buying opportunity (trough).
0.099448 - By doing so, the entire 13 years of trading period will be better optimized as there are more trading opportunities.
0.068100 - Table 5.5 shows the trading record for all the trading done for this 13-year period with these five stocks.
0.106961 - Each row shows the price and day of trade for the stock, together with the multiplicative wealth and the holding period for that particular investment.
0.000000 - Table 5.5.
0.040772 - Trading performance with dynamic asset allocation strategy.
0.026049 - Company Day bought Price bought Day sold Price sold Wealth Holding period (days) General Motors 1 $50.38 696 $58.00 $113973.80 695 Wyeth 840 $75.00 922 $94.56 $142261.18 82 Wyeth 942 $49.00 1130 $59.25 $170299.70 188 Walmart 1244 $44.00 1434 $55.38 $212201.94 190 Walmart 1523 $49.75 1894 $62.98 $265946.41 371 Citigroup 1963 $40.71 2285 $46.99 $303902.07 322 Wyeth 2344 $39.65 2740 $44.85 $340320.50 396 Total profit $240,320.50 Total profit 240.32% Comparing the results between Tables 5.5 and 5.2, the total percentage profit has increased from an expected return of 167% to 240%, which is around 70% increment.
0.068627 - It can be observed that all the trades are profitable trades.
0.086570 - It is apparent that the improvement in the trading performance is due to the reduction in the waiting time (peak to trough) by applying dynamic asset allocation.
0.098583 - This allows the trading system to judiciously identify more trading opportunities within the 13 years.
0.068210 - Comparing this trading performance with the market return, it is apparent that the proposed trading system has convincingly outperformed them by around 50%.
0.081197 - To many, technical analysis is a valuable and profitable tool in trading and investment decisions.
0.158515 - Relying on the principles of technical analysis, our study proposes a non-arbitrage trading system that is built from an optimized Adaptive Neuro-Fuzzy Inference System, (ANFIS) and supplemented by reinforcement learning.
0.276067 - Reinforcement learning is used to formalize an automated process for determining stock cycles by tuning the momentum and the average periods.
0.103330 - The initial experimental results based on five US stocks are promising.
0.092081 - On average, the total returns from the five stocks are able to beat the market by about 50 percentage points.
0.112504 - Admittedly, more rigorous empirical testing, further refinements of the model in identifying the change in trends are required for the proposed trading system to be more reliable and acceptable.
0.115376 - As an extension of the model, further development work would also be undertaken for portfolio composition from a given pool of stocks.

[Frase 490] Reinforcement learning is used to formalize an automated process for determining stock cycles by tuning the momentum and the average periods.
[Frase 21] Our study attempts to identify the change of a primary trend or a broad movement.
[Frase 1] Based on the principles of technical analysis, this paper proposes an artificial intelligence model, which employs the Adaptive Network Fuzzy Inference System (ANFIS) supplemented by the use of reinforcement learning (RL) as a non-arbitrage algorithmic trading system.
[Frase 3] It dynamically determines the periods for momentum and moving averages using the RL paradigm and also appropriately shifting the cycle using ANFIS-RL to address the delay in the predicted cycle.
