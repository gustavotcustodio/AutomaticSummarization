Internet Learning Management Systems ( LMSs ) are powerful tools that help us in our daily teaching and learning activities .
Most users and software are mainly focused in content dissemination and group works , but the possibilities that Internet LMSs could offer go further .
Some recent approaches use semantic web to improve the capabilities and user experiences in e-learning by mean of artificial intelligence and knowledge management techniques .
In this work , we develop a procedure to achieve the integration of different e-learning systems , and to give semantics to entities and relations in the database of LMSs by mean of ontologies .
This integration could ease the dissemination of learning resources and knowledge from the databases of the Learning Management Systems .
Moreover , the semantic interpretation of database schemes would allow to find precise information quickly .
Internet learning management systems are tools that teachers and learners are used to use since the last decade .
In their early they provided features oriented only for content sharing , but they have evolved to give us a wide interaction between students and teachers , and a set of tools to ease the learning .
Today most of LMSs allow us to share documents , media , forums , blogs , bookmarks , and portfolios .
Recently , knowledge management tools have been used to improve e-learning activities ( Lau & Tsui , 2009 ) .
The advances in Web 2.0 and XML-based technologies are changing our concept about WWW by mean of the inclusion of semantics in web documents and media .
In the semantic web machines are able to talk in terms of the same concepts and to share information .
This provides a higher organization in the Web and therefore a better user experience .
Research regarding semantic web for e-learning has provided a wide variety of papers , but most of them converge in the use of ontologies for knowledge representation and semantic interpretation of concepts .
The most common definition of ontology in computer science is the formal and explicit specification of a shared conceptualization of a domain ( Gruber , 1993 ) .
An ontology contains elements like classes , attributes , relations , and logic axioms to comprise the domain represented .
A reasoner , in general terms , is a set of logic rules which may be used to infer or retrieve information about concepts or relations over the ontology , to provide new information or to validate/refuse an initial assumption .
Nilsson , Palmr , and Naeve ( 2002 ) gives an overview of semantic web , the use of metadata , RDFs and ontologies for e-learning .
It concludes that the good design of metadata could help in e-learning tasks like effective support for knowledge construction and access .
Yli-Luoma et al .
( 2006 ) also discusses how semantic web could be used in e-learning , and describes tools that could be developed to support context , socialization , discussions and conceptual modelling .
In Huang , Webster , Wood , and Ishaya ( 2006 ) , it is proposed a process with four stages to improve learning personalization .
In a first stage , a context-aware semantic information service is developed .
At the second step information retrieval is applied for document access .
Thirdly the psychological learning theory is used to control the knowledge flow in learning activities , and finally the learner personality is analyzed in order to provide a suitable self-learning .
In Dietze , Gugliotta , and Domingue ( 2007 ) , it is described the architecture of a service-based e-learning system using metadata for dynamic contexts .
The works ( Dzbor , Stutt , Motta , & Collins , 2007 ; Stutt & Motta , 2004 ) overview semantic web and its use for web learning , and propose a model to develop semantic services for learning web communities .
Henze developed a framework for workspace personalization using RDF/S ( Lassila & Swick , 2004 ) and a service-oriented architecture in Henze ( 2005a , 2005b ) .
The works ( Jovanović et al. , 2007 ; Torniai , Jovanovic , Gaševic , Bateman , & Hatala , 2008 ) offer a system to provide teachers with feedback about the interaction between students and learning resources .
Recently , the approach in Dunkel , Bruns , and Ossowski ( 2006 ) builds an ontology with the language DAML + OIL and fulfills the integration within an e-learning platform to give semantics for the contents .
After that , a multi-agent architecture is applied over the e-learning system and a reasoning engine provides learners with intelligent recommendations for their tasks .
Despite the efforts to apply semantic web in e-learning , a gap is found when we try to integrate and give semantics to information inside the databases of LMSs .
There has been much proposals to make ontology and database matching since the 90 ’ s .
The main purpose of researchers in this area has been to give semantics to database relational models .
Most of papers propose a set of heuristic rules either to do the matching or to infer an ontology that represents the database .
For example , in Li , Du , and Wang ( 2005 ) , the authors propose a heuristic method to build OWL ontologies from data in relational databases .
In Lee and Whangbo ( 2007 ) , the authors provide a method to extract an ontology from data in a database and to match the extracted ontology with a previously knows domain ontology .
In Astrova ( 2005 ) and Astrova and Stantic ( 2004 ) , a reverse engineering method is proposed to migrate data existing in relational databases to ontologies , by mean of the information obtained from web forms analysis .
The work ( Tijerino , Embley , Lonsdale , Ding , & Nagy , 2005 ) develops TANGO , a software system to study semantics among database tables using WordNet .
The method proposed firstly generates small ontologies from tables , and then make semantic mappings between these ontologies with the purpose of creating a new major general/application ontology .
Recently , in Sonia and Khan ( 2008 ) , it is proposed a method to transform the information from a database into an ontology , in absence of tables and database metadata .
To achieve this goal , the authors provide a collection of rules to infer the metadata on the fly , and then to identify class hierarchies and relations in an ontology .
In Juric and Skocir ( 2007 ) , the authors propose a set of rules to transform a database into an ontology .
To achieve a higher standardization and semantic enrichment , the approach is supported by mean of mappings of WordNet terms into OWL concepts .
The work we have found closer to our approach in the literature is explained in An , Borgida , and Mylopoulos ( 2005 ) , which describes a method to map a relational database into an ontology using simple logic formulas automatically .
However , the resulting mapping could suffer of ambiguity .
A survey about ontologies , databases and methods for ontology and database mappings may be found in Martínez Cruz , Blanco , and Vila ( 2009 ) .
Our contribution focuses in this context .
The goal we pursue is to fulfill the semantic integration of the information existing in the databases of different and distributed e-learning sites .
The benefits of such integration could offer advantages like extended online knowledge dissemination .
Moreover , the search of concrete learning material could be easily fulfilled due to the semantic interpretation of entities and relations of LMSs databases .
Our approach may be resumed in two stages : • Firstly , an ontology for e-learning environments is developed .
• Secondly , we make a matching between the ontology classes and properties , and relational databases of e-learning Internet systems .
The data from the databases could be imported and saved as ontology class/property instances .
In this step , we obtain a common framework for data sharing between different e-learning systems .
Moreover , the database is given with semantics , which provides the advantages of semantic web .
This article is organized as follows : Section 2 shows the main design of the ontology to model the knowledge embedded in an e-learning system .
After that , Section 3 describes a model to give semantics to entities and relations in the database of a LMS .
Section 4 provides a procedure to map the data from the database into ontology class instances and slots .
Section 5 shows a case study over a LMS as a proof-of-concept and the implementation details .
Finally , Section 6 describes the conclusions and further work .
There have been many efforts in the last years to apply semantic web in e-learning environments .
However , most open source LMSs that institutions currently use such as Moodle ( Dougiamas & Taylor , 2003 ) , A-Tutor ( A-Tutor , 2007 ) , Sakai ( Sakai , 2008 ) , etc. , are mainly focused for content sharing and users collaboration and unfortunately they do not take the advantages of Web 2.0 completely .
In order to give semantics and to allow reuse and information sharing in LMSs it is required a common abstract framework to match entities and relations in the relational database with their meaning .
In this section , we propose an ontology that could be the starting point to achieve this goal .
After that , once the databases would be integrated within the ontology , information sharing between LMSs would be possible .
Furthermore , a simple search could be applied over the ontology structure and the class instances and slots to obtain data about relations between teachers , learners and learning resources .
Fig 1 illustrates this idea .
Ontologies as the abstract common framework for information sharing Fig 1 .
Ontologies as the abstract common framework for information sharing .
The interactions between agents in an e-learning system ( teachers and students ) are tipically represented about people knowing other people .
Furthermore , the learning resources in an e-learning platform usually have properties like maker , topics , etc. , and they could be interpreted as an specialization or specification of a Document .
The Friend of a Friend project ( FOAF ) is one of the most popular ontologies used in the semantic web for this purpose ( Breslin & Decker , 2007 ; Hamasaki , Matsuo , Nishimura , & Takeda , 2007 ; Staab et al. , 2005 ) .
Basically , FOAF is a vocabulary for describing people and relations such as who knows who .
To achieve the goal of standardization , the ontology we build in this work is based in FOAF .
However , FOAF is not a complete data sharing solution since its vocabulary and properties are very limited .
We need to extend the FOAF ontology to consider fine grained relations between entities in LMSs .
The language chosen for the ontology is RDF ( Lassila & Swick , 2004 ) as FOAF does , since the goal we pursue is to provide an abstract knowledge structure .
The use of other languages such as OWL would also be possible , but the description logic and class and relations constraints of this language would also make more difficult the integration of different database designs of the LMSs .
Moreover , RDF is currently one of the most used languages in the semantic web .
The extension we propose is foafLMS , a hierarchical organization of actors and relations in the system , where the concepts Agent and Document are the main abstract representations of entities , and Knows and theme are the main abstract relations .
We have used the software Protégé from the Stanford University to build the ontology design .
Figs .
2 and 3 show an example of the hierarchical organization of the ontology .
Snapshot of the extension of the ontology class structure Fig 2 .
Snapshot of the extension of the ontology class structure .
Snapshot of the extension of the ontology properties structure Fig 3 .
Snapshot of the extension of the ontology properties structure .
In summary , we may overview that an Agent could be either a Person ( a Teacher or a Student ) or a Group .
Some relevant groups are a Department ( which is a set of teachers ) , a Subject ( a set of teachers and students working in specific issues ) or a WorkGroup ( a set of people working together ) .
A LearningResource is a Document , which is specialized in ResourceForStudy ( learning material usually provided by teachers or a work group ) and Work ( documents generated by a student or a work group ) .
There are different specialized learning resources such as Notes , Exercises , Media ( Video , Software , Audio or Image ) , Forums , Projects , Homework , etc .
Additionally , classes Evaluation and Issue give support for agent evaluations and association of document topics and agent interests , respectively .
To model relations between agents in the ontology we have started from the property knows from FOAF .
However , we have needed to redefine this concept in order to abstract this relation between agents .
Thus , we may find sub-relations to represent that a teacher teaches a student and its inverse ( isStudentOfTeacher ) , a department offersSubject a subject , a person isFriendOf another person , or a person belongsToGroup a group .
This last relation is also specialized so that a teacher isWithDepartment a department , a student studiesSubject a subject , and a teacher teachesInSubject a subject .
On the other hand , to model agent and document interests and topics we have defined the subproperty isRelatedTo from slot theme , since the domain of the slot topic from FOAF is only objects from the class Document .
We have done this for the same reason than for relation knows , as it was explained above .
The specializations of isRelatedTo are able to model that a learning resource/agent isAbout/isInterestedIn some issues , respectively .
The specialization of isInterestedIn models that a subject studiesIssues some issues .
Slots isAPartOf , isTheOppositeOf and isTheSameAs make associations between issues to model relations of similarity/dissimilarity between issues .
Finally , other relevant slots make associations between agents and their evaluations ( hasEvaluation ) , and the issues that an evaluation is about ( itemsEvaluated ) .
Moreover , to find similar documents easily we have also included the property isSimilarTo between learning resources .
Other properties from FOAF could also be used to make associations between classes in the ontology , such as maker , made , interests , etc .
( Brickley & Miller , 2007 ) .
Most learning management systems use to provide support to manage subjects , student groups , and facilities for content dissemination , learners evaluation and communication between users .
These data are usually stored in a database using a relational model .
To give semantics to entities and relations , in this section we describe the matching between classes and slots in the ontology proposed in Section 2 with the corresponding tables in the database .
For our purpose , we have developed a software in Java named OntoLMS , which works as a wizard to ease the user interface .
OntoLMS allows us to match an ontology with database tables from different distributed Internet LMSs and create ontology instances of classes and properties from data obtained from the tables .
There are four stages until we fulfill the complete database and ontology mapping ( Fig 4 ) .
First of all , the ontology files are loaded in memory .
We have used the OWL-API for Java as the parser with the reasoner Pellet .
Secondly , the user may specify one or more LMS databases in Internet from which data are obtained , and matches the ontology with the data in all the databases .
The matching is carried out semi-automatically .
An expert matches manually the ontology classes and properties , since it depends highly on the database design and it would be hard to obtain a suitable automated 100 % reliable procedure for ontology and database matching .
Procedure for ontology data extraction Fig 4 .
Procedure for ontology data extraction .
For a better organization , firstly OntoLMS asks the user to match all ontology classes , then data properties and finally the slots for class relationships .
Once all database associations have been carried out , OntoLMS is able to import classes and properties instances from the LMSs .
As stated previously , the matching is semi-automatic : The expert choose the tables in the database and the classes/properties in the ontology for the matching , but its internal representation is designed automatically in order to extract the ontology data correctly .
The following subsections show how the matching is carried out once the expert has chosen the right elements in the ontology and the database .
We use the notation of relational algebra since it is a classic language to describe relations in databases and has enough expressivity for our purpose .
Matching ontology classes Let C be an ontology class , T = { T1 , T2 , … , Tn } a set of tables in a database D chosen by the expert , and kj the set of primary key attributes in table Tj .
We may assume that all tables Tj has primary key attributes defined in the database schema .
Otherwise , the hole set of attributes in the table would be used as the primary key .
The individuals ci ∈ C are extracted from the rows resulting from and some logic constraints Θ over table attributes given by the expert .
This idea is shown in Eq ( 1 ) , where ⋈ and σ stand for the relational natural join and selection operators , respectively ( 1 ) The ontology language imposes that each individual belonging to C has an unique identification in order to build its URI .
This identification can not be shared with any other class instance in the ontology .
We have computed this value using the database identification D , which is unique in OntoLMS , and all primary key attributes in T∗ .
With this consideration , the identification of a class individual ci may be obtained from Eq ( 2 ) , where π stands for the relational projection operator ( 2 ) 3.2 .
Matching ontology data properties Data properties give information about a specific feature that belongs to a class individual : For instance , the property name for a class Person .
In terms of the ontology language , we may assume that data properties are those whose range is the data type .
Since they are used to describe properties of individuals , by their nature they should be stored in the database as table attributes .
However , a property could encompass one or more attributes depending on the database design .
For example , a schema could encode the name of a person either in a single table attribute name , or in two attributes first name and surname .
Let be a property of interest for individuals in class C , and the set of attributes in T∗ which match P , chosen by the expert .
We may extend the general equation ( 1 ) to obtain P ( ci ) as it is described in Eq ( 3 ) , where stands for the value of primary key attributes from table Tj in class individual ci ( 3 ) 3.3 .
Matching ontology object properties Object properties describe relations between individuals of classes in the ontology ( as for instance “ John likes Computers ” ) .
Let B and C be two ontology classes matched with database D so that and , where Tj and Sj are database tables .
An object property provides a set of class individuals cl ∈ C that have a relationship with an individual bi ∈ B by mean of property O ( bi ) .
To be accurate , in RDF and OWL it returns the URI for those individuals cl that matches O ( bi ) .
We may obtain O ( bi ) as it is described in Eq ( 4 ) ( 4 ) In Eq ( 4 ) , R∗ stands for the result of the natural join in tables , and ΘR are some logic constraints over R∗ , T∗ and S∗ given by the expert .
The constraints ΘC and ΘB were defined previously in the step for ontology classes matching by mean of Eq ( 2 ) .
Finally , we would like to emphatise that R∗ and ΘR may be removed from the formula if the matching for property O requires it .
The resulting set from the operation provides the identification of class individuals that belongs to C , as it has been explained in Section 3.1 .
Solving the hierarchy matching problem Classes and object properties are modeled in a hierarchical structure within an ontology , by mean of single and multiple inheritance relations .
As stated before , database designs could be potentially quite different so that our approach should be flexible enough to fulfill the matching successfully .
Moreover , there could be situations in which some classes or properties can not be matched because of their high abstraction level , depending on the database schema .
Thus , considering the matching procedure exposed in previous subsections , a data integrity problem arises surrounding this context : Let B and C be two ontology classes matched with the database , and C a subclass of B .
Thus , C ⊆ B .
This condition should be checked once the class matching step is finished ( see Section 3.1 ) , in order to preserve integrity in the ontology data .
Otherwise , individuals in class C might not be a specialization or extension of individuals in B .
As a consequence , the matching carried out by the expert would be wrong .
In this section , we provide two conditions to avoid this problem .
Considering Eq ( 1 ) , let the individuals be in class C and individuals in class B , where and .
The following conditions are necessary and sufficient to preserve relation C ⊆ B in the matching : 1 .
The set of tables .
The logic constraints ΘC ∧ ΘB ≡ ΘC .
The first condition ensures that individuals in the subclass inherit all data properties from the superclass , and also that all primary keys from the tables Tj are used to build the unique identification for the children , therefore allowing object properties of the parent to be used in the subclass instances .
On the other hand , the second condition ensures that individuals in class C is a subset of individuals in class B , and they are obtained by extension , specification or specialization of the superclass .
Proof Let bi ∈ B and cl ∈ C two class individuals , where C ⊆ B , and and be primary key attributes of the tables Tw and Sz , respectively .
The first condition is necessary to allow inheritance of properties and promotion of individuals from subclasses to superclasses .
Let us suppose that T ⊆ S. According to Eq ( 2 ) , .
Let O be an object property whose range is B .
Then C is also range for O since C ⊆ B and the projection of element cl ∈ C in { id ( B ) } may be computed .
The same argument is valid if B is domain of property O .
On the other hand , let P be a data property whose domain is B and the set of attributes matched for P , .
Since Tw ∈ S then the property may be inherited to C from superclass B .
Thus , we may say that objects in class C are also objects in class B and properties in B are also present in C. If T⊈S then ø .
If this is the case , then can not be computed and the assumption C ⊆ B fails .
The second condition allows to ensure that C ⊆ B .
In order to demonstrate condition 2 , let us suppose that T ⊆ S. According to Eq ( 1 ) , and , so that because constraint ΘC ∧ ΘB is the same or more restrictive than ΘB itself and therefore C ⊆ B .
If ΘC ∧ ΘB ≠ ΘC then , but since constraints for the selection ΘC and ΘB are disjoint .
Then .
Thus , it is necessary condition 2 to fulfill C ⊆ B .
□
The previous sections describe the design for database and ontology matching .
However , this design is the basis to develop a procedure to map the database data from LMSs to ontology class and property instances .
In this section , we assume that the matching has been carried out and we develop an algorithm to map data from the databases to the ontology .
The method is composed of two steps that must be applied over all databases .
Firstly , the individuals for all classes matched are computed with their corresponding data properties .
Then they are stored into the ontology .
Secondly , object properties for all individuals found are mapped from the database to the ontology class instances .
These two stages are necessary to ensure that range values for object properties are stored in the ontology before they are computed from the database , in order to avoid consistency problems in the ontology .
To be accurate , Algorithm 1 describes this procedure in depth .
We have extended the notation of Eqs .
( 1 ) and ( 2 ) in lines 3 and 4 to emphatize that constraints and tables for the selection and projection operators depend on the database in use .
Algorithm 1 Procedure for database and ontology mapping for all database d ∈ { D } do for all ontology class C matched in the ontology do Compute individuals for allci in do Compute the identification id ( ci ) Add class instance ci for C in the ontology for all data property P of class C do Compute property value P ( ci ) Add data property value to ci in the ontology end for end for end for for all ontology class C matched in the ontology do for all class instance ci in C do for all object property O of class C do Compute property values for all object property instance in do Add object property value to ci in the ontology end for end for end for end for end for
We have applied OntoLMS over a real learning management system developed in previous works ( anf F. Berzal , González , Marín , Martínez-Baena , & Requena , .
2009 ) .
In this section , we make a limited proof-of-concept example to describe our results : Database designs of LMSs use to have tens of tables and thousands of rows , so that a high amount of data and design descriptions would eclipse key points in our explanation .
In order to improve the reading and understanding , in this section we use a small set of tables regarding to the relevant entities and relations in our databases .
Let us consider the following tables of a LMS database for our example : User ( idu , name , surname , type ) ; Subject ( ids , name ) ; Friends ( idu , idf ) ; SubjectGroups ( idg , ids , name ) ; Teaches ( idu , idg ) ; StudiesIn ( idu , idg ) ; In the tables of above , the underlined attributes stand for the primary keys .
Fields idu and idf are foreign keys to User in tables friends , Teaches and StudiesIn ; ids is foreign key to Subject in SubjectGroups , and idg is also foreign key to SubjectGroups in Teaches and StudiesIn .
Finally , the attribute type in User has either value 0 or 1 to distinguish between students and teachers , respectively .
Finding matchings between classes in the ontology and tables in the example database are carried out according to Eqs .
( 1 ) and ( 2 ) : • For class Person , the matching is carried out with table User .
Teacher logic constraints ΘTeacher = ( User.type =′ 1′ ) , so that individuals Teacheri has identification : • The matching for class Student is analog the class Teacher , but ΘStudent = ( User.type =′ 0′ ) .
• For classes Subject and WorkGroup , ΘSubject and ΘWorkGroup are empty , and Let us consider objects properties TeacherTeachesInSubjectSubject , StudentStudiesSubjectSubject , PersonBelongsToGroupWorkGroup , WorkGroupIsAboutSubject , and PersonIsFriendOfPerson .
The matching for these relations are the following : • Property TeachesInSubject involves tables from classes Subject , User , and extra tables to model the relation of interest : TIS = Subject ⋈ SubjectGroups⋈Teaches ⋈ User .
For a given teacher Teacheri , TeachesInSubject ( Teacheri ) is computed as follows : • The matching for property StudiesSubject is similar to the previous one , but changing table Teaches by StudiesIn , so that SIS = Subject ⋈ SubjectGroups ⋈ StudiesIn ⋈ User .
For a given student Studenti , StudiesSubject ( Studenti ) is computed as follows : • Object properties BelongsToGroup and IsAbout are obtained easily from the previous assignments : • Property IsFriendOf needs an alias definition of table User , ρ ( User ) = User2 , since the table is used twice in the relation .
OntoLMS is able to detect automatically these situations to provide alias names for the tables .
The relation IsFriendOf is finally determined by the following formula : Once the matching is finished , the formulas of above are transformed into select SQL sentences and applied within Algorithm 1 to map the database into the ontology .
Implementation details Our approach is mainly supported by two Java APIs for access to database data information and ontology management .
Regarding database access , the API is Java native ( package java.sql .
* ) , but the bridges to connect to the DataBase Management Systems are loaded previously during the program load time .
For our experiments , we used the bridge for MySQL , but other different bridges could be loaded depending on the database management systems to be accessed .
On the other hand , in order to manage the ontologies structure and data we used OWL-API for Java and the reasoner Pellet .
All the program modules in OntoLMS make use of these APIs in their most low level operations .
Fig 5 illustrates in depth the architecture of OntoLMS .
Modules layer implementation structure of OntoLMS Fig 5 .
Modules layer implementation structure of OntoLMS .
OntoLMS has GUI that eases the user experience and database matching using a wizard .
Firstly , the Ontology Loader module loads the ontology files from disk and the referenced resources from Internet ( Fig 6 ) .
After that , the user is required to set up the access to LMS databases in the LMS Settings Editor ( Fig 7 ) : Host , port , DataBase user and Password , and DataBase name are mandatory .
Additionally , the LMS has a name for its identification in OntoLMS that must be unique in order to perform a correct data extraction as stated in Sections 3 and 4 .
In the third step , the ontology classes and properties are matched for each learning management system database in the Matching Editor .
Here , the Ontology Matching Module encompasses the theoretical details described in Section 3 .
The user is allowed to do these matchings simultaneously , but it is recommended to fulfill the matching with the following order : firstly class matchings , secondly data properties , and finally object properties .
Using this order , the object property matching is easier since all ranges and domains have been previously defined in the class matching step : • The class matching frame allows the user to select an ontology class and one or more database tables to carry out a class matching .
Fig 8 shows an example about the matching of class Teacher .
Additional constraints over the tables may be provided in order to discard table rows instances that do not match the class .
In this picture we may also see the table fields used to build the URI for the objects instances .
These fields could be changed by the user in order to provide a better matching optimization .
Finally , for debugging and system trace reasons we have included a text area with the resulting SQL query for the matching .
Class matching frame ( matching editor ) Fig 8 .
Class matching frame ( matching editor ) .
• The data property matching frame allows to match data properties for class matchings in the previous step .
The user may select a class already matched and a data property .
Then , it can be chosen the table fields that match the property in use .
Fig 9 shows an example of the data property matching frame in order to match the first name of a student .
Data property matching frame ( matching editor ) Fig 9 .
Data property matching frame ( matching editor ) .
• The object property matching frame assumes that the domain and range classes have been previously matched for the object property of interest .
Here the user chooses a domain class and an object property within this class .
After that , the range class of the property is selected from the ontology hierarchy of classes allowed .
The frame shows the tables matched for both domain and range classes , and allows the user to include additional tables and SQL constraints that should be used to connect these tables according to Eq ( 4 ) .
Fig 10 illustrates an example for the matching of property offersSubject for a Department .
The frame also shows the resulting SQL query for the matching for debugging and program trace reasons .
Object property matching frame ( matching editor ) Fig 10 .
Object property matching frame ( matching editor ) .
Ontology files selection Fig 6 .
Ontology files selection .
Learning management system database settings dialog Fig 7 .
Learning management system database settings dialog .
Once the matchings have been finished , the Mapping Procedure generates the proper SQL queries and applies the Algorithm 1 over all databases and the ontology to map the database data into ontology class and property instances .
Fig 11 shows an snapshot of Protégé after the mapping of our example .
We may see the number of instances mapped in the Class Browser ( 600 students , 130 teachers , 4 departments , etc .
) , the URI of the teachers extracted in the instance browser , and the range instances for the object properties matched in the Individual Editor .
Snapshot of Protégé individuals tab after the mapping from the databases into… Fig 11 .
Snapshot of Protégé individuals tab after the mapping from the databases into ontology instances .
In the last decade , there has been a huge increase in the use of learning management systems for teaching and knowledge dissemination across the Web .
There have been approaches to give semantics to documents and content in this area , and to improve the users experience .
However , a gap is found when we try to integrate and give semantics to information inside the databases of LMSs .
In this work , we have proposed a model for the database integration of these systems using ontologies .
The approach described is semi-automatic : Firstly , an expert makes the association between classes and properties in the ontology with the corresponding tables and attributes in the database .
After that , an automatic procedure is applied to map the data from the database into ontology class and property instances .
The advantages of our proposal encompass that the previous normal data are given with semantics , being associated with ontology concepts .
Furthermore , the new storage ease the access to the content and the information sharing between the LMSs used .