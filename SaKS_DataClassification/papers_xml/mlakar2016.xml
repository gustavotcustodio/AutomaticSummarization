<article>
  <title>A hybrid differential evolution for optimal multilevel image thresholding</title>
  <abstract>
    <sentence>Image thresholding is a process for separating interesting objects within an image from their background.</sentence>
    <sentence>An optimal threshold’s selection can be regarded as a single objective optimization problem, where obtaining a solution can be computationally expensive and time-consuming, especially when the number of thresholds increases greatly.</sentence>
    <sentence>This paper proposes a novel hybrid differential evolution algorithm for selecting the optimal threshold values for a given gray-level input image, using the criterion defined by Otsu.</sentence>
    <sentence>The hybridization is done by adding a reset strategy, adopted from the Cuckoo Search, within the evolutionary loop of differential evolution.</sentence>
    <sentence>Additionally a study of different evolutionary or swarm-based intelligence algorithms for the purpose of thresholding, with a higher number of thresholds was performed, since many real-world applications require more than just a few thresholds for further processing.</sentence>
    <sentence>Experiments were performed on eleven real world images.</sentence>
    <sentence>The efficiency of the hybrid was compared to the cuckoo search and self-adaptive differential evolution, the original differential evolution, particle swarm optimization, and artificial bee colony where the results showed the superiority of the hybrid in terms of better segmentation results with the increased number of thresholds.</sentence>
    <sentence>Since the proposed method needs only two parameters adjusted, it is by far a better choice for real-life applications.</sentence>
  </abstract>
  <keywords>
    <keyword>Image segmentation</keyword>
    <keyword>Differential evolution</keyword>
    <keyword>Multilevel thresholding</keyword>
    <keyword>Otsu criterion</keyword>
    <keyword>Hybridization</keyword>
  </keywords>
  <section name="Introduction">
    <sentence>Image segmentation is an operation within the field of image processing for separating interesting objects within an image from the background based on the gray-level distribution of the pixels.</sentence>
    <sentence>If the image is split into two classes it is called bi-level thresholding and is extended to multilevel thresholding for separating the image into more than two classes.</sentence>
    <sentence>Thresholding techniques can be categorized into two categories, namely global and local thresholding.</sentence>
    <sentence>In regard to global thresholding a single threshold value from the entire image histogram is selected, while local thresholding operates on smaller regions within the image and selects multiple thresholds, one for each region.</sentence>
    <sentence>When comparing the methods, global thresholding is simpler and also easier to implement but it relies heavily on good illumination of the input image.</sentence>
    <sentence>Local thresholding methods overcome this drawback but are also computationally expensive and harder to implement.</sentence>
    <sentence>Whether we choose the global or local category, the probability density of the gray-level histogram can be handled by either a parametric or a non-parametric approach in order to find the optimal threshold.</sentence>
    <sentence>For parametric approaches, being computationally expensive, the statistical parameters of the classes are estimated and are heavily dependent on the initial conditions.</sentence>
    <sentence>The non-parametric approaches choose thresholds based on maximizing certain criteria, like between-class variance (Otsu, 1975) or various entropy measures (Kapur, Sahoo, &amp; Wong, 1985; Tsallis, 1988).</sentence>
    <sentence>In this work we adopted the between-class variance as the objective function for evaluating the efficiency of the selected thresholds.</sentence>
    <sentence>In the field of image thresholding heuristic methods have gained a lot of attention, since the exhaustive methods are often inefficient or simply computationally expensive.</sentence>
    <sentence>Although obtaining good results, meta-heuristic methods like particle swarm optimization, ant colony optimization, etc.</sentence>
    <sentence>Fister, Yang, Fister, Brest, and Fister (2013), have their drawbacks, which can be resolved through hybridization (Mlakar, Fister, &amp; Fister, 2016).</sentence>
    <sentence>These drawbacks are usually fast convergence to a sub-optimal solution (local optimum), poor segmentation results, when the number of thresholds increases greatly, and also the number of parameters which must be fine tuned prior to running the algorithm.</sentence>
    <sentence>The idea to overcome getting trapped in a local optimum is found in either adding domain knowledge of the problem to the search algorithm, or to hybridize the existing method with a mechanism to solve this problem.</sentence>
    <sentence>Hybrid methods exploit the good properties of different methods by joining them within an efficient solver for a given problem.</sentence>
    <sentence>Significant work has been done on optimal threshold selection using evolutionary algorithms (Ayala, dos Santos, Mariani, &amp; dos Santos Coelho, 2015; Maitra &amp; Chatterjee, 2008), while many hybrids have also been proposed.</sentence>
    <sentence>Ali, Ahn, and Pant (2014) compared the efficiency of Synergetic Differential Evolution (SDE) using two different evaluation criteria, one being approximation on an image histogram by a mixture of Gaussian distributions and the other being Kapur’s entropy (Kapur et al., 1985).</sentence>
    <sentence>Ayala et al.</sentence>
    <sentence>(2015) proposed a Beta Differential Evolution algorithm (BDE), to find the optimal thresholds of a given image by using Otsu’s criterion.</sentence>
    <sentence>Horng and Liou (2011) compared swarm intelligence algorithms using minimum class entropy.</sentence>
    <sentence>They proposed a firefly-based hybrid, which performed better against particle swarm (PSO) and quantum PSO.</sentence>
    <sentence>Sarkar, Das, and Chaudhuri (2015) employed DE with the minimum cross entropy for testing on color images.</sentence>
    <sentence>Akay (2013) made a study on an Artificial Bee Colony (ABC) and PSO by comparing various criteria.</sentence>
    <sentence>It was concluded that both algorithms performed equally well when the number of thresholds was 2, but the ABC using the Otsu criterion performed better when the number of thresholds excelled.</sentence>
    <sentence>Ouadfel and Meshoul (2013) designed a fully adaptive hybrid PSO, where the thresholds’ values are computed along with the number of thresholds to segment the image as well as possible.</sentence>
    <sentence>In a recent study by Ouadfel and Taleb-Ahmed (2016) they investigated two newer swarm intelligence algorithms, namely the Flower Pollination (FP) and Social Spider Optimization (SSO) algorithms to solve the image segmentation problem using Otsu’s criterion and Kapur entropy.</sentence>
    <sentence>Their results indicate that both FP and SSO outperformed other algorithms used in the study.</sentence>
    <sentence>Hammouche, Diaf, and Siarry (2010) performed a study on six meta heuristic techniques, where the results pointed out that the DE gave better quality results, while the PSO converged more quickly.</sentence>
    <sentence>Dey, Saha, Bhattacharyya, and Maulik (2014) proposed six different quantum inspired meta-heuristic methods, which work as a consensus for the multilevel thresholding problem.</sentence>
    <sentence>This article presents an efficient self-adaptive hybrid DE algorithm for the multilevel thresholding problem.</sentence>
    <sentence>The proposed method selects the optimal thresholds based on maximizing the between-class variance (Otsu, 1975).</sentence>
    <sentence>The main contributions of this paper are two-fold: (1) The introduction of a hybrid self-adaptive DE algorithm (hjDE) for the optimal thresholds selection by maximizing the between-class variance, where the experiments show that hjDE achieved the best results, (2) To present a study of different evolutionary or swarm-based intelligence algorithms on the impact of thresholding with a higher number of thresholds.</sentence>
    <sentence>To our knowledge most of the research community focuses mainly on a smaller number of thresholds, while in many real-life applications of segmentation (i.e.</sentence>
    <sentence>deep-space photo analysis, object recognition, video compression, ...) more than just a few thresholds are needed.</sentence>
    <sentence>The proposed hybrid also needs just two parameters adjusted, which makes it favorable for use in real-life applications.</sentence>
    <sentence>The rest of this paper is organized as follows.</sentence>
    <sentence>Section 2 presents the DE algorithm, and in Section 3 the cuckoo search is described.</sentence>
    <sentence>Image segmentation using Otsu’s method for selecting the optimal thresholds is presented in Section 4.</sentence>
    <sentence>Section 5 is dedicated to the proposed algorithm, within an experimental environment, using the images, while efficiency metric and individual encoding are presented in Section 6.</sentence>
    <sentence>In Section 7 the numerical and statistical results are presented and discussed.</sentence>
    <sentence>The paper is concluded with future work directions in Section 8.</sentence>
  </section>
  <section name="Differential evolution">
    <sentence>Differential Evolution (DE) (Storn &amp; Price, 1997) is a population based evolutionary algorithm used for continuous global optimization.</sentence>
    <sentence>It is simple, yet very effective at solving various real life problems.</sentence>
    <sentence>It has been modified and extended several times with various versions being proposed (Brest, Greiner, Boskovic, Mernik, &amp; Zumer, 2006).</sentence>
    <sentence>The idea of DE is a simple mathematical model, which is based on vector differences.</sentence>
    <sentence>The DE algorithm evolves a population of vectors, which represent the solutions to the problem, through generations.</sentence>
    <sentence>The population consists of Np vectors, where .</sentence>
    <sentence>In each generation depicted as g, a vector goes through a set of evolutionary operators, namely mutation, crossover and selection.</sentence>
    <sentence>A trial vector is produced using these operators, which competes with its parent based on fitness value for surviving into the next generation.</sentence>
    <sentence>Mutation is carried out for each population vector, which yields a mutant vector denoted as using a selected mutation strategy.</sentence>
    <sentence>Many mutation strategies have been proposed but for the purpose of this paper the ”rand/1” is used: (1) Indexes represent the random and mutually different integers generated within the interval while also being different from index i. F is a mutation scaling factor, which lies within the range [0, 1].</sentence>
    <sentence>When the mutant vector is generated, crossover is performed using the crossover rate Cr and the corresponding vector from the population as follows: (2) The crossover rate Cr is defined within the interval [0, 1] and it defines the probability of creating the trial vector parameters .</sentence>
    <sentence>The jrand index is responsible for the trial vector containing at least one value from the mutant vector .</sentence>
    <sentence>After the crossover, some values of the trial vector may fall out of bounds, meaning they must be mapped to the defined search space.</sentence>
    <sentence>We employed the following strategy (Zhang &amp; Sanderson, 2009): (3) and are vectors containing the lower and upper bounds of the problem.</sentence>
    <sentence>After the trial vector is repaired, the selection process takes place: (4) Each trial vector competes with its parent based on their fitness value f. The one with the better fitness value survives and is transferred to the next generation (Eq (4)).</sentence>
    <sentence>In a study by Neri and Tirronen (2010) it was concluded that a DE extension named jDE (self-adaptive differential evolution) performed better in terms of robustness and stability, where the main difference between the algorithms was the ways in which the control parameters behaved.</sentence>
    <sentence>In the original DE the scaling factor F and crossover rate Cr are constant, while in jDE (Brest et al., 2006) they are self-adaptive.</sentence>
    <sentence>In this paper we built a hybrid based on the jDE algorithm for threshold selection.</sentence>
  </section>
  <section name="Cuckoo search">
    <sentence>Cuckoo Search (CS) is a nature-inspired population based algorithm developed by Yang and Deb (2009).</sentence>
    <sentence>It belongs to the swarm intelligence based algorithms as it mimics the natural behavior of some cuckoo species and their brood parasitism.</sentence>
    <sentence>These cuckoo species lay their eggs in other birds’ nests, with the purpose of the host bird caring for their (cuckoo) offspring.</sentence>
    <sentence>To adapt the behavior of cuckoos for use in a computer program the authors idealized the following three rules: each cuckoo lays one egg at a time and dumps it in a randomly chosen nest; the nests with high quality eggs will be carried to the next generation; any egg laid by a cuckoo may be discovered by the host nest with a probability of pa.</sentence>
    <sentence>When the egg is discovered the host bird can get rid of the egg, or simply abandon the nest.</sentence>
    <sentence>In CS a new solution (for cuckoo i) is generated by taking a Lévy Flight using the following equation: (5) (6) where α denotes the step size, and is related to the size of the problem.</sentence>
    <sentence>Levy flights provide a random walk, whereas their random step lengths are drawn from a Levy distribution.</sentence>
    <sentence>The Lévy function can be changed according to the application.</sentence>
    <sentence>A Mantegnas algorithm is one of the Lévy functions.</sentence>
    <sentence>It has an infinite variance and infinite mean (Bhandari, Kumar, &amp; Singh, 2015).</sentence>
    <sentence>After a new population is generated a fraction of the worse nests are abandoned and new ones are built via Lévy flights at new locations.</sentence>
    <sentence>This mechanism is controlled by the switching probability pa.</sentence>
  </section>
  <section name="Image segmentation/thresholding">
    <sentence>In this presented section, we deal with the problem of multilevel gray image thresholding using the Otsu’s method for optimal threshold selection (Otsu, 1975).</sentence>
    <sentence>Image segmentation is a process of splitting an image into multiple segments, where the main goal is to simplify the representations of objects within the image for further processing.</sentence>
    <sentence>Segmentation is usually achieved by using a histogram of the image, which is a distribution of the gray-level pixels within the image.</sentence>
    <sentence>The difficulty of finding the optimal thresholds may not be straightforward for some images, as it depends on the shape of the histogram.</sentence>
    <sentence>These valleys may not be detected because the histogram may contain many wide valleys and peaks with different peak heights.</sentence>
    <sentence>Otsu’s method overcomes these problems, as it operates on the basis of pixel probabilities within the histogram.</sentence>
    <sentence>Otsu method Consider having an image, defined as an 2D gray-level intensity function f(x, y), where the value of f(x, y) is the gray level, ranging from 0 to with L being the number of distinct gray levels within the image.</sentence>
    <sentence>The number of pixels at intensity i is ni, with N being the total number of pixels within the image.</sentence>
    <sentence>The gray-level histogram can be normalized and regarded as a probability distribution: (7) Suppose we have two classes of pixels C0 and C1, which refer to the background and the object (or vice versa), separated by a threshold t. Pixels within the range belong to class C0, while pixels within belong to class C1.</sentence>
    <sentence>The probabilities of class occurrence are given by: (8) and (9) with their mean values defined as: (10) and (11) It can be verified easily that the following conditions are true: (12) where μT is the total mean level of the original image.</sentence>
    <sentence>The class variances of C0 and C1 are given by (13) In order to evaluate the quality of the threshold at level t, the following metrics (measurements of class separability) were introduced (Otsu, 1975): (14) where (15) are the within-class variance (), between-class variance (), and the total variance ( ).</sentence>
    <sentence>The problem of optimal threshold t selection is an optimization problem, where the goal is to maximize one of the objective criteria.</sentence>
    <sentence>The exhaustive search for the optimal threshold can be defined using the equation: (16) Eqs.</sentence>
    <sentence>(8)–(16) are defined for a binary classification problem but can be extended easily for use during multilevel thresholding.</sentence>
    <sentence>Eq (16) can be rewritten: (17) In this work the between class variance (Eq (17)) was selected as the objective function.</sentence>
  </section>
  <section name="Proposed algorithm - hjDE">
    <sentence>For the multilevel thresholding problem we propose a novel hybrid differential evolution algorithm (hjDE).</sentence>
    <sentence>We have introduced a reset strategy adopted from the CS (Yang &amp; Deb, 2009).</sentence>
    <sentence>The main idea of the reset in CS is to explore the search space better, and thus avoid getting trapped within a local optimum.</sentence>
    <sentence>The resetting is regulated using the switching probability pa, that determines when the worse of the n individuals are replaced by new randomly-generated solutions (using the Levy distribution).</sentence>
    <sentence>Yang and Deb (2009) explain that the switching probability should be set at 25%, since the better results are obtained at that setting.</sentence>
    <sentence>The idea of using the switching probability in a DE algorithm has been introduced by Musigawan, Chiewchanwattana, and Sunat (2012), where the abandon operator takes place right before each loop of the algorithm.</sentence>
    <sentence>In our work the abandon operator is used differently as follows: in the main evolutionary loop of the DE algorithm the switching probability dictates whether a trial vector is generated using Eq (1) or a reset by taking a Lévy flight from the best individual within the population.</sentence>
    <sentence>The algorithm is presented in Algorithm 1 for easier understanding.</sentence>
    <sentence>Algorithm 1. hjDE algorithm.</sentence>
    <sentence>Individual encoding and control parameters As we used DE for optimal multilevel threshold selection, a sense representation of the problem must be formulated.</sentence>
    <sentence>An individual, representing the optimal thresholds is encoded in a DE vector as follows: (18) where d is the number of thresholds we want to find.</sentence>
    <sentence>All the dimensions are limited by the same lower and upper bounds; xi ∈ [0, 255].</sentence>
    <sentence>As we are using the jDE algorithm the control parameters F and Cr are associated with each individual.</sentence>
    <sentence>These control parameters are updated prior to their use, using the following equations (Brest et al., 2006): (19) (20) The constants τ1 and τ2 were set to 0.1, while the Fl = 0.1 and 0.9.</sentence>
    <sentence>Unlike some algorithms, the proposed hjDE has only two parameters (Np and pa) to fine tune, which makes it preferable for real-life applications (see Table 1).</sentence>
    <sentence>By adding the resetting strategy, a better exploitation property of the algorithm is achieved, thus potentially obtaining better results.</sentence>
    <sentence>Table 1.</sentence>
    <sentence>Parameters of comparing algorithms.</sentence>
    <sentence>Algorithm Parameter Value DE Population size 50 Scaling Factor 0.5 Crossover probability 0.2 jDE Population size 50 Scaling Factor 0.5 Crossover probability 0.9 PSO Swarm size 200 Cognitive and social acceleration 2, 2 CS Number of nests 25 Step size (α) 1 Scale factor (β) 1.5 Abandon nest probability (pa) 0.25 ABC Swarm size 16 Max trial 10</sentence>
  </section>
  <section name="Experimental environment">
    <sentence>This section presents the experimental environment for our method.</sentence>
    <sentence>Firstly the benchmark images are described, then the settings of the algorithm are discussed briefly and also the quality metric is defined, as used to evaluate the quality of segmentation.</sentence>
    <sentence>Benchmark images In this study eleven gray scale images were taken from literature: Lena, Pirate, Cameraman, Jetplane, Bird, Ostrich, Boat, Butterfly, Elephants, Starfish, and Fish.</sentence>
    <sentence>The test images varied in size and were in non-compressed format.</sentence>
    <sentence>The test images are depicted in Fig 1.</sentence>
    <sentence>Fig 1.</sentence>
    <sentence>Test images, (a) Lena, (b) Pirate, (c) Cameraman, (d) Jetplane, (e) Bird, (f) Ostrich, (g) Boat, (h) Butterfly, (i) Elephants, (j) Starfish, and (k) Fish.</sentence>
    <sentence>Experimental settings Five different evolutionary algorithms were selected for comparison with the proposed hjDE.</sentence>
    <sentence>As the results of many research papers do not include the sources of the test images, it is hard to make a fair comparison.</sentence>
    <sentence>The reason for this lies in the image format and, consequently, impacts on the shape of the histogram.</sentence>
    <sentence>For comparison purposes the following algorithms were considered for comparison: CS (Yang &amp; Deb, 2009), original DE (Storn &amp; Price, 1997), jDE (Brest et al., 2006), ABC (Karaboga &amp; Basturk, 2007), and PSO (Horng &amp; Liou, 2011), which were implemented according to the information provided within their respective papers.</sentence>
    <sentence>In order to provide for a fair comparison, the stopping criteria for all algorithms’ runs was set to 10000 function evaluations, with a total of 30 runs per algorithm (Ouadfel &amp; Taleb-Ahmed, 2016).</sentence>
    <sentence>Information regarding the various parameters of each algorithm used in this study are presented in Table 1, taken from Bhandari et al.</sentence>
    <sentence>(2015).</sentence>
    <sentence>The parameters of the jDE were taken from Brest et al.</sentence>
    <sentence>(2006).</sentence>
    <sentence>The hjDE algorithm has 2 user-specified parameters, which must be set prior to running the experiment.</sentence>
    <sentence>As the scaling factor F and crossover rate Cr are self-adaptive, only the population size Np and the switching probability must be finely tuned.</sentence>
    <sentence>Population size of the hjDE was set at 50, while the switching probability pa was set at 0.25.</sentence>
    <sentence>All experiments were evaluated on the test images with the following number of thresholds: 6, 10, 15, 20, and 30.</sentence>
    <sentence>The reason for such thresholds selection was to show the performance of our algorithm, when the number of thresholds increased greatly.</sentence>
    <sentence>The coding of the algorithm was done in C .</sentence>
    <sentence>Segmented image quality metrics In order to evaluate the segmented image quality, two well known image processing metrics such as Peak Signal-to-Noise Ratio (PSNR) and Structural-Similarity Index (SSIM).</sentence>
    <sentence>Both metrics are described in the remainder of this subsection.</sentence>
    <sentence>The PSNR measure depends directly on the intensity values in the image, and indicates the accuracy of the final reconstructed image.</sentence>
    <sentence>In other words, it gives the similarity of an image against a reference image based on the MSEs of each pixel.</sentence>
    <sentence>It is calculated as follows: (21) (22) where I and J are the original and segmented images, respectively.</sentence>
    <sentence>SSIM provides an assessment on image quality, based on the degradation of structural information and is calculated as (23): (23) where μx and μy stand for the mean intensities of images I and J, σx and σy represent standard deviations of I and J, and σxy is the local correlation coefficient between I and J. C1 and C2 are constants, which are included to avoid instability when is close to zero ().</sentence>
    <sentence>SSIM takes values within the range with a higher value indicating a better performance.</sentence>
  </section>
  <section name="Results">
    <sentence>This section presents the numerical results regarding the optimal multilevel threshold selection.</sentence>
    <sentence>The evaluation criteria in this study maximizes the between-class-variance, which is described in Section 4.</sentence>
    <sentence>The segmentation qualities of solutions found by the mentioned objective function is also compared using the PSNR and SSIM metrics.</sentence>
    <sentence>An analyze of execution times is also provided for each algorithm.</sentence>
    <sentence>The mean objective values and mean times are reported in Table 3.</sentence>
    <sentence>The overall best results are marked in bold face.</sentence>
    <sentence>The hjDE algorithm achieved the best overall result in 49 instances while, the original CS achieved the best mean result 6 times.</sentence>
    <sentence>No other algorithm achieved the best mean value.</sentence>
    <sentence>Based on the mean execution of the algorithms the fastest method was ABC, although it was not able to achieve the best mean objective value.</sentence>
    <sentence>The best explanation for this phenomenon would be in the premature convergence of the ABC towards a local optimum in the search space, whereas the hjDE obtained the best results, despite not being the fastest.</sentence>
    <sentence>Tables 4 and 5 depict the results of the segmentation quality metrics.</sentence>
    <sentence>The mean and best PSNR and SSIM values are reported.</sentence>
    <sentence>The best values are again marked in bold face.</sentence>
    <sentence>The last row of Tables 4 and 5 indicate the number of times each algorithm achieved the best result.</sentence>
    <sentence>The hjDE achieved the best mean result 36 times, while the CS was second with 11 according to the PSNR metric.</sentence>
    <sentence>In the case of best obtained results the hjDE was the winner 31 times and the CS just 10.</sentence>
    <sentence>When comparing the results of the SSIM metric the results are very similar.</sentence>
    <sentence>In the case of best mean results the hjDE was the winner 35 times, while CS was in second place with just 9 wins and, lastly, the best results according to the SSIM metric were obtained 35 times by the hjDE and 8 times by CS.</sentence>
    <sentence>Other algorithms obtained less then 6 wins.</sentence>
    <sentence>In summary the best performing algorithm was the proposed hjDE, which outperformed all other algorithms in all metrics used in this study.</sentence>
    <sentence>Table 5.</sentence>
    <sentence>Comparison of best and mean SSIM values computed by DE, jDE, PSO, ABC, CS, and hjDE using Otsu criterion.</sentence>
    <sentence>Test image M Mean SSIM values Best SSIM values DE jDE PSO ABC CS hjDE DE jDE PSO ABC CS hjDE Bird 6 0.857061 0.857061 0.847551 0.857687 0.860999 0.85698 0.876384 0.876384 0.875414 0.883408 0.879554 0.856980 10 0.928401 0.928401 0.909484 0.926203 0.922194 0.932187 0.932516 0.932516 0.917664 0.932651 0.931838 0.932787 15 0.960601 0.960601 0.950073 0.948819 0.957016 0.958708 0.960601 0.960601 0.950073 0.957387 0.958474 0.962263 20 0.968386 0.968386 0.951276 0.969549 0.968337 0.974159 0.972962 0.972962 0.965818 0.971919 0.972355 0.977692 30 0.988675 0.988675 0.979642 0.989113 0.989308 0.993977 0.991827 0.991827 0.985883 0.989113 0.990400 0.995390 Butterfly 6 0.840219 0.840219 0.832538 0.842831 0.840387 0.841816 0.845870 0.845870 0.841497 0.847826 0.848123 0.841816 10 0.909213 0.909213 0.851582 0.906272 0.908632 0.905671 0.909213 0.909213 0.901391 0.906272 0.908632 0.907648 15 0.934168 0.934168 0.902514 0.933447 0.938043 0.947489 0.944195 0.944195 0.928493 0.941800 0.946478 0.948927 20 0.954628 0.954628 0.945799 0.954847 0.959194 0.967888 0.962092 0.962092 0.947094 0.957643 0.965166 0.969182 30 0.983519 0.983519 0.978763 0.982413 0.988258 0.992256 0.986520 0.986520 0.980720 0.985316 0.988540 0.992642 Cameraman 6 0.787999 0.787999 0.759081 0.801234 0.786936 0.768931 0.809081 0.809081 0.814883 0.818750 0.800385 0.796090 10 0.871913 0.871913 0.841078 0.856838 0.845695 0.866708 0.884921 0.884921 0.893070 0.880488 0.875739 0.867904 15 0.892258 0.892258 0.879913 0.90905 0.913435 0.925388 0.930601 0.930601 0.913170 0.922853 0.921517 0.929975 20 0.951417 0.951417 0.884235 0.940078 0.934328 0.951953 0.951417 0.951417 0.941370 0.951213 0.954049 0.956886 30 0.981718 0.981718 0.965801 0.979427 0.982446 0.989015 0.982876 0.982876 0.973690 0.984749 0.982741 0.990009 Elephants 6 0.833611 0.833611 0.811721 0.83072 0.833791 0.827947 0.834395 0.834395 0.843024 0.833284 0.835147 0.827947 10 0.881028 0.881028 0.867087 0.874191 0.879055 0.876007 0.882653 0.882653 0.879102 0.885175 0.885623 0.876514 15 0.909366 0.909366 0.896431 0.915535 0.920353 0.923865 0.924594 0.924594 0.903103 0.922576 0.924486 0.924704 20 0.938541 0.938541 0.931187 0.935961 0.938817 0.948543 0.945758 0.945758 0.936301 0.941596 0.949844 0.951250 30 0.980511 0.980511 0.965259 0.972881 0.979769 0.984687 0.982092 0.982092 0.969799 0.979011 0.981691 0.987272 Fish 6 0.823955 0.823955 0.827198 0.811772 0.817335 0.825409 0.827093 0.827093 0.827198 0.826071 0.825972 0.825409 10 0.897292 0.897292 0.860819 0.897209 0.898296 0.906167 0.904072 0.904072 0.894791 0.904373 0.906233 0.908704 15 0.936008 0.936008 0.913739 0.937096 0.946953 0.951442 0.943579 0.943579 0.934540 0.943772 0.949606 0.951442 20 0.956323 0.956323 0.943863 0.963548 0.96589 0.966144 0.962147 0.962147 0.952764 0.963548 0.967624 0.970549 30 0.985641 0.985641 0.977402 0.984386 0.986655 0.991592 0.987314 0.987314 0.981847 0.988187 0.988181 0.992697 Jetplane 6 0.753671 0.753671 0.732342 0.753361 0.751297 0.753416 0.788404 0.788404 0.809929 0.802377 0.790331 0.753735 10 0.85643 0.85643 0.834524 0.863846 0.871514 0.868111 0.900615 0.900615 0.862443 0.887042 0.892645 0.868218 15 0.90659 0.90659 0.918289 0.886999 0.923834 0.904116 0.947513 0.947513 0.926563 0.943623 0.955850 0.920270 20 0.908287 0.908287 0.871393 0.907057 0.973103 0.925977 0.964080 0.964080 0.951908 0.964577 0.973103 0.941539 30 0.989745 0.989745 0.976471 0.985157 0.98909 0.985171 0.989745 0.989745 0.986822 0.988365 0.991148 0.994701 Lena 6 0.802993 0.802993 0.788215 0.799016 0.794398 0.803826 0.808511 0.808511 0.806116 0.808287 0.800267 0.803826 10 0.853253 0.853253 0.838975 0.856405 0.86469 0.869235 0.870019 0.870019 0.856787 0.864630 0.866218 0.870258 15 0.905731 0.905731 0.890181 0.902272 0.920576 0.917766 0.922058 0.922058 0.905200 0.917416 0.925755 0.921214 20 0.943231 0.943231 0.911793 0.941632 0.948579 0.944401 0.945025 0.945025 0.921967 0.941807 0.949857 0.954262 30 0.978141 0.978141 0.96767 0.972046 0.98163 0.985401 0.980892 0.980892 0.969423 0.980736 0.983926 0.989482 Ostrich 6 0.872218 0.872218 0.871151 0.86344 0.878606 0.873236 0.879764 0.879764 0.878334 0.882698 0.883998 0.873236 10 0.921555 0.921555 0.915379 0.920494 0.924675 0.922567 0.925074 0.925074 0.915379 0.922458 0.925752 0.923732 15 0.94663 0.94663 0.934141 0.941871 0.952021 0.953899 0.951264 0.951264 0.944888 0.949107 0.953534 0.954546 20 0.961919 0.961919 0.948369 0.959208 0.958907 0.966696 0.965866 0.965866 0.955361 0.962915 0.966108 0.971345 30 0.985678 0.985678 0.977476 0.977917 0.98651 0.991321 0.987996 0.987996 0.981797 0.985682 0.987961 0.992331 Pirate 6 0.828108 0.828108 0.795785 0.826499 0.828935 0.829841 0.829360 0.829360 0.824010 0.829287 0.830301 0.829841 10 0.893962 0.893962 0.867095 0.89303 0.888994 0.901212 0.901164 0.901164 0.888516 0.897935 0.902723 0.903351 15 0.932638 0.932638 0.908877 0.936322 0.937479 0.943136 0.937517 0.937517 0.930482 0.939667 0.944481 0.944525 20 0.953162 0.953162 0.936636 0.951976 0.959906 0.960378 0.960423 0.960423 0.951106 0.961823 0.964404 0.967861 30 0.983035 0.983035 0.972109 0.985594 0.984026 0.98972 0.988091 0.988091 0.982679 0.986607 0.987654 0.992393 Starfish 6 0.823955 0.823955 0.827198 0.811772 0.817335 0.825409 0.827093 0.827093 0.827198 0.826071 0.825972 0.825409 10 0.897292 0.897292 0.860819 0.897209 0.898296 0.906167 0.904072 0.904072 0.894791 0.904373 0.906233 0.908704 15 0.936008 0.936008 0.913739 0.937096 0.946953 0.951442 0.943579 0.943579 0.934540 0.943772 0.949606 0.951442 20 0.956323 0.956323 0.943863 0.963548 0.96589 0.966144 0.962147 0.962147 0.948204 0.963548 0.967624 0.970549 30 0.985641 0.985641 0.977402 0.984386 0.986655 0.991592 0.987044 0.987044 0.981401 0.986642 0.988181 0.992697 Boat 6 0.839371 0.839371 0.829157 0.834999 0.832982 0.842409 0.850348 0.850348 0.857718 0.850331 0.845806 0.842409 10 0.908061 0.908061 0.879037 0.908923 0.901573 0.908206 0.916979 0.916979 0.906544 0.916325 0.913606 0.918304 15 0.942123 0.942123 0.914758 0.943345 0.948313 0.953394 0.946019 0.946019 0.938222 0.949071 0.950612 0.954426 20 0.957307 0.957307 0.952572 0.951437 0.964979 0.970842 0.965728 0.965728 0.960189 0.963276 0.968302 0.972144 30 0.986868 0.986868 0.977709 0.982841 0.986877 0.991834 0.986868 0.986868 0.982321 0.987981 0.989583 0.992597 Best 6 6 2 3 9 35 4 4 6 2 8 35 7.1.</sentence>
    <sentence>Statistical analysis In order to assess the results statistically, the Friedman and Wilcoxon tests were conducted at significance level 0.05.</sentence>
    <sentence>The Friedman test captured the result of locating optimal thresholds on all eleven images used in the experiments according to all observed numbers of thresholds.</sentence>
    <sentence>Five algorithms were compared according to 33 variables ( ; where n denotes the number of images in the experiment, while m is the number of used measures).</sentence>
    <sentence>The used measures were: best and mean objective values and standard deviation.</sentence>
    <sentence>Five Friedman tests were performed according to different numbers of thresholds (i.e., 6, 10, 15, 20, and 30).</sentence>
    <sentence>The results of the Friedman tests are presented in Fig 2, where the squares represent the average ranks and the lines represent confidence intervals.</sentence>
    <sentence>Smaller ranks indicate a better performance of the algorithm.</sentence>
    <sentence>When the intervals of any two algorithms do not overlap, they are significantly different.</sentence>
    <sentence>This is also depicted in Table 2, where average ranks along with confidence intervals are represented numerically.</sentence>
    <sentence>The † symbol indicates the algorithm is significantly different from the best algorithm, marked with ‡, which was the hjDE algorithm in all cases, except for .</sentence>
    <sentence>Considering Table 2 and Fig 2, the hjDE was significantly different from DE, jDE, ABC, and PSO for all thresholds, while no significant difference was found with the algorithm CS.</sentence>
    <sentence>To obtain more powerful statistical results, a non-parametric signed rank Wilcoxon test was used on all 55 cases of the experiment (11 images and 5 different thresholds).</sentence>
    <sentence>As a null hypothesis, it is assumed that there is no significant difference between the six algorithms.</sentence>
    <sentence>The alternative hypothesis considers a significant difference between the six algorithms.</sentence>
    <sentence>The results of the Wilcoxon test are presented in Table 6, where the proposed hjDE clearly outperforms all other algorithms.</sentence>
    <sentence>The hjDE was significantly better than DE and jDE 54 times, and also 55 times better than PSO and ABC.</sentence>
    <sentence>Even though the Friedman test showed no significant difference from the CS, the result of the Wilcoxon test in Table 6 show that hjDE was significantly better in 46 instances.</sentence>
    <sentence>These results also prove that the hybridization of jDE with the switching probability strategy of the CS was successful.</sentence>
    <sentence>Fig 2.</sentence>
    <sentence>Graphical results of Friedman’s non-parametric tests.</sentence>
    <sentence>Table 2.</sentence>
    <sentence>Critical intervals for the results of Friedman tests, .</sentence>
    <sentence>T = 6 T = 10 T = 15 T = 20 T = 30 Rank CI Sign.</sentence>
    <sentence>Rank CI Sign.</sentence>
    <sentence>Rank CI Sign.</sentence>
    <sentence>Rank CI Sign.</sentence>
    <sentence>Rank CI Sign.</sentence>
    <sentence>DE 3.621 [3.19221, 4.05021] † 3.651 [3.22252, 4.08052] † 3.803 [3.37403, 4.23203] † 3.954 [3.52555, 4.38355] † 3.954 [3.52555, 4.38355] † jDE 3.621 [3.19221, 4.05021] † 3.651 [3.22252, 4.08052] † 3.803 [3.37403, 4.23203] † 3.954 [3.52555, 4.38355] † 3.954 [3.52555, 4.38355] † PSO 4.333 [3.90433, 4.76233] † 4.333 [3.90433, 4.76233] † 4.333 [3.90433, 4.76233] † 4.333 [3.90433, 4.76233] † 4.333 [3.90433, 4.76233] † ABC 4.090 [3.66191, 4.51991] † 4.121 [3.69221, 4.55021] † 4.212 [3.78312, 4.64112] † 4.090 [3.66191, 4.51991] † 4.060 [3.63161, 4.48961] † CS 2.787 [2.35888, 3.21688] 2.636 [2.20736, 3.06536] 2.545 [2.11645, 2.97445] 2.303 [1.87403, 2.73203] ‡ 2.393 [1.96494, 2.82294] hjDE 2.545 [2.11645, 2.97445] ‡ 2.606 [2.17706, 3.03506] ‡ 2.303 [1.87403, 2.73203] ‡ 2.363 [1.93464, 2.79264] 2.303 [1.87403, 2.73203] ‡ Table 3.</sentence>
    <sentence>Comparison of best mean objective values, with mean CPU times computed by DE, jDE, PSO, ABC, CS, and hjDE using Otsu criterion.</sentence>
    <sentence>Test image M Mean objective values CPU Time(s) DE jDE PSO ABC CS hjDE DE jDE PSO ABC CS hjDE Bird 6 0.956491 0.956491 0.948491 0.955146 0.956505 0.957352 0.094900 0.099700 0.441300 0.058430 0.096530 0.096900 10 0.979936 0.979936 0.972449 0.978823 0.980784 0.981528 0.087230 0.085530 0.235200 0.064200 0.108400 0.240400 15 0.989099 0.989099 0.98388 0.987815 0.98961 0.990711 0.096600 0.099570 0.204800 0.072270 0.105700 0.359300 20 0.992727 0.992727 0.988702 0.991882 0.993421 0.994019 0.097170 0.097130 0.237700 0.058870 0.121200 0.394300 30 0.995733 0.995733 0.993428 0.995087 0.996437 0.996573 0.109200 0.107300 0.221000 0.073470 0.122500 0.381800 Butterfly 6 0.981503 0.981503 0.97797 0.981276 0.981796 0.981953 0.088630 0.089930 0.388800 0.060430 0.096370 0.100100 10 0.991749 0.991749 0.988459 0.99142 0.991982 0.992473 0.098600 0.093870 0.276700 0.065370 0.109700 0.268900 15 0.995639 0.995639 0.993362 0.995325 0.996032 0.996296 0.086900 0.085670 0.235500 0.068900 0.115500 0.343400 20 0.997122 0.997122 0.995777 0.99696 0.997557 0.997688 0.099130 0.099600 0.285800 0.065630 0.118600 0.346700 30 0.998335 0.998335 0.997592 0.998221 0.998724 0.998731 0.099300 0.102100 0.233300 0.067000 0.117300 0.380000 Cameraman 6 0.985077 0.985077 0.982433 0.984736 0.985113 0.985091 0.154900 0.155100 0.691700 0.148000 0.175200 0.140700 10 0.993457 0.993457 0.990892 0.993132 0.993493 0.994074 0.166000 0.154000 0.384300 0.147100 0.194600 0.435600 15 0.99625 0.99625 0.994673 0.99596 0.996439 0.996752 0.192100 0.159700 0.440400 0.160800 0.209500 0.653700 20 0.997464 0.997464 0.996244 0.997259 0.997661 0.997925 0.188000 0.155500 0.422200 0.150800 0.191300 0.687900 30 0.998525 0.998525 0.997758 0.998361 0.99875 0.998852 0.189500 0.174800 0.403100 0.200600 0.197800 0.696800 Elephants 6 0.979187 0.979187 0.976045 0.978972 0.979388 0.979496 0.108100 0.095530 0.458700 0.049000 0.079270 0.103700 10 0.990744 0.990744 0.987162 0.990391 0.991224 0.991632 0.086600 0.088930 0.237600 0.063300 0.093900 0.318700 15 0.995022 0.995022 0.992478 0.994686 0.995527 0.99571 0.092000 0.097630 0.187200 0.075830 0.095000 0.334100 20 0.996673 0.996673 0.995154 0.996503 0.997228 0.99728 0.103200 0.103900 0.218100 0.066270 0.104000 0.343700 30 0.99805 0.99805 0.997197 0.997948 0.998545 0.998496 0.111400 0.107200 0.295800 0.066630 0.111400 0.388700 Fish 6 0.980389 0.980389 0.977729 0.980247 0.980672 0.980854 0.086300 0.083470 0.431800 0.067300 0.089270 0.123500 10 0.991781 0.991781 0.989423 0.991495 0.991744 0.992512 0.086900 0.082730 0.261900 0.051900 0.104700 0.305900 15 0.995618 0.995618 0.993981 0.995441 0.99576 0.996235 0.093270 0.094670 0.220500 0.057300 0.106900 0.341400 20 0.997128 0.997128 0.996002 0.996956 0.997378 0.99763 0.116300 0.109700 0.245600 0.081230 0.107400 0.351200 30 0.998351 0.998351 0.997755 0.998283 0.998591 0.998732 0.126400 0.104500 0.259400 0.060500 0.106100 0.351800 Jetplane 6 0.978622 0.978622 0.974054 0.978318 0.979204 0.979191 0.182100 0.166500 0.692900 0.141500 0.171600 0.292900 10 0.990687 0.990687 0.986516 0.990107 0.991077 0.991623 0.158500 0.166700 0.431900 0.156900 0.170300 0.504600 15 0.994952 0.994952 0.992109 0.994401 0.995208 0.995494 0.174700 0.180100 0.428900 0.162400 0.196800 0.639000 20 0.996725 0.996725 0.994721 0.99612 0.997035 0.997107 0.187900 0.184500 0.285700 0.170900 0.190400 0.702700 30 0.998109 0.998109 0.996942 0.997651 0.99843 0.998328 0.235500 0.204400 0.391700 0.169700 0.193200 0.637600 Lena 6 0.976374 0.976374 0.970903 0.975787 0.976331 0.976974 0.177100 0.175400 0.724500 0.136900 0.169300 0.155900 10 0.98873 0.98873 0.984366 0.98803 0.989191 0.989764 0.168500 0.159400 0.579500 0.147500 0.181800 0.437200 15 0.99367 0.99367 0.990695 0.993201 0.994014 0.994549 0.174800 0.164900 0.677700 0.157700 0.188800 0.591100 20 0.995735 0.995735 0.993414 0.995409 0.996259 0.996555 0.178600 0.182400 0.479400 0.142800 0.202800 0.669300 30 0.997483 0.997483 0.996374 0.997257 0.997969 0.998053 0.176900 0.184900 0.556700 0.165500 0.185200 0.713400 Ostrich 6 0.961367 0.961367 0.954732 0.960491 0.961795 0.962391 0.093400 0.087300 0.452400 0.065670 0.082730 0.108100 10 0.981687 0.981687 0.975261 0.980567 0.982444 0.983243 0.096870 0.103100 0.169500 0.060570 0.099170 0.300600 15 0.989923 0.989923 0.985718 0.988694 0.990604 0.99124 0.101300 0.096930 0.251900 0.070570 0.106400 0.350700 20 0.993284 0.993284 0.989815 0.992419 0.993964 0.994481 0.091400 0.097000 0.252300 0.063830 0.109400 0.373500 30 0.996052 0.996052 0.99419 0.995447 0.996823 0.996814 0.108500 0.112300 0.187400 0.075130 0.119800 0.372600 Pirate 6 0.977869 0.977869 0.973279 0.97737 0.977945 0.978373 0.181400 0.157700 0.659700 0.151300 0.149300 0.206300 10 0.990057 0.990057 0.986435 0.98935 0.990134 0.990875 0.167400 0.161000 0.621600 0.154100 0.164800 0.450300 15 0.994462 0.994462 0.992256 0.994035 0.994663 0.995261 0.147400 0.143000 0.624900 0.185100 0.168800 0.563000 20 0.996245 0.996245 0.994601 0.995977 0.996596 0.99691 0.147700 0.150400 0.583800 0.159800 0.171300 0.689400 30 0.997784 0.997784 0.996908 0.997636 0.998146 0.998264 0.195600 0.189200 0.584300 0.226100 0.184600 0.670100 Starfish 6 0.973207 0.973207 0.968935 0.972687 0.973462 0.973732 0.093600 0.096670 0.367200 0.053800 0.095930 0.125600 10 0.987784 0.987784 0.983504 0.987443 0.988303 0.98891 0.089930 0.089030 0.233500 0.063470 0.101700 0.268600 15 0.99346 0.99346 0.99067 0.993019 0.99399 0.994464 0.096730 0.093230 0.201000 0.067970 0.100800 0.349100 20 0.995734 0.995734 0.993643 0.995518 0.996287 0.996566 0.098300 0.099470 0.300600 0.053370 0.121600 0.341500 30 0.997582 0.997582 0.996544 0.997458 0.998026 0.998166 0.097770 0.100200 0.170800 0.048270 0.120800 0.365700 Boat 6 0.982307 0.982307 0.978447 0.981972 0.982363 0.982668 0.082030 0.081500 0.316100 0.061670 0.082470 0.089100 10 0.991465 0.991465 0.9883 0.991162 0.991953 0.992087 0.093500 0.090170 0.208200 0.063230 0.105200 0.248200 15 0.995365 0.995365 0.993134 0.995091 0.995922 0.996046 0.093330 0.097200 0.210000 0.069930 0.104100 0.355400 20 0.996956 0.996956 0.995477 0.996787 0.997466 0.997505 0.104500 0.114200 0.205900 0.060330 0.117400 0.358900 30 0.998251 0.998251 0.997518 0.99814 0.998697 0.99868 0.098500 0.096800 0.286000 0.055600 0.114000 0.347200 Table 4.</sentence>
    <sentence>Comparison of best and mean PSNR values computed by DE, jDE, PSO, ABC, CS, and hjDE using Otsu criterion.</sentence>
    <sentence>Test image M Mean PSNR values Best PSNR values DE jDE PSO ABC CS hjDE DE jDE PSO ABC CS hjDE Bird 6 23.9717 23.9717 23.8703 23.486 23.9373 23.8738 24.739900 24.739900 24.180200 24.854500 24.907100 23.873800 10 28.7993 28.7993 27.3172 28.8125 28.8459 29.6523 29.581800 29.581800 28.031400 29.513300 29.638400 29.690500 15 32.3279 32.3279 31.5932 31.8646 32.602 33.4507 32.946900 32.946900 31.593200 32.694000 33.218000 33.689300 20 35.2376 35.2376 32.716 34.4871 35.1052 36.3323 35.751200 35.751200 33.284100 35.464800 35.729300 36.728600 30 41.2124 41.2124 38.2993 41.7292 41.2512 42.896 42.242400 42.242400 39.369800 41.729200 42.090800 44.531400 Butterfly 6 23.3856 23.3856 22.663 23.4676 23.4761 23.6054 23.846100 23.846100 23.245500 23.807100 23.751900 23.605400 10 27.8903 27.8903 24.8552 27.4375 27.8489 27.7986 27.890300 27.890300 27.467600 27.704300 27.848900 27.990300 15 30.5923 30.5923 27.6014 30.3472 30.6287 31.7007 31.482900 31.482900 29.590600 31.133800 31.407800 31.905300 20 32.909 32.909 30.9583 32.6484 33.3828 34.7007 33.669500 33.669500 32.209200 33.385900 34.164900 34.739500 30 39.2726 39.2726 37.4482 38.0999 39.6761 42.4392 39.578400 39.578400 38.163100 39.565900 40.443500 42.439200 Cameraman 6 22.7895 22.7895 16.9019 23.5377 22.4435 19.4838 23.722700 23.722700 23.441000 23.979200 23.406100 23.044400 10 26.5619 26.5619 21.2161 26.6933 26.5026 27.0569 28.323400 28.323400 27.493500 28.237900 27.962500 27.244000 15 29.0585 29.0585 23.6799 27.9281 30.8788 31.8868 32.003200 32.003200 30.811700 31.324200 31.529500 32.419900 20 34.0482 34.0482 27.5161 33.2422 32.464 34.9134 34.062900 34.062900 32.478700 34.303100 34.709400 35.383600 30 39.9932 39.9932 36.8591 39.8405 39.9348 42.4276 40.455400 40.455400 38.278600 41.067000 40.722100 43.140700 Elephants 6 25.285 25.285 23.0221 25.1266 25.3227 24.9624 25.342200 25.342200 25.191400 25.370200 25.385400 24.962400 10 29.364 29.364 27.3283 29.1602 29.4546 29.5828 29.536800 29.536800 28.271100 29.434200 29.586400 29.590100 15 32.5044 32.5044 29.6572 32.4707 32.7775 33.3954 33.082900 33.082900 31.124600 32.741800 32.942700 33.465700 20 34.9077 34.9077 32.8827 34.4593 34.9137 36.2247 35.692100 35.692100 34.204400 35.168600 35.931200 36.400900 30 41.4588 41.4588 38.7014 40.2825 41.4335 43.0721 42.323000 42.323000 39.835300 41.709500 42.014800 43.987800 Fish 6 22.6128 22.6128 22.2929 22.6749 22.7703 22.7851 22.927100 22.927100 22.801400 22.940200 22.900400 22.791300 10 26.7182 26.7182 24.9786 26.5114 26.5727 27.2332 27.491100 27.491100 26.427200 27.098300 27.201100 27.265400 15 29.8954 29.8954 26.9214 29.9095 30.8178 30.4493 30.744200 30.744200 29.979400 31.119900 30.936600 31.059300 20 31.7299 31.7299 28.6323 32.9614 33.3077 33.6331 33.411200 33.411200 32.024300 33.197700 33.350700 34.195100 30 39.0619 39.0619 36.4215 37.3626 38.89 41.1424 39.385700 39.385700 37.730200 39.677700 39.449900 42.033700 Jetplane 6 20.642 20.642 18.2665 19.432 20.2172 20.6627 21.984200 21.984200 23.327000 22.415100 22.077300 20.662900 10 24.5167 24.5167 24.3499 24.4419 27.2784 24.6688 28.837800 28.837800 27.170700 28.000600 28.211700 24.681300 15 28.4639 28.4639 31.0797 25.1995 30.9767 26.742 33.123400 33.123400 31.275400 32.865200 33.627500 29.587900 20 26.9571 26.9571 24.0351 26.8801 35.9249 29.331 35.547200 35.547200 33.866600 35.057100 36.604500 30.818000 30 41.5167 41.5167 38.6377 40.3555 42.0658 40.2161 41.782400 41.782400 40.746900 41.250700 42.875900 44.340700 Lena 6 21.9103 21.9103 20.916 22.2839 23.1066 21.9361 22.538100 22.538100 23.724200 22.793100 23.106600 21.936100 10 25.4999 25.4999 22.4462 24.6582 25.9014 26.0809 27.417800 27.417800 27.006300 26.937300 27.784000 26.090800 15 27.4652 27.4652 24.6542 25.5865 32.1751 30.1433 31.660700 31.660700 30.586300 31.213500 32.175100 31.285000 20 33.5506 33.5506 31.485 33.3572 33.4157 31.9433 34.179300 34.179300 32.337000 34.247700 34.947600 34.717500 30 39.4772 39.4772 37.5453 36.9895 40.061 40.8856 40.441300 40.441300 38.472300 40.137200 41.339200 43.574000 Ostrich 6 24.5814 24.5814 24.1663 23.9743 25.3131 24.7915 25.422500 25.422500 24.640800 25.560900 25.517800 24.791500 10 29.0586 29.0586 28.62 29.4726 29.2747 29.4837 29.419100 29.419100 28.836500 29.472600 29.672800 29.655700 15 32.1346 32.1346 29.6299 31.6106 32.8906 32.8145 32.689300 32.689300 31.442900 32.574300 33.204500 33.425200 20 34.1407 34.1407 31.7897 34.2362 34.7408 36.1898 35.468100 35.468100 33.047700 34.928300 35.799400 36.316700 30 40.627 40.627 37.7668 39.0592 40.801 43.5425 41.595000 41.595000 39.485400 41.470500 41.695900 43.880600 Pirate 6 23.2631 23.2631 21.4561 23.168 23.1323 23.1836 23.404200 23.404200 23.094400 23.437300 23.404900 23.183600 10 25.9609 25.9609 24.2709 27.4384 26.5991 26.2632 27.766100 27.766100 27.778600 27.641500 27.839000 26.963300 15 29.6645 29.6645 29.0204 31.1645 30.6792 29.5109 31.270500 31.270500 30.556700 32.050600 32.263400 31.769800 20 33.4168 33.4168 30.0926 33.1614 34.1231 31.8732 34.755100 34.755100 34.088500 34.875300 35.057600 35.466100 30 39.8081 39.8081 36.4502 40.2442 39.5233 41.5475 41.311300 41.311300 39.907600 41.206300 41.159400 43.458400 Starfish 6 22.6128 22.6128 22.2929 22.6749 22.7703 22.7851 22.927100 22.927100 22.572500 22.837300 22.900400 22.791300 10 26.7182 26.7182 24.9786 26.5114 26.5727 27.2332 27.065000 27.065000 26.016300 27.098300 27.201100 27.265400 15 29.8954 29.8954 26.9214 29.9095 30.8178 30.4493 30.602900 30.602900 29.452300 30.451700 30.936600 31.013300 20 31.7299 31.7299 28.6323 32.9614 33.3077 33.6331 32.896400 32.896400 31.557500 32.972500 33.350700 33.925700 30 39.0619 39.0619 36.4215 37.3626 38.89 41.1424 39.061900 39.061900 37.147900 38.913200 39.449900 41.436500 Boat 6 24.0866 24.0866 22.9976 23.2886 23.7976 24.2015 24.616200 24.616200 25.091200 24.773000 24.534000 24.201500 10 27.9974 27.9974 26.4193 28.1395 27.856 28.3773 28.791900 28.791900 27.815100 28.662700 28.656300 28.750700 15 30.5878 30.5878 29.1994 31.7402 31.5873 32.3409 31.717900 31.717900 30.573300 31.740200 32.051500 32.471900 20 33.4578 33.4578 32.1865 33.0391 34.1403 34.8838 34.261100 34.261100 33.161300 34.137400 34.540200 35.235400 30 39.9697 39.9697 37.4946 38.4795 40.1269 42.3028 40.245500 40.245500 38.377000 40.654100 40.843500 42.636300 Best 4 4 1 3 11 36 6 6 3 5 10 31 Table 6.</sentence>
    <sentence>Statistical analysis of 30 runs for each of 55 cases for the experiments on between-class variance method compared to hjDE.</sentence>
    <sentence>p denotes probability of the statistic, h = 0 indicates null hypothesis cannot be rejected.</sentence>
    <sentence>Test image M Wilcoxon statistical analysis DE jDE PSO ABC CS p h p h p h p h p h Bird 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.004338 1 Butterfly 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.002255 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.6071 0 Cameraman 6 0.8872 0 0.8872 0 ≪0.05 1 0.0002051 1 0.6583 0 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 Elephants 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.1915 0 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.0001359 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.1359 0 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.006623 1 Fish 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.003609 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 Jetplane 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.7611 0 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.06989 0 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 Lena 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.008705 1 Ostrich 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.0009277 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.0002224 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.7766 0 Pirate 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.002188 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.003633 1 Starfish 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.000283 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 Boat 6 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 10 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.01283 1 15 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.0004184 1 20 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.1204 0 30 ≪0.05 1 ≪0.05 1 ≪0.05 1 ≪0.05 1 0.2847 0 Sig.</sentence>
    <sentence>differences 54 54 55 55 46 Some examples of segmented images for T ∈ {6, 10, 30} and all algorithms are depicted in Figs.</sentence>
    <sentence>3–6.</sentence>
    <sentence>Fig 3.</sentence>
    <sentence>Image Lena segmented into 6, 10, and 30 levels.</sentence>
    <sentence>Fig 4.</sentence>
    <sentence>Image Elephant segmented into 6, 10, and 30 levels.</sentence>
    <sentence>Fig 5.</sentence>
    <sentence>Image Pirate segmented into 6, 10, and 30 levels.</sentence>
    <sentence>Fig 6.</sentence>
    <sentence>Image Boat segmented into 6, 10, and 30 levels.</sentence>
    <sentence>The results, which have been thoroughly analyzed both numerically and statistically, can be summarized as follows.</sentence>
    <sentence>Firstly the hjDE achieved far better results, which can be attributed to the good explorational and exploitational property of the algorithm, by means of hybridization.</sentence>
    <sentence>Other algorithms lack this feature, and therefore get stuck in a sub-optimal solution in the search space.</sentence>
    <sentence>Based on the CPU time comparison, the hjDE is not among the fastest, but its computational time is still manageable (with an average of ≈20 ms), and is, therefore, still useful in real-time scenarios.</sentence>
    <sentence>And lastly, the proposed hjDE has the fewest control parameters as compared to DE, PSO, ABC, and CS.</sentence>
  </section>
  <section name="Conclusion">
    <sentence>In this paper the efficiency of a novel hybrid hjDE algorithm, applied to the optimization problem of multilevel image thresholding, was evaluated on 11 real life benchmark images.</sentence>
    <sentence>The performance of the algorithm was compared to the five other evolutionary algorithms, namely CS, DE, jDE, ABC, and PSO.</sentence>
    <sentence>The hybridization of the hjDE algorithm was done by adding the switching probability strategy adopted from the CS algorithm.</sentence>
    <sentence>In the main evolutionary loop of the jDE algorithm a probability was introduced, which dictates whether a reset of the worst individual of the population occurred (by taking a Levy flight from the best individual from the population), or generating a trial vector which competes with its parent.</sentence>
    <sentence>The objective function for the proposed algorithm was the maximum between-class variance proposed by Otsu.</sentence>
    <sentence>Mean objective values were observed, PSNR and SSIM measures were calculated and the CPU times were also analyzed for evaluating the efficiencies of algorithms.</sentence>
    <sentence>The hjDE performed best in the case of all metrics for all numbers of thresholds.</sentence>
    <sentence>The results were also compared statistically.</sentence>
    <sentence>The non-parametric Friedman and Wilcoxon tests were performed, where the Friedman test showed that the hjDE was significantly better than DE, jDE, PSO and ABC for all thresholds, but not for the CS.</sentence>
    <sentence>On the other hand, the Wilcoxon test proved that the proposed hjDE outperformed all algorithms for all numbers of thresholds.</sentence>
    <sentence>Three main research directions are foreseen for future work.</sentence>
    <sentence>Firstly, different evaluation criteria could be used, while different mutation strategies could also be studied on the impact of threshold selection.</sentence>
    <sentence>Secondly, the local information of the image could be used to achieve better segmentation results.</sentence>
    <sentence>And lastly, the switching probability strategy could be studied when coupled with other evolutionary algorithms for the optimal threshold selection problem.</sentence>
  </section>
</article>
