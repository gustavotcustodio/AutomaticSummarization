Engineering multi-agent systems based on swarming principles are done experimentally. n approach based on ontological modeling of swarms is proposed. This approach is defined within a whole methodology. Guidelines and formal methods for verification are provided.

0.046512 - For more than 20 years, researchers have designed models in order to describe swarm intelligence and apply the resulting techniques to complex problems.
0.082397 - However, there is still a gap between these models and current MAS methodologies.
0.160365 - The goal of this paper is to propose a principled and methodological approach for the engineering of systems based upon swarm intelligence.
0.057971 - The constraints are, on the one hand, to enable the analysis, design and implementation of such systems; and, on the other hand, to formally analyze and verify properties of resulting systems.
0.097316 - The principles of the approach are based, on the one hand, on requirement driven activities that produce goals to be fulfilled by the system of interest and, on the other, hand on an ontological modeling of the problem domain.
0.062473 - This ontological modeling conceptualizes the phenomenon one seek to imitate and thus allows it understanding.
0.052434 - The produced ontology is refined through the methodology activities down to organizational models.
0.046512 - For more than 20 years, researchers have designed models in order to describe swarm intelligence and apply the resulting techniques to complex problems.
0.041431 - However, there is still a gap between these models and current MAS methodologies such as ASPECS (Cossentino, Gaud, Hilaire, Galland, & Koukam, 2010), TROPOS (Bresciani, Perini, Giorgini, Giunchiglia, & Mylopoulos, 2004) or GAIA (Zambonelli, Jennings, & Wooldridge, 2003).
0.160365 - The goal of this paper is to propose a principled and methodological approach for the engineering of systems based upon swarm intelligence.
0.057971 - The constraints are, on the one hand, to enable the analysis, design and implementation of such systems; and, on the other hand, to formally analyze and verify properties of resulting systems.
0.009732 - Some works have contributed to this issue (Naturwissenschaftlichen Fakult At Ii et al., 2000; Bonabeau, Dorigo, & Theraulaz, 1999; Bernon, Camps, Gleizes, & Picard, 2005, Chapter VII) .
0.000000 - In Bonabeau et al.
0.031373 - (2003) the authors build a library of patterns of self-organizing behaviors.
0.110833 - However, even if it is an interdisciplinary and interesting attempt to define a framework for engineering systems based upon swarm intelligence a lot of work has still to be done in order to define principled and methodological approaches relying on swarm intelligence.
0.018265 - The author of Naturwissenschaftlichen Fakult At Ii et al.
0.097859 - (2000) proposes general rules in order to engineer swarming systems and a formal framework for analysis and validation.
0.049383 - These rules are not related to current methodologies or development platforms.
0.000000 - In Bernon et al.
0.104944 - (2005, Chapter VII) the authors design a complete methodology based upon the theory of Adaptive Multi-Agent Systems.
0.085534 - This methodology allows the analysis and design of swarming systems but impose a cooperative internal medium which maybe a strong constraint for some cases.
0.067278 - Swarming approaches are usually inspired by biology (Parunak, 1997) or physics (Marco, Mamei, Zambonelli, & Leonardi, 2004; Reynolds, 1987).
0.028674 - These systems usually exhibit features such as self-organization, emerging phenomena, robustness and adaptability.
0.102492 - One of the main problems with this kind of approaches is the small number of methodologies and guidelines which help the engineering of such systems.
0.046512 - Indeed, to be fully adopted, methodologies must be able to decompose the underlying principles of these systems with abstractions in a principled way.
0.053830 - Some experiments were done in the domain of swarming MAS architecture reverse-engineering (Hilaire, Simonin, Koukam, & Ferber, 2005) but they usually lack a systematic support.
0.033003 - For instance, in Parunak and Brueckner (2004) the authors give general principles in an informal way.
0.031746 - However, it is a real problem and despite the interest risen by these architectures the claims that stripping away centralized control is enough to allow the emergence of interesting properties has never been proved (Stepney, Polack, & Turner, 2006).
0.087863 - In order to engineer such kind of MAS we propose to use a combined approach based, on the one hand, on requirement driven activities that produce goals to be fulfilled by the system of interest and, on the other, hand on an ontological modeling of the problem domain.
0.045584 - The principle is to produce an ontology which conceptualizes the phenomenon one seek to imitate and thus allows it understanding.
0.115930 - Indeed, swarming approaches (Parunak, 1997) are based on the replication of existing behaviors, that have produced in certain experimental conditions the desired emerging properties.
0.095762 - This statement was already observed in Parunak and Brueckner (2004): Swarming is a discovery, not an invention.
0.071685 - It is a naturally occurring phenomenon that we seek to imitate in engineered systems.
0.062678 - Design principles for effective artificial swarming systems must be developed from an understanding of why swarming works in natural systems.
0.043290 - The produced ontology is then refined down to organizational models.
0.041344 - The analyst can then choose from a library of organizational models the ones that will satisfy the goals issued from the requirements analysis.
0.091031 - This combined approach is associated with formal proofs techniques in order to formally verify properties of organizational models and fulfillment of goals.
0.060150 - It seems a sound principle as the ontology is an understanding of the modeled system and so describes at least partially how it works.
0.063492 - The interacting entities the designer wants to replicate and their possible actions are part of this ontology.
0.072015 - In order to introduce a systematic activity, some guidelines are provided in order to identify organizations and roles from this ontology.
0.069264 - This activity is integrated in an existing methodology, namely ASPECS.
0.052910 - The modified methodology is then able to decompose such systems in roles, interactions and organizations which are the key concepts of the ASPECS analysis phase and which are identified, in the original methodology, by means of use cases.
0.090752 - This kind of approach is advocated by the authors of Parunak and Brueckner (2004) who state “we ought to be able to reverse-engineer the underlying mechanisms of swarming systems for use in synthetic systems”.
0.048662 - The paper is organized as follows: Section 2 presents the background related to the ASPECS methodology and the specific architecture that illustrates the presented approach.
0.051282 - Section 3 presents the ontological identification approach.
0.049383 - Section 4 is dedicated to related works and Section 5 concludes.
0.091122 - ASPECS aspecs is a step-by-step requirements to code software engineering process based on a metamodel which defines the main concepts for the proposed mas and Holonic mas analysis, design and development.
0.050096 - It integrates design models and philosophies from both object- and agent-oriented software engineering (OOSE and AOSE) and is largely inspired by the passi (Cossentino, 2005) and rio (Hilaire, Gruer, Koukam, & Simonin, 2008) approaches.
0.039604 - The target scope of aspecs can be found in complex systems and especially hierarchical complex systems.
0.045584 - The main vocation of aspecs is towards the development of societies of holonic (as well as not-holonic) multiagent systems.
0.000000 - The ideas underpinning the aspecs design process can be described as follows: 1.
0.041237 - The aspecs design process explicitly deals with the design of open, dynamic and complex systems.
0.054645 - The adoption of an organizational approach.
0.038647 - Functionalities to be realized are assigned to organizations.
0.048964 - An organization is defined by a collection of roles that take part in systematic institutionalized patterns of interactions with other roles in a common context.
0.053945 - A role is defined as an expected behavior (a set of role tasks ordered by a plan) and a set of rights and obligations in the organization context.
0.053830 - The goal of each Role is to contribute to the fulfillment of (a part of) the requirements of the organization within which it is defined.
0.014981 - A role can be instantiated either as a Common Role or Boundary Role.
0.058997 - A Common Role is a role located inside the designed system and interacting with either Common or Boundary Roles.
0.058166 - A Boundary Role is a role located at the boundary between the system and its outside and it is responsible for interactions happening at this border (i.e.
0.000000 - GUI, Database, etc.).
0.075601 - Domain related ontological knowledge is used as a tool for enhancing the quality of design.
0.048000 - This has been already adopted in some previous methodologies (Iglesias, Garijo, Gonzalez, & Velasco, 1998) but it is lacking in most modern approaches.
0.059712 - We think that in dealing with intelligent agents it is particularly important to explicitly catch an ontological model of the problem and solution domains; this allows an easy application of several AI techniques as well as the adoption of semantic-based communications among agents.
0.059406 - Three main levels of abstractions, called models according to the model-driven engineering terminology, are considered.
0.031949 - Concepts of the problem domain are used to model system requirements in terms of organizations and interacting roles; concepts of the agency domain are the result of a set of transformations from the previous domain and are used to depict an agent-oriented solution; concepts of the solution domain are again the result of some transformations and are devoted to design a platform-specific solution at the code level.
0.056738 - The different activities of the System Requirements phase of aspecs are represented by the SPEM diagram of Fig 1. aspecs software process is driven by requirements.
0.033058 - Thus the first activity, Domain Requirement Description, of the first phase of aspecs, System Requirements, deals functional and non functional requirements.
0.025478 - Functional requirements describe the functions the software has to exhibit (Software Engineering Body of Knowledge, 2004) or the behavior of the system in terms of interactions perceived by the user.
0.044444 - Non functional requirements are sometimes known as constraints or quality requirements (Software Engineering Body of Knowledge, 2004).
0.048485 - The global objective of the Domain Requirements Description (DRD) activity is gathering needs and expectations of application stakeholders and providing a complete description of the behavior of the application to be developed.
0.048000 - In the proposed approach, these requirements should be described by using the specific language of the application domain and an user perspective.
0.059448 - This is usually done by adopting use case diagrams for the description of functional requirements; besides, conventional text annotations are applied to use cases documentation for describing non-functional requirements.
0.017316 - aspecs System Requirements phase Fig 1. aspecs System Requirements phase.
0.048930 - The global objective of the Problem Ontology Description (POD) is to provide an overview of the problem domain.
0.024465 - Stakeholders naturally express requirements in their own terms and with implicit knowledge of their own works (Sommerville, 2004).
0.037665 - Therefore the aim of this activity is deepening the understanding of the problem by complementing the usual requirements description in terms of use cases with a description of the concepts that compose the problem domain.
0.028674 - It describes concepts used in the specific language of the application domain and users.
0.032922 - Results of this activity can sometime imply modifications in uses cases.
0.038929 - The design of the domain ontology occurs very earlier in our process and this has a direct consequence in the organization and capacity identification activities.
0.076696 - Problem Ontology is modeled by using a class diagram where concepts, predicates and actions are identified by specific stereotypes.
0.051948 - The ontology is inspired from the FIPA proposal (FIPA, 2001).
0.049587 - The main point is that actions are distinguished concepts associated to the concept that act and the concept that is manipulated.
0.065844 - This specific type of ontology is described in the next subsection.
0.019324 - The DRD and POD activities precedes Organization Identification.
0.041298 - In this activity the objective is to assign to each use case an organization in charge of its fulfillment.
0.021333 - Once the organizations have been identified the next activity, Interaction and Role Identification consists in refining organizations in terms of interacting roles.
0.049217 - Roles use their capacities for participating to organizational goals fulfillment; a capacity is a specification of a transformation of a part of the designed system or its environment.
0.052805 - This transformation guarantees resulting properties if the system satisfies a set of constraints before the transformation.
0.038095 - It may be considered as a specification of the pre- and post-conditions of a goal achievement.
0.054054 - This concept is a high level abstraction that proved to be very useful for modeling a portion of the system capabilities without making any assumption about their implementations as it should be at the initial analysis stage.
0.053097 - A capacity describes what a behavior is able to do or what a behavior may require to be defined.
0.051736 - As a consequence, there are two main ways of using this concept: • It can specify the result of some role interactions, and consequently the results that an organization as a whole may achieve with its behavior.
0.054983 - In this sense, it is possible to say that an organization may exhibit a capacity.
0.033970 - • Capacities may also be used to decompose complex role behaviors by abstracting and externalizing a part of their tasks into capacities (for instance by delegating these tasks to other roles).
0.036697 - In this case the capacity may be considered as a behavioral building block that increases modularity and reusability.
0.012698 - Fig 2 shows an example of organization drawing from the well-known Contract NET protocol (Smith, 1988).
0.051948 - This organization is sketched by the CNET package stereotyped Organization.
0.054902 - Within this organization there are two roles depicted by classes stereotyped Role.
0.051282 - These two roles are Manager and Participant.
0.000000 - The association class between roles depicts an interaction.
0.063492 - Here it is the Call for Proposal aiming to delegate a task that starts the CNET protocol.
0.069264 - An example of provided capacity is included in the diagram.
0.051282 - This capacity, namely TaskDelegation, represents the fact that the CNET organization is able to manage the delegation of a task.
0.064897 - the requires part of this capacity includes the fact there exist such a task and that there is participants.
0.011396 - The ensures part of the capacity states that the task will be delegated to the participant with the best bid.
0.017316 - aspecs example of organization Fig 2. aspecs example of organization.
0.044944 - For a complete view of ASPECS the reader can see Cossentino et al.
0.000000 - (2010).
0.035794 - Ontology definition A definition of ontology is given by the author of Gruber (1993): in the context of knowledge sharing, an ontology means a specification of a conceptualization.
0.059448 - That is, an ontology is a description (like a formal specification of a program) of the concepts and relationships that can exist for an agent or a community of agents.
0.042813 - There are several ways for describing an ontology such as: semantic networks, concept lattices and logic for example.
0.034364 - A frequently used ontology is OWL advocated by the W3C (W3C OWL Working Group, 2009).
0.125261 - It is an object-oriented language based on class and properties.
0.038095 - For clarity reasons, the examples of ontologies will be presented as UML class diagrams in this paper.
0.045113 - The ontology we use for this paper is inspired by the FIPA RDF content specifications (FIPA, 2001) and the one used in Cossentino (2005).
0.026144 - An UML class diagram is used to represent the ontology, as it is the case in other works such as Bergenti and Poggi (2000) and Cranefield and Purvis (1999).
0.024465 - In order to distinguish the different ontology categories, the classes representing them are stereotyped by their category name.
0.051282 - These categories are: concept, predicate and action.
0.028674 - A concept describes a set of individuals or instances of the domain of interest.
0.073059 - A predicate is an assertion on properties about concepts.
0.039216 - An action is something that is performed in the domain of interest.
0.000000 - These classes have relationships between them.
0.046709 - Indeed, a predicate is related to the concerned concept and an action is related to an actor (the concept that acts) and a receiver (the concept that is acted on).
0.029963 - To these existing categories the capacity, as described in previous subsection, is added.
0.053830 - A capacity is described by a set of properties required (pre-conditions), a set of properties ensured (post-conditions) and two sets that are the inputs and outputs of the capacity.
0.051948 - An example of such ontology is given in Fig 3.
0.050179 - In this example, there are two concepts: Seller and Buyer and one action: Sell.
0.074906 - The principle of the action is that a Seller sells to a Buyer.
0.014337 - The predicate hasProductsToSell establishes whether or not a Seller has some products to sell.
0.026403 - Eventually, the capacity TriggerPayment of a Buyer states that a Buyer must be able to pay.
0.021858 - Example of ontology diagram Fig 3.
0.025157 - Example of ontology diagram.
0.020513 - Localization and tracking MAS 2.3.1.
0.038929 - Context Localization, with mobile or fixed sensors, is a very difficult but required task to control mobile robots in an indoor dynamic and uncertain environment.
0.055096 - This task can be defined as finding the position of an object, mobile or not, in a well known referential system.
0.038567 - The localization problem may adopt two methods: localization with on board sensors (also called self localization) and localization with external sensors.
0.075396 - The algorithms used generally stem from signal or image processing, or from the stochastic methods based on Markov Models (Gechter & Charpillet, 2000).
0.051680 - So, the standard localization algorithms are extremely dependent on the nature of the used sensors and deal generally only with one single target.
0.094721 - The existing multi-agent based localization and tracking devices are generally based on specialized cognitive agents and are closely tied to specific task (Ealet, Collin, Sella, & Garbay, 2000).
0.072607 - In this way, tracking is considered to be a collection of temporally and spatially coherent localizations.
0.029963 - As a means of localization, the tracking algorithms stem from the signal processing.
0.009732 - Among the most spread out we can point out the Kalman filter, the optical flow algorithms and the particle filtering (Fox, Burgard, Dellaert, & Thrun, 2001).
0.036036 - The main difficulty in designing such systems for localization and tracking is to take into account the characteristics of the used sensors while obtaining properties such as robustness and adaptation to the variation in the targets’ kinetics.
0.068247 - Considering these required properties, using a reactive multi-agent system to solve this problem seems to be adapted.
0.083296 - The approach presented in this paper is based on the fact that the environment can also be considered as an active element in MAS problem solving processes.
0.017429 - Indeed, it has been emphasize in literature Weyns, Parunak, and Michel (2005), Parunak (1997) that it can plays an important role in MAS especially when agents have limited abilities.
0.025478 - As exposed in Weyns, Parunak, and Michel (2006), in the presented approach, the environment can be considered as the interface between the real world where the problem evolves (i.e.
0.028369 - where the targets appear, move and disappear in our case) and the resolution process, composed of agents and their interactions, which computes the solution (i.e.
0.046784 - localization and tracking of targets).
0.019512 - This principle has already been used practically in target tracking and localization (Gechter, Chevrier, & Charpillet, 2006) but also in relation with intelligent mobile vehicle abilities such as obstacle avoidance (Gechter, Contet, Gruer, & Koukam, 2011) and driving assistance (Gechter, Contet, Gruer, & Koukam, 2010).
0.114378 - Approach As previously exposed, localization and tracking are based on the use of sensors that are spread out in the target evolution area.
0.032922 - The association sensor/processing algorithms is then called Perceptive Unit (PU).
0.024331 - The environment is depicted using an occupancy grid that represents an abstraction of the observable areas of the real world according to the sensors’ range.
0.039604 - Dynamics of the problem depend on dynamics of the targets, which can (i) appear, i.e.
0.014981 - they arrive in the observation field of the sensors, (ii) move, i.e.
0.012232 - they go from one observable point of the real world to another observable point, (iii) disappear, i.e.
0.020513 - they go out of the observation field.
0.017316 - These dynamics have been accounted for using two main trends.
0.014981 - First, accumulation of the sensing information deals with the appearance of the targets.
0.042667 - This accumulation leads to the construction of a plot (namely, a local probability distribution) that represents a possible position for a target.
0.047198 - This construction can be considered as a deformation of the environment that has to be perceived by the agents.
0.035842 - Second, there is attenuation of the plot in order to deal with target disappearance.
0.000000 - Together, these two trends take into account the targets’ movements.
0.051948 - The perceptions of the agents have then to be defined.
0.031008 - The agents perceive the plots through the environment by means of an attraction force (formulated to account for the nearsightedness of the agents).
0.096220 - This force is induced by the appearance of a plot and depends on its size.
0.041298 - As for the interaction mechanisms, they have to be defined taking into account individual and collective points of view.
0.046784 - Moreover, regulation mechanisms are required.
0.038567 - A repulsion mechanism has been defined between agents in order to spread them in the information-less areas of the environment.
0.131687 - This mechanism is inhibited when the agents are on a plot.
0.022039 - There, the agents cooperate by amplifying the attenuation of the plot, in order to limit the size of the resulting group.
0.060606 - Finally, the emergent organization is characterized by both a gathering of the agents on the plots, which leads to group construction, and an homogeneous distribution of them in the information-less areas.
0.017316 - Each group can thus be considered as a localized target.
0.066007 - The output of the system is stable when equilibrium is established between refreshing and solving dynamics.
0.025974 - Fig 4 summarizes the architecture of our problem-solving model.
0.071685 - Architecture of the physics based reactive model for the localization and the… Fig 4.
0.065163 - Architecture of the physics based reactive model for the localization and the tracking (left) and representation of the solving process as a filter (right).
0.071625 - The approach proposed in this paper in order to analyze swarming system modifies the ASPECS process as defined by Fig 1.
0.032922 - The Domain Requirement Description is no longer the only first activity.
0.025397 - In fact, there are two possible ways to begin the analysis process as described in Fig 5.
0.011799 - The first possible way consists in starting from phenomena to be imitated and conceptualize them with the Problem Ontology.
0.012232 - From the ontology, the subsequent activities identify organizations, roles and interactions and then refine roles with concrete behaviors.
0.040100 - The result of this path is the production of an organizational diagram composed of interacting roles with detailed behaviors that exhibit known overall properties.
0.033126 - The second way consists in starting from the domain requirement description analyzing text usage scenarios and interviews at hand in order to produce a goal diagram for the system to be.
0.028369 - The DRD activity may be quite complex and involves a lot of tasks before producing a goal diagram as described in Seidita, Cossentino, and Gaglio (2007).
0.043011 - However, it is not in the scope of this paper to describe these tasks.
0.077922 - Modified sequence of activities for swarming system analysis Fig 5.
0.086957 - Modified sequence of activities for swarming system analysis.
0.025478 - These two paths reunite in the goals assignment activity which intend to associate to identified goals to organization forms (coming from the ontological analysis) that are able to fulfill them.
0.041408 - Problem Ontology Description The approach proposed in this paper consists in using the result of the Problem Ontology Description to identify organizations and roles from specific phenomena we seek to imitate.
0.044444 - As a consequence the aspecs process is modified to take into account this methodological point of view.
0.045584 - POD can be done before in order to identify organizations and roles from the phenomenon that is to be imitated.
0.032000 - In order to do so, the POD must describe the concepts of the phenomenon of interest and the actions that take place.
0.032432 - Moreover, if the expected results of an action are known the action has to be described by a capacity and if there exist some known properties about concepts or actions then it must be described by predicates.
0.079528 - This approach leads to the definition of two elements usable in the verification process.
0.068729 - On the one hand, proof obligations for the candidate organizations are generated by each capacity.
0.036176 - Indeed, a capacity is a kind of abstraction of the behavior of an organization that needs to be verified by the role behaviors.
0.010025 - The property to be verified can be formulated as follows: with, respectively, requires (resp ensures) the pre-condition (resp post-condition) of the capacity.
0.042667 - On the other hand, each known property expressed as a predicate can be used as a lemma to help the verification process.
0.055096 - Organization and role identification The guidelines proposed in order to identify organizations and roles from the Problem Ontology are the following.
0.057971 - Organizations are logical units composed of interacting roles.
0.013746 - Each Action of the Problem Domain Ontology will correspond to an interaction between two roles.
0.044077 - Indeed, acting concepts exhibit behaviors when acting and concepts that are acted upon are either roles or parts of the environment.
0.039604 - It is then reasonable to associate (at least) a CommonRole or a BoundaryRole to these concepts.
0.057613 - For each Action two Roles and one interaction are then identified.
0.048110 - In a first approximation, we can define an organization for each of these role couples.
0.032922 - This process gives birth to many organizations, one for each Action.
0.025397 - A role may be duplicated in several of these organizations if it takes part in several actions.
0.039604 - The next step is now to merge the created organizations in order to define coherent organizations.
0.059925 - The proposed guideline suggests to check if all duplicated roles are really different.
0.009732 - If duplicated roles exhibit the same behavior or if their behaviors do not make sense when considered separately then their encapsulating organizations must be merged.
0.030769 - The following algorithms formalize the preceding guidelines.
0.068729 - The initial identification of organizations is done by the initial Organization and role identification algorithm.
0.076219 - After this step each role is defined by a statechart in the Role Plan Activity.
0.032184 - Once the Role Plans are defined one can refine the organizations issued from the initial Organization and role identification algorithm using the Organization and role refinement algorithm.
0.094933 - This process is repeated until a stable set of organizations is defined.
0.010336 - Algorithm 1 Initial organization and role identification The consistencyCheck test asserts if the two roles in parameter can be described separately or not.
0.039216 - If the description of one of the roles needs information coming from the other then the roles are not consistent and must be described by a single merged role.
0.010336 - Algorithm 2 Organization and role refinement The consistencyCheck test can be realized using the different role plans resulting from the Role Plan Activity.
0.057971 - Each Role Plan is described with a statechart.
0.040268 - If the statecharts can not be fully defined because of the absence of informations present in another incomplete statechart then the roles are inconsistent and should be merged.
0.038095 - Another case is when a predicate states a property over two or more actions linked to roles.
0.013201 - Such a predicate, in order to be consistent, needs to be wrapped in a single organization.
0.027613 - The mergeOrgs function takes as input two organizations, O1 and O2, and produces as output an organization which is composed by the union of the two organizations O1 and O2 roles and interactions.
0.057971 - This function algorithm is given by Algorithm 3.
0.023290 - Algorithm 3 mergeOrgs algorithm Input: O1 and O2 two organizations Output: O3 resulting of the merge of O1 and O2 1 O3≔ ∅; 2 O3.R≔O1.R ∪ O2.R; 3 O3.I≔O1.I ∪ O2.I; An example of merge of two organizations is given in Fig 6.
0.021858 - Example of organizations merge Fig 6.
0.025157 - Example of organizations merge.
0.070922 - Verification One of the possible approaches for requirements elicitation is based upon goals analysis see (Bresciani et al., 2004; Hübner, Sichman, & Boissier, 2007) for example.
0.055417 - The general principles of these approaches is to identify the global goals of the system and then to decompose these goals in sub-level goals that contribute to the realization of the upper-level goals until reaching a satisfying level of decomposition.
0.056980 - If such an approach would be chosen within aspecs the result would be a hierarchical, tree-like, decomposition of goals.
0.078431 - The verification process proposed in this paper is composed of two steps.
0.057613 - First, each organization is associated to a set of proved capacities.
0.036697 - It means that the identified roles and interactions of the organization verify the property defined by the capacity.
0.095238 - This verification relies on the description of roles and interactions.
0.041344 - These descriptions are transformed into transition systems and used as input for specific software tools such as SAL (de Moura et al., 2004).
0.069333 - The principle of the verification using SAL is to prove that the system composed of interacting roles satisfies the capacities defined property.
0.048000 - The second step consists in verifying that for each goal there is a capacity (or a set of capacities) that verify it.
0.041026 - This kind of proof maybe very complex.
0.036484 - Indeed, when goals cannot be related by well defined constructs, such as logical and or logical or for example, to capacities, then there is the need for a theoretical framework such as the one presented in Giorgini, Mylopoulos, and Sebastiani (2005).
0.043573 - Presenting such a framework would be out of the scope of this paper and the case study of the next section allows a verification without this kind of framework.
0.060606 - However, it is possible to apply such a technique and use it for the purpose of the here described goal analysis.
0.051282 - Problem Ontology Description The domain ontology for the analysis of the localization and tracking MAS is described in Fig 7.
0.031373 - The SituatedElement concept describes all concepts that are situated in the environment.
0.074074 - In order to do this, each of these elements is associated with a location in a three dimensional coordinate system.
0.019324 - The Target, PerceptionUnit and Tracker inherit from SituatedElement.
0.037453 - The Target concept represents the targets that are to be localized and tracked.
0.038095 - The PerceptionUnit is a concept that represents sensors able to perceive targets in the real world environment.
0.051948 - This action is represented by the Perceive concept (stereotyped Action).
0.020050 - According to the MAS architecture described in Section 2.3 these sensors modify the environment and specifically the highness (z component) of the grid.
0.051948 - This action is represented by the ModifyZ concept (stereotyped Action).
0.014337 - The Agent concept represents the agent that behave as described in Section 2.3.
0.034364 - It means that they are repulsed by each others and attracted by high altitude spots.
0.033058 - The repulsion is materialized by the Repulsion concept (stereotyped Action) and the attraction is materialized by the Attraction concept (stereotyped Action).
0.024691 - Problem Domain Ontology for the localization and tracking MAS Fig 7.
0.027397 - Problem Domain Ontology for the localization and tracking MAS.
0.031373 - Organization and role identification The O1, O2 and O3 organizations of Figs.
0.035842 - 8–10 are generated from respectively the Perceive Action, IncrementZ Action and DecrementZ Action.
0.000000 - Organization generated from Perceive Fig 8.
0.000000 - Organization generated from Perceive.
0.000000 - Organization generated from IncrementZ Fig 9.
0.000000 - Organization generated from IncrementZ.
0.000000 - Organization generated from DecrementZ Fig 10.
0.000000 - Organization generated from DecrementZ.
0.047198 - The Target Moving Organization of Fig 11 is the result of the merging of organizations O1, O2 and O3.
0.038647 - Indeed, the PerceptionUnit role behavior is not decomposable.
0.036697 - It consists in perceiving targets and according to this perception modifying the z component of the environment grid.
0.041026 - This fact merge O1 and O2 organizations.
0.030075 - Since the predicate DecLTInc is expressed over the IncrementZ and DecrementZ actions, and could not be expressed otherwise, O2 and O3 must be merged.
0.000000 - Target Moving Organization Fig 11.
0.000000 - Target Moving Organization.
0.041026 - The O4 and O5 organizations of Figs.
0.044944 - 12 and 13 are generated from respectively the Attraction Action and Repulsion Action.
0.046205 - The Localization and Tracking Organization is the result of the merging of organizations O3 and O4.
0.050575 - In this case, the behavior of the Agent role consists in movements which are computed following equations of Section 2.3 that combine both attraction and repulsion.
0.015686 - It thus makes no sense to separate this behavior in two organizations.
0.041379 - At this point there is still one duplicated role (the Environment role) which belongs to the Target Moving and to the Localization and Tracking Organizations of Figs.
0.027211 - 11 and 14.
0.047059 - The behaviors associated to this role are different in the two organizations.
0.029963 - In the Target Moving Organization the environment is passively modified by its PerceptionUnit.
0.035398 - In the Localization and Tracking Organization the behavior of the Environment consists in attracting agents to high altitude spot.
0.043716 - These two organizations are thus coherent.
0.000000 - Organization generated from Attraction Fig 12.
0.000000 - Organization generated from Attraction.
0.000000 - Organization generated from Repulsion Fig 13.
0.000000 - Organization generated from Repulsion.
0.021858 - Localization and Tracking Organization Fig 14.
0.025157 - Localization and Tracking Organization.
0.022792 - Role plan and proofs After Organization Interaction and Role Identification activities the analyst defines the Role Plan using statechart diagrams.
0.019324 - These statecharts detail the behaviors of the roles.
0.034542 - From these statecharts, using the operational semantics defined in Gruer, Hilaire, and Koukam (2004) one can generate transition systems that can be given as input of softwares such as SAL (de Moura et al., 2004) thus allowing automatic verifications.
0.044944 - For our system, the generated proof obligations concern, respectively, the organizations of Figs.
0.018265 - 11 and 14 and the capacities PlotAroundTarget and SwarmAroundPlot.
0.022792 - The behavior of the organization defined in Fig 11 must satisfy the capacity PlotAroundTarget taking as hypothesis the predicate DecLTInc.
0.038095 - The capacity requires property is perception(x,y) representing the perception of a target on a (x,y) position and the ensures is ○(highness′(x,y) > highness(x,y)) representing the fact that in the next step the highness of (x,y) position is greater than the highness in the current step.
0.021622 - The property to be proven is thus perception(x,y) ⇒ ○(highness′(x,y) > highness(x,y)) with the lemma DecLTInc stating that the increment due to a target perception is greater than the decrement due to evaporation.
0.039216 - This property was proven by using the transition system issued from the behaviors of the Target Moving organization with the SAL software using induction and the bounded model checker.
0.022792 - The behavior of the organization defined in Fig 14 must satisfy the capacity SwarmAroundPlot taking as hypothesis the predicate ZeroOnTarget.
0.036782 - The capacity requires property is ∃(x,y,z) • z > 0, this means that there is at least one position in the environment with a non-zero highness.
0.060150 - The ensures property is ○ The first line states that if two Trackers are on a same position then it must be on a Plot.
0.044944 - The second line states that a Tracker is always attracted by a Plot.
0.038217 - This property was proven by using the transition system issued from the behaviors of the Localization and tracking organization with the SAL software using induction and the bounded model checker.
0.051282 - Goals analysis The result of the goal analysis for the problem of localization and tracking is shown in Fig 15.
0.032000 - The main goal for this problem can be reduced, as discussed in Section 2.3, to a localization goal with dynamic properties.
0.057348 - This main goal is decomposed into two sub-goals by an AND type decomposition.
0.042463 - The first of these sub-goals is to deform the environment around targets, and only around targets, so as to define high altitude spots and maintain them as targets move.
0.039604 - The second goal consists in building swarms around high altitude spots and only around these spots.
0.025974 - Goal analysis for the localization and tracking problem Fig 15.
0.028986 - Goal analysis for the localization and tracking problem.
0.028674 - The proof that the two sub-goals satisfy the main goal is quite obvious.
0.086957 - Indeed, if the environment is deformed around targets only and agents are grouped on high altitude spots then the only existing groups of agents (swarms) are necessarily constituted around identified targets.
0.044944 - Now let us suppose there exists a target not surrounded by a swarm.
0.056497 - It means that either the environment is not deformed around it (which is contradictory with the first sub-goal) or there are no swarm on this spot (which is contradictory with the second sub-goal).
0.058166 - So, if the two sub-goals are satisfied, and supposing there are enough agents to cover all possible targets then all targets will be surrounded by a swarm.
0.044199 - Discussion A first interesting property of the presented heuristic is that generated organizations are correct in the sense that it is impossible to produce an organization with a role that has no interactions with other roles.
0.020513 - This can be easily proven by induction.
0.034188 - The initial state produced from the ontology defines one organization, composed of two or more interacting roles, for each action.
0.014981 - In this state the roles interact as each one participates in an action.
0.044944 - Subsequently, the transformations that are applied to organizations are of the merge type.
0.086275 - Each merge of organization is based upon union of roles and interactions.
0.065574 - There are no suppressions of interactions.
0.036530 - It is so impossible to create an isolated role.
0.034188 - The second interesting property is that the set of generated organizations is the smallest possible respectively to the consistency test.
0.051680 - It means that for a given problem ontology there are no smaller set of consistent organizations than the one produced by the heuristic.
0.000000 - It can be proven by contradiction.
0.000000 - If it were not true then among the generated organizations there would be at least two duplicates that could be merged.
0.064897 - This is in contradiction with the loop (line 3 of Algorithm 2) that tests whether there are unchecked duplicates.
0.051948 - The generated set of organizations is then the smallest possible.
0.039216 - For many methodologies, such as Drogoul and Collinot (1998), Zambonelli et al.
0.044077 - (2003), DeLoach (1999), the identification of roles and organizations is left to the designer choices or to an external requirements process.
0.046709 - However, it is recognized that requirement elicitation is not an easy task and the assignment of such requirements to organizational structures is not a trivial task, any guidelines maybe helpful.
0.035088 - For goal-oriented methodologies, like TROPOS (Bresciani et al., 2004) or MOISE (Hübner et al., 2007), there is a strong relationship between the organizational structure and the goals since each goal is associated to an organization (for MOISE) or actor (for TROPOS).
0.092929 - The problem lies in the fact that goal-oriented approaches are not well fitted for swarming MAS as it is difficult to define goals and decompose them for this kind of system.
0.057971 - Indeed, the principle is to replicate existing behaviors.
0.035088 - Other methodologies do not take into account organizational concepts, as for example Prometheus (Padgham & Winikoff, 2002) and Adelfe (Bernon et al., 2005, Chapter VII).
0.072993 - In Parunak and Brueckner (2004) the authors propose definitions for swarming and self-organized MAS and give general principles on how to engineer swarming MAS.
0.068900 - These principles are illustrated through several case studies.
0.090119 - Even if it is a very important work both on theoretical and practical aspects, the given principles are not well formalized and may sometimes be ambiguous.
0.000000 - Their application may lead to several different results.
0.133012 - Moreover, the approach presented in this paper is based on organizational concepts which enable the definition of ODP from swarming metaphors.
0.026403 - These ODP can be easily reused as many MAS methodologies and development platforms integrate organizational concepts.
0.021858 - The authors of Stepney et al.
0.043011 - (2006)] deal with the engineering of emergence as it appears in many biological systems.
0.036697 - The underlying assumption is that there must exist several levels and/or timescales to explain and describe emergence.
0.027491 - Their proposition consists in a three elements architecture to be refined for any specific problem.
0.033149 - These elements are: the System of System (SoS) model that describes the high level system, the local model that describes the lower level and the integrated model that describes an integration environment between these two levels.
0.055717 - This approach has some similarities with the one presented in this paper.
0.026403 - Indeed, the Problem Ontology Description acts as an integration model describing the system at different levels.
0.088889 - The local model is described by organizations which are projection of agents behaviors in a specific context.
0.065359 - Eventually, the definition of agents and their behaviors, not described in this paper as it comes later on in the aspecs methodology, can be related to the SoS model.
0.000000 - However, the work presented in [Stepney et al.
0.071685 - (2006)] only sketch the architecture and do not propose a methodology to apply it.
0.140820 - This paper presents an approach for the engineering of swarming MAS.
0.127502 - This approach is based simultaneously on the analysis of the Problem Ontology Description and the Goal-Requirements analysis of the problem.
0.036697 - The result of the Problem Ontology analysis is the decomposition in terms of organizations composed of interacting roles.
0.047337 - The construction of these organizations is described by an heuristic which exhibits interesting properties and the approach generates proof obligations from the ontology that should be proven by the concrete behaviors when defined.
0.020672 - These properties once proven can be used to determine which organization is able to fulfill the identified goals from the goal-requirement analysis.
0.044444 - Moreover, the heuristic that produces organizations only produces organizations that are syntactically correct since each role interacts with at least another role and the produced set of organizations is the smallest possible.
0.061162 - The described activity of Organization, Role and Interaction identification is integrated in an existing MAS methodology, named aspecs.
0.071246 - The aspecs initial flow of activities is modified in order to take into account the engineering of swarming MAS.
0.051282 - It is a minor modification and the two subsequent phases, agency domain (a sort of design) and implementation remains unchanged.
0.061856 - The result is then an entire methodology from analysis to implementation dedicated to swarming MAS.
0.098688 - The interest of the presented approach is that it introduces a systematic way to engineer swarming systems that relies on the description of the system by an ontology.
0.063492 - This description is not complex to obtain as it is the conceptualization underlying the chosen swarming system.
0.040100 - Future works will be concerned by the analysis of well known swarming MAS in order to constitute a library of Organizational Design Patterns library.

[Frase 3] The goal of this paper is to propose a principled and methodological approach for the engineering of systems based upon swarm intelligence.
[Frase 5] The principles of the approach are based, on the one hand, on requirement driven activities that produce goals to be fulfilled by the system of interest and, on the other, hand on an ontological modeling of the problem domain.
[Frase 355] This approach is based simultaneously on the analysis of the Problem Ontology Description and the Goal-Requirements analysis of the problem.
[Frase 29] In order to engineer such kind of MAS we propose to use a combined approach based, on the one hand, on requirement driven activities that produce goals to be fulfilled by the system of interest and, on the other, hand on an ontological modeling of the problem domain.
