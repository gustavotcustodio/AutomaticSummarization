The artificial bee algorithm is applied to select for the thresholds for segmenting the images. The four evolutionary algorithms are also implemented for comparison with the results of proposed algorithm. The experimental results of proposed algorithm demonstrate that the proposed method is superior to other methods.

0.089431 - Multilevel thresholding is an important technique for image processing and pattern recognition.
0.121951 - The maximum entropy thresholding (MET) has been widely applied in the literature.
0.192496 - In this paper, a new multilevel MET algorithm based on the technology of the artificial bee colony (ABC) algorithm is proposed: the maximum entropy based artificial bee colony thresholding (MEABCT) method.
0.141463 - Four different methods are compared to this proposed method: the particle swarm optimization (PSO), the hybrid cooperative-comprehensive learning based PSO algorithm (HCOCLPSO), the Fast Otsu’s method and the honey bee mating optimization (HBMO).
0.242266 - The experimental results demonstrate that the proposed MEABCT algorithm can search for multiple thresholds which are very close to the optimal ones examined by the exhaustive search method.
0.208319 - Compared to the other four thresholding methods, the segmentation results of using the MEABCT algorithm is the most, however, the computation time by using the MEABCT algorithm is shorter than that of the other four methods.
0.162602 - Thresholding is one of the most important techniques for performing image segmentation.
0.039801 - It is generally simple and computationally efficient.
0.159378 - The main objective is to determine a threshold for bi-level thresholding or several thresholds for multilevel thresholding for image segmentation.
0.055096 - Bi-level thresholding selects only one threshold which separates the pixels into two classes: multilevel thresholding determines multiple thresholds which divide pixels into several groups.
0.078431 - In general, the global thresholding methods can be classified as parametric and nonparametric.
0.058608 - These methods select thresholds by optimizing (maximizing or minimizing) some criterion functions defined from images.
0.132231 - In the parametric approaches, the gray-level distribution of each class has a probability density function that is generally assumed to obey a Gaussian distribution.
0.128440 - These methods of parametric approaches attempt to estimate of the parameters of distribution that will best fit the given histogram data.
0.100000 - It typically leads to a nonlinear optimization problems of which the solution is computationally expensive and time-consuming.
0.112994 - Kittler and Illingworth (1986) proposed a thresholding method that approximates the histogram by a mixture of normal distributions and minimizes the classification error probability.
0.118644 - Wang, Chung, and Xiong (2008) proposed a method which is rooted in the Parzen window estimate of the unknown gray value probability density function.
0.137910 - The method can integrate image histogram information with the spatial information about pixels of different gray levels.
0.083990 - Zahara, Fan, and Tsai (2005) presented a hybrid optimization scheme for multiple thresholding by the criteria of Otsu’s minimum within-class variance and Gaussian function fitting.
0.105946 - Nonparametric approaches find the thresholds that separate the gray-level regions of an image in an optimal manner based on some discriminating criteria such as the between-class variance, entropy and cross entropy.
0.134752 - The popular method, Otsu’s method (1979), selected optimal thresholds by maximizing the between-class variance.
0.177891 - Shoo, Soltani, Wong, and Chen (1988) found that the Otsu’s method is one of the better threshold selection methods for real world images with regard to uniformity and shape measures.
0.096220 - However, inefficient formulation of between-class variance makes the methods very time consuming in multilevel threshold selection.
0.131455 - To solve this problem, Liao, Chen, and Chung (2001) proposed a fast recursive algorithm, Fast Otsu’s method, along with a look-up-table to implement in the application of multilevel thresholding.
0.116505 - Ye, Chen, Li, and Zhang (2008) proposed a particle swarm optimization (PSO) algorithm to optimize the Otsu’s criterion.
0.148867 - Kapur, Sahoo, and Wong (1985) proposed a method for gray-level picture thresholding using the entropy of the histogram.
0.148936 - Abutaleb (1989) proposed a 2-D maximum entropy thresholding method for separating the regions of image.
0.180000 - Zhang and Liu (2006) adopted the particle swarm optimization algorithm to maximize the entropy for underwater image segmentation.
0.064725 - Madhubanti and Amitava (2008) proposed a hybrid cooperative-comprehensive learning based PSO algorithm (HCOLPSO) based on maximum entropy criterion.
0.143194 - Li and Lee (1993) proposed a method which selects the threshold by minimizing the cross entropy between the original and segmented images.
0.130326 - Yin (2007) developed a recursive programming techniques to reduce the order of magnitude of computing the multilevel thresholds and further used the PSO algorithm to minimize the cross entropy.
0.207518 - Horng (2010) applied the honey bee mating optimization (HBMO) to search for the thresholds of histogram of image.
0.117647 - The developed method was called maximum entropy honey bee mating optimization (MEHBOT) algorithm.
0.276654 - The experimental results demonstrated that the result of the MEHBOT algorithm was superior to other algorithms such as the PSO, HCOLPSO and Fast Otsu’s methods.
0.073260 - Hammouche, Diag, and Siarry (2010) compared various meta-heuristic techniques implemented in the multilevel thresholding.
0.103960 - They found that the differential evolution was the most efficient and the particle swarm optimization converged the most quickly.
0.112803 - Over the last decade, modeling the behavior of social insects, such as ants and bees, for the purpose of search and problems solving has been the context of the emerging area of swarm intelligence.
0.188415 - The artificial bee colony (ABC) algorithm may also be considered as a typical swarm-based approach for optimization, in which the search algorithm is inspired by the foraging behavior of bee colonies.
0.134409 - The search algorithm has led to the emergence of collective intelligence of bee swarms consisting of three essential components: food source, employed foragers and unemployed forages.
0.120000 - There are two leading modes of the bee colony behavior: recruitment to and abandonment of a food source.
0.079602 - The unemployed forages are onlookers and scouts.
0.174330 - Karaboga and Basturk (2007) have recently proposed a developed model of the artificial bee colony (ABC) algorithm that simulated these social behaviors of honey bees for searching for the numerical optimization problems.
0.175158 - Singh (2009) applied the ABC algorithm, called the ABC-LCMST algorithm, for the leaf-constrained minimum spanning tree problem.
0.177370 - Computational results demonstrated the superiority of the new algorithm over other approaches such as ant colony algorithm and the tabu search.
0.190950 - The performance of the ABC algorithm on clustering is also compared with set of results of clustering methods that are given in the work of Karaboga and Ozturk (2011).
0.200426 - This paper applies the ABC algorithm to search for the multilevel thresholds using the maximum entropy (MET) criterion.
0.192028 - This proposed method is called the maximum entropy based artificial bee colony thresholding (MEABCT) algorithm.
0.232273 - In the experiments presented in this paper, the exhaustive search method is conducted to derive the optimal solutions for comparison with the results generated from MEABCT algorithm.
0.171362 - The four different methods – the PSO, the hybrid cooperative-comprehensive learning based PSO algorithm (HCOCLPSO), the Fast Otsu’s method, and the MEHBMOT – are implemented in the several real images for purposes of comparison.
0.200219 - The remainder of the paper is organized as follows: Section 2 introduces the artificial bee colony algorithm.
0.170133 - Section 3 presents the proposed MEABCT algorithm.
0.065682 - Performance evaluation and experimental results are presented in detail in Section 4.
0.019048 - Finally, some conclusions are made in Section 5.
0.110407 - The colony of artificial bees contains three groups of bees: employed bees, onlookers and scouts.
0.123656 - The employed bees bring loads of nectar from the food resource to the hive and may share the information about food source in the dancing area.
0.057971 - These bees carry information about food sources and share them with a certain probability by dancing in a dancing area in the hive.
0.131234 - The onlooker bees wait in the dances area for making a decision on the selection of a food source depending on the probability delivered by employed bees.
0.164706 - The computation of probability is based on the amounts of the food source.
0.144330 - The other kind of bee is scout bee that carries out random searches for new food sources.
0.066116 - The employed bee of an abandoned food source becomes a scout and as soon as it finds a new food source it becomes employed again.
0.151515 - In other words, the each search cycle of the ABC algorithm contains three steps.
0.130584 - First, the employed bees are sent into their food sources and the amounts of nectar are evaluated.
0.124294 - After sharing this information about the nectar, onlooker bees select the food source regions and evaluating the amount of nectar in the food sources.
0.124542 - The scout bees and then chosen and sent out to find the new food sources.
0.173740 - The artificial bee colony (ABC) algorithm was proposed by Karaboga and Basturk (2008).
0.106157 - In this algorithm, the position of a food source zi represents a possible solution to the optimization problems and the amount of nectar in a food source corresponds to the fitness fit(zi) of the corresponding solution.
0.169811 - The number of employed or onlooker bees is generally equal to the number of solutions in the population of solutions.
0.121212 - Initially, the ABC algorithm randomly produced a distributed initial population P of SN solutions, where SN denoted the number of employed bees or onlooker bees.
0.032520 - Each solution zi (i = 1, 2, … , SN) is a D-dimensional vector.
0.123810 - Here D is the number of optimization parameters.
0.138462 - In each execution cycle, C (C = 1, 2, … , MCN), the population of the solutions is subjected to the search processes of the employed, the onlooker and scout bees.
0.080000 - An employed bee modifies the possible solution depending on the amount of nectar (fitness vale) of the new source (new solution) by using Eq (1) (1) where k ϵ {1, 2, … , SN} but k ≠ i and j ϵ {1, 2, … , D} are randomly selected indexes.
0.038095 - φij is a random number between [−1, 1].
0.101545 - If there is more nectar in new solution is than that in the precious one, the bee remembers the new position and forgets the old one, otherwise it retains the location of the previous one.
0.086957 - When all employed bees have finished this search process, they deliver the nectar information and the position of the food sources to the onlooker bees, each of whom chooses a food source according to a probability proportional to the amount of nectar in that food source.
0.071839 - The probability pi of selecting a food source zi is determined using the following Eq (2) (2) In practical terms, any food source zi (i = 1, 2, … , SN) sequentially generates a random number between [0, 1] and if this number is less than pi, an onlooker bee are sent to food source zi and produces a new solution based on Eq (1).
0.131234 - If the fitness of the new solution is more than the old one, the onlooker memorizes the new solution and shares this information with other onlooker bees.
0.059701 - Otherwise, the new solution will be discarded.
0.132075 - The process is repeated until all onlookers have been distributed to the food sources and produces the corresponding new solution.
0.105747 - If the position of food source can not be improved through the predetermined number of “limit’ of bees, then the food resource zi is abandoned and then the employed bee becomes a scout.
0.121500 - Assume that the abandoned source is zi and j ϵ {1, 2, … , D}, then the scout discovers a new food source to be replaced with zi.
0.107527 - This operation can be defined as in (3) (3) where the and are the upper bound and upper bound of the jth component of all solutions.
0.123711 - If the new solution is better than the abandoned one, the scout will become an employed bee.
0.140000 - The selection of employed bees, onlooker bees and scouts is repeated until the termination criteria have been satisfied.
0.081301 - Entropy criterion based measure The entropy criterion, proposed by Kapur et al.
0.089431 - (1985), was widely used in determining the optimal thresholding in image segmentation.
0.157895 - The original algorithm had been developed for bi-level thresholding.
0.113475 - The method can also extend to solve multilevel thresholding problems and can be described as follows.
0.050847 - Let there be L gray levels in a given image I and these gray levels are in the range {0, 1, 2, … , L − 1}.
0.092152 - Then one can define Pi = h(i)/N, (0 ⩽ i ⩽ L − 1) where h(i) denotes the number of pixels with gray-level i. N denotes total number of pixels in the image.
0.114307 - Here, given a problem to select D thresholds, [t1, t2, … , tD] for a given image I, the objective function f is to maximize: (4) In our proposed HEABCT algorithm, we try to obtain this optimum D-dimensional vector [t1, t2, … , tD], which can maximize (4).
0.204545 - The objective function is also used as the fitness function of the HEABCT algorithm.
0.124535 - Maximum entropy artificial bee colony thresholding (MEABCT) algorithm In this paper, a maximum entropy based artificial bee colony thresholding (MEABCT) algorithm is developed based on the meta-heuristic approach proposed by Karaboga (2010).
0.165201 - The details of MEABCT algorithm are introduced as follows.
0.000000 - Step 1.
0.092692 - Generate the initial population of solutions Generate the SN solutions zi (i = 1, 2, … , SN) with D dimensions denoted by matrix Z (5) where zi,j is the jth component value that is restricted into [0, … , L] and the zi,j < zi,j+1 for all j.
0.123656 - The fitness of all solutions zi is evaluated and then set cycle = 1 and the trail number of each solution zi, traili, is equal to 0.
0.000000 - Step 2.
0.095923 - Place the employed bees on their food sources In Step 2, each employed bee produces a new solution vi by using (1) and computes the fitness value of the new solution.
0.105960 - If the fitness of the new one is higher than that of the previous one, the employed bee memorizes the new position and forgets the old one; otherwise the employed bee keeps the old solution.
0.000000 - Step 3.
0.099567 - Send the onlooker bees to the food sources depending on their amount of nectar In Step 3, we first calculate the probability value pi of the solution zi by means of their fitness values using (2).
0.104348 - An onlooker bee selects a solution to update its solution depending on the probabilities and determines a neighbor solution around the chosen one.
0.123325 - In the selection procedure for the first onlooker, a random number is produced between [0, 1] and if this number is less than p1, the solution is updated.
0.140426 - Otherwise, the random number is compared with p2 and if less than that, the second solution is chosen.
0.127854 - Otherwise, the third probability of third solution is checked.
0.065041 - This process is repeated until all onlookers have been distributed to solutions.
0.106061 - The distributed onlooker bee updates its own solution just as the employed bees do.
0.000000 - Step 4.
0.101545 - Send the scouts to the search area to discover new food sources If the solution zi is not improved through Steps 2 and 3, the traili value of solution zi will be increased by 1.
0.119904 - If the traili of solution is more than the predetermined “limit” the solution zi is considered to be an abandoned solution, meanwhile, the employed bee will be changed into a scout.
0.115942 - The scout randomly produces the new solution by (6) and then compares the fitness of new solution with that of its old one.
0.118947 - If the new solution is better than the old solution, it is replaced with the old one and set its own traili into 0.
0.018265 - This scout will be changed into an employed bee.
0.090580 - Otherwise, the old one is retained in the memory (6) where the zmin,j and zmax,j are the minimum and maximum of jth component of all solutions, the rand(0, 1) is a random number generating function that generates the random number between [0, 1].
0.000000 - Step 5.
0.106918 - Record the best solution In this step, the best solution so far is recorded and increases the cycle by 1.
0.000000 - Step 6.
0.149048 - Check the termination criterion If the cycle is equal to the maximum cycle number (MCN) then the algorithm is finished; otherwise go to Step 2.
0.115486 - We implement the all of the algorithms in Visual C++ 6.0 on a personal computer with 2.4 GHz CPU, 1G RAM running window XP system.
0.180426 - The designed programs are revised from ones given by the homepage of artificial bee colony algorithm (Karaboga, 2010).
0.099822 - Three control parameters that are the number of food sources which is equal to the number of employed bees or onlooker bees (SN), the value of “limit” and the maximum cycle number (MCN) are set in the colony size (SN) 30, MCN 100, and limit value 100.
0.196674 - Tables 1–3 show that the parameters of the other multilevel thresholding algorithms.
0.051282 - Five images named “LENA” “PEPPER” “BIRD” “CAMERA” and “GOLDHILL” are used for conducting our experiments.
0.032520 - These original test images and their histograms are shown in Fig 1.
0.000000 - Table 1.
0.167744 - Parameter set for the MEHBMOT algorithm.
0.030151 - Parameters Values Number of queens 1 Number of drones (m) 5 Number of iterations 100 Speed reduction schema (α) 0.98 Capacity of spermatheca (nsperm) 20 Speed of queen at first of flight 1.0 The breeding ratio (Pc) 0.8 Mutation ratio (Pm) 0.01 Mutation variation (ɛ) 0.5 Table 2.
0.167744 - Parameter set for the PSO algorithm.
0.069195 - Parameters Values Number of particles (S) 50 Velocities randomly (V) [−1.0, 1.0] Number of iterations (iter) 100 Cognitive coefficient (C1) 2.1 Cognitive coefficient (C2) 2.0 Φ = C1 + C2 4.1 0.729 Initialization range for the position of the particles [fmin, fmax] [0, 255] Table 3.
0.167744 - Parameter set for the HCOCLPSO algorithm.
0.079309 - Parameters Values Number of particles 50 Number of iterations 100 Initial inertia weight (ωinitial) 0.9 Slope of inertia weight (m1w) 2.5 × 10−4 1.49445 Initialization range for the position of the particles [fmin, fmax] [0, 255] Selection probability (Pc) 0.2 The test images and corresponding histograms Fig 1.
0.083333 - The test images and corresponding histograms.
0.155914 - The popular performance indicator, peak signal to noise ratio (PSNR), is used to compare the segmentation results by using the multilevel image threshold techniques (Yin, 2007).
0.112662 - For the sake of completeness we define PSNR, measured in decibel (dB) as (10) where RMSE is the root mean-squared error, defined as: (11) Here I and are original and segmented images of size M × N, respectively.
0.162602 - First, we execute the MEABCT algorithm on partitioning the five test images.
0.196674 - The exhaustive search is also conducted for deriving the optimal solution for comparison.
0.152905 - Table 4 shows the selected thresholds derived by the MEABCT algorithm and the optimal thresholds generated from the exhaustive search method.
0.197740 - We find that the selected thresholds of MEABCT algorithm are equivalent or very close to optimal thresholds derived by the exhaustive search methods.
0.156141 - Furthermore, we find that the computation times of exhaustive search method grows exponentially with the number of required thresholds.
0.160426 - Obviously, the computation needs for the exhaustive search are absolutely unacceptable for T ⩾ 4 (T: number of thresholds).
0.227434 - The computation times of the MEABCT algorithm is significantly faster compared to the exhaustive search algorithm.
0.000000 - Table 4.
0.196075 - The selection thresholds for five test images by using the MEABCT algorithm and the exhaustive search method (k: number of thresholds).
0.004963 - Image (size) k Exhaustive MEABCT Thresholds Computation time (ms) Thresholds Computation time (ms) LENA (512 × 512) 2 80,150 4.89 80,150 1.39 3 60,109,160 158.49 60,109,160 5.94 4 56,100,144,182 8290 56,100,144,182 24.39 5 44,79,114,150,185 451304 44,79,115,148,186 189.35 PEPPER (512 × 512) 2 74,146 3.73 74,146 1.45 3 61,112,164 145.58 61,112,164 5.98 4 57,104,148,194 7965 57,104,148,194 29.78 5 42,77,113,153,194 439784 42,77,113,153,194 187.35 BIRD (256 × 256) 2 71,138 4.13.
0.043605 - 71,138 1.12 3 70,129,177 132.67 70,129,177 2.89 4 51,96,139,177 6564 51,94,138,178 17.85 5 46,74,104,141,177 414789 46,74,105,142,177 109.35 CAMERA (256 × 256) 2 128,193 4.54 128,193 1.28 3 44,104,193 138.67 44,104,193 5.12 4 44,97,146,197 7169 44,97,146,197 22.58 5 40,84,119,155,197 439697 40,83,119,154,197 98.26 GOLDHILL (256 × 256) 2 90,157 5.57 90,157 1.39 3 79,132,178 140.17 79,132,178 5.16 4 67,108,151,191 7190 67,108,151,191 27.25 5 61,96,132,166,199 447429 59,96,131,167,199 124.69 For evaluating the performance of the proposed MEHBMOT algorithm, we have implemented this method on the five test images.
0.150162 - The performance metrics for checking the effectiveness of the method are chosen as the computation time so as to get an idea of complexity, and the PSNR which is used to determine the quality of the thresholded images.
0.130952 - Table 5 shows the selected thresholds, computation time, PSNR value and the corresponding fitness value of five test images with different thresholds.
0.039801 - This table provides quantitative standard for evaluating.
0.144783 - This table shows that the number of thresholds increase, the PSNR and the fitness value are enlarged.
0.000000 - Table 5.
0.095238 - Thresholds, computation times, PSNR values and Fitness values for test images by using MEABCT algorithm.
0.007964 - Image Number of thresholds Thresholds Computation time (ms) PSNR (dB) Fitness value LENA (512 × 512) 2 80,150 1.39 15.46 12.6990 3 60,109,160 5.94 18.55 15.7658 4 56,100,144,182 24.39 19.71 18.5875 5 44,79,115,148,186 189.35 21.68 21.2468 PEPPER (512 × 512) 2 74,146 1.45 16.47 12.6348 3 61,112,164 5.98 18.42 15.6892 4 57,104,148,194 29.78 19.21 18.5397 5 42,77,113,153,194 187.35 21.81 21.2830 BIRD (256 × 256) 2 71,138 1.12 17.44 11.1647 3 70,129,177 2.89 18.53 13.8659 4 51,94,138,178 17.85 20.84 16.4558 5 46,74,105,142,177 109.35 22.72 18.6961 CAMERA (256 × 256) 2 128,193 1.28 13.65 12.1688 3 44,104,193 5.12 14.61 15.2274 4 44,97,146,197 22.58 20.21 18.3995 5 40,83,119,154,197 98.26 22.59 21.0831 GOLDHILL (256 × 256) 2 90,157 1.39 14.26 12.5384 3 79,132,178 5.16 16.05 15.5957 4 67,108,151,191 27.25 18.60 18.3957 5 59,96,131,167,199 124.69 20.96 21.0934 The MEABCT and other four multilevel thresholding methods that are MEHBMOT, PSO, HCOCLPSO and Fast Otsu’s algorithm are implemented for the purpose of comparisons.
0.177215 - Table 6 shows the selected thresholds of the five test images.
0.154615 - It is interesting that the selected thresholds by the MEABCT algorithm are equivalent (for 2- or 3-threshold problems) or very close (4- or 5-threshold problem) to the ones MEHBMOT algorithm; nevertheless, there are significant differences of selected thresholds with regard to the Fast Otsu’s method.
0.163604 - This result reveals that the segmentation results depend heavily on the objective function that is selected.
0.184248 - Furthermore, the thresholds obtained by PSO algorithms in the segmentation of BIRD image are also distinct from the one of the MEABCT algorithm in 5-level thresholding.
0.213488 - It is possible to reveal that the PSO algorithm is unsuitable to search for thresholds.
0.153759 - Table 7 shows the computation time and the corresponding PSNR values of the four different multilevel thresholding methods.
0.109705 - The fitness values of corresponding thresholds are shown in Table 8.
0.076190 - Several aspects are found in the two tables.
0.148789 - The computation time of the MEABCT algorithm is between the MEHBMOT and PSO in the segmentation of LENA, PEPPER and BIRD images, but the corresponding PSNRs are greater than the ones of the MEHBNOT and PSO algorithms.
0.196431 - As to the segmentation of CAMERA and GOLDHILL images, the time complexity and PSNR values are superior to other four methods.
0.141546 - An aspect is found that the HCOCLPSO and the Fast Otsu’s method are not acceptable because of the heavy need of computation times.
0.136050 - Finally, from the corresponding the fitness values of selected thresholds using MEABCT algorithm it appears the fact that the selected thresholds of the MEABCT algorithm can effectively find the adequate solutions based on the maximum entropy criterion.
0.000000 - Table 6.
0.095238 - Thresholds, computation times, PSNR values and fitness values for test images by using MEABCT algorithm.
0.008260 - Image k Selected thresholds MEABCT MEHBMOT PSO HCOCLPSO Fast Otsu’s method LENA (512 × 512) 2 80,150 80,150 80,150 80,150 77,145 3 60,109,160 60,109,160 60,109,160 60,109,160 56,106,159 4 56,100,144,182 56,100,144,182 56,100,144,182 56,100,144,182 74,112,144,179 5 44,79,115,148,186 44,80,115,150,185 43,79,114,150,185 46,83,118,153,187 45,79,109,138,173 PEPPER (512 × 512) 2 74,146 74,146 74,146 74,146 67,134 3 61,112,164 61,112,164 72,135,193 61,112,164 61,117,165 4 57,104,148,194 57,104,148,194 58,105,148,194 57,104,148,194 46,85,125,168 5 42,77,113,153,194 42,77,113,153,194 43,77,113,153,194 42,77,114,154,194 41,77,111,145,176 BIRD (256 × 256) 2 71,138 71,138 71,138 71,138 68,124 3 70,129,177 70,129,177 70,129,177 70,130,177 65,116,159 4 51,96,139,177 51,96,139,177 51,94,138,177 51,96,140,177 58,96,131,163 5 46,74,104,141,177 46,74,104,141,177 51,96,139,177,248 44,71,97,139,177 57,93,128,155,177 CAMERA (256 × 256) 2 128,193 128,193 128,193 128,193 69,143 3 44,104,193 44,104,193 44,104,193 44,104,193 58,118,155 4 44,97,146,197 44,97,146,197 44,97,146,197 44,97,146,197 41,94,139,169 5 40,84,119,155,197 40,84,119,155,197 40,85,120,155,197 40,84,119,155,197 35,81,121,148,172 GOLDHILL (256 × 256) 2 90,157 90,157 90,157 90,157 93,160 3 79,132,178 79,132,178 79,132,178 79,132,178 82,125,178 4 67,108,151,191 67,108,151,191 66,107,151,191 65,104,144,186 69,102,137,185 5 61,96,132,166,199 61,96,132,166,199 58,94,132,166,199 61,96,132,166,199 62,90,116,146,190 Table 7.
0.159091 - The computation times and the corresponding PSNR of the five different multilevel thresholding methods.
0.009419 - Image k Computation times (ms)/PSNR (dB) (k: number of thresholds) MEABCT MEHBMOT PSO HCOCLPSO Fast Otsu’s method LENA (512 × 512) 2 1.39 15.46 1.45 15.46 1.36 15.46 1.69 15.46 1.95 15.57 3 5.94 18.55 6.95 18.55 4.89 18.55 13.58 18.55 32.68 18.55 4 24.39 19.71 23.65 19.71 25.69 19.71 169.5 19.71 1968 20.57 5 189.35 21.68 432.6 21.63 137.56 21.61 1158 21.56 18455 21.76 PEPPER (512 × 512) 2 1.45 16.47 1.87 16.47 1.56 16.47 2.26 16.47 1.96 16.27 3 5.98 18.42 6.78 18.42 5.23 17.40 18.43 18.42 54.34 18.47 4 29.78 19.21 36.76 19.21 28.43 19.23 219.6 19.21 2319 20.70 5 187.35 21.81 234.9 21.81 154.26 21.39 1086 21.41 16672 22.36 BIRD (256 × 256) 2 1.12 17.44 1.09 17.44 1.15 17.44 2.10 17.44 2.32 16.65 3 2.89 18.53 3.94 18.53 3.17 18.23 15.28 18.34 45.73 18.82 4 17.85 20.84 18.65 20.77 19.94 20.73 132.5 20.89 204.39 20.97 5 109.35 22.72 106.1 22.65 113.97 20.77 1153 22.20 13672 21.90 CAMERA (256 × 256) 2 1.28 13.65 1.95 13.65 1.34 13.65 2.25 13.65 3.58 17.20 3 5.12 14.61 4.25 14.61 4.56 14.61 16.59 14.61 36.54 20.23 4 22.58 20.21 24.69 20.21 23.56 20.21 112.5 20.21 352.2 21.53 5 98.26 22.59 159.2 22.53 127.43 22.38 925.5 22.33 15594 23.28 GOLDHILL (256 × 256) 2 1.39 14.26 1.29 14.26 1.43 14.26 2.26 14.26 3.58 14.05 3 5.16 16.05 6.52 16.05 5.12 16.05 19.25 16.05 36.54 15.55 4 27.25 18.60 26.98 18.60 25.67 18.55 135.4 18.74 352.2 18.39 5 124.69 20.96 201.9 20.85 143.78 20.08 1026 19.85 15594 20.05 Table 8.
0.149420 - The value of the objective function with regard with the corresponding thresholds listed in Table 6.
0.005041 - Image (size) k Fitness value MEABCT MEHBMOT PSO HCOCLPSO Fast Otsu’s method LENA (512 × 512) 2 12.6990 12.6990 12.6990 12.6990 12.6920 3 15.7658 15.7658 15.7658 15.7658 15.7591 4 18.5875 18.5875 18.5875 18.5875 18.5084 5 21.2468 21.2425 21.2400 21.2358 21.1301 PEPPER (512 × 512) 2 12.6348 12.6348 12.6348 12.6348 12.6044 3 15.6892 15.6892 15.5772 15.6892 15.6829 4 18.5397 18.5397 18.5395 18.5397 18.4699 5 21.2830 21.2830 21.2806 21.2804 21.1905 BIRD (256 × 256) 2 11.1647 11.1647 11.1647 11.1647 11.1149 3 13.8659 13.8659 13.8659 13.8659 13.6677 4 16.4558 16.4549 16.4543 16.4549 16.1819 5 18.6961 18.6913 16.4549 18.6520 18.4232 CAMERA (256 × 256) 2 12.1688 12.1688 12.1688 12.1688 11.3367 3 15.2274 15.2274 15.2274 15.2274 14.3235 4 18.3995 18.3955 18.3955 18.3955 17.2633 5 21.0831 21.0691 21.0680 21.0691 19.8241 GOLDHILL (256 × 256) 2 12.5384 12.5384 12.5384 12.5384 12.5343 3 15.5957 15.5957 15.5957 15.5957 15.5543 4 18.3957 18.3973 18.3966 18.3931 18.3499 5 21.0934 21.0817 21.0791 21.0817 20.8941
0.171254 - In this paper, we have proposed a method, called the MEABCT algorithm, for multilevel thresholds selection using the maximum entropy criterion.
0.250674 - The MEABCT algorithm simulates the behavior of honey bee foraging to develop the algorithm to select the adequate thresholds for image segmentation.
0.158229 - The segmentation results of MEABCT algorithm are promising and it encourages further researches for applying this algorithm to complex and real-time image analysis problems such as automatic target recognition and complex document analysis.

[Frase 34] The experimental results demonstrated that the result of the MEHBOT algorithm was superior to other algorithms such as the PSO, HCOLPSO and Fast Otsu’s methods.
[Frase 163] As to the segmentation of CAMERA and GOLDHILL images, the time complexity and PSNR values are superior to other four methods.
[Frase 162] The computation time of the MEABCT algorithm is between the MEHBMOT and PSO in the segmentation of LENA, PEPPER and BIRD images, but the corresponding PSNRs are greater than the ones of the MEHBNOT and PSO algorithms.
[Frase 3] In this paper, a new multilevel MET algorithm based on the technology of the artificial bee colony (ABC) algorithm is proposed: the maximum entropy based artificial bee colony thresholding (MEABCT) method.
