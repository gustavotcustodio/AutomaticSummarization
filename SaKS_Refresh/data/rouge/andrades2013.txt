Clustering and DEE techniques are combined with a SAT problem representation of the CPD problem. A knowledge-based method is combined with an ab initio strategy. Integrated Artificial Intelligence techniques are useful tools for the CPD problem. The proposed method was tested with eight protein sequences. Analysis reveal that the proposed method presents accurate results.

0.061538 - The Medical and Pharmaceutical industries have shown high interest in the precise engineering of protein hormones and enzymes that perform existing functions under a wide range of conditions.
0.074755 - Proteins are responsible for the execution of different functions in the cell: catalysis in chemical reactions, transport and storage, regulation and recognition control.
0.058537 - Computational Protein Design (CPD) investigates the relationship between 3-D structures of proteins and amino acid sequences and looks for all sequences that will fold into such 3-D structure.
0.080702 - Many computational methods and algorithms have been proposed over the last years, but the problem still remains a challenge for Mathematicians, Computer Scientists, Bioinformaticians and Structural Biologists.
0.144949 - In this article we present a new method for the protein design problem.
0.223587 - Clustering techniques and a Dead-End-Elimination algorithm are combined with a SAT problem representation of the CPD problem in order to design the amino acid sequences.
0.206318 - The obtained results illustrate the accuracy of the proposed method, suggesting that integrated Artificial Intelligence techniques are useful tools to solve such an intricate problem.
0.085109 - Computational Protein Design (CPD) is one of the most important research problems in Computational Molecular Biology (Lippow and Tidor, 1997; Tian, 2010).
0.071795 - The Medical and Pharmaceutical industries are widely interested in precisely understanding how to engineer protein hormones and enzymes that perform existing functions under a wide range of conditions.
0.057143 - Proteins are long sequences of 20 different amino acid residues that in physiological conditions adopt a unique 3-D structure (Lehninger et al., 2005).
0.055451 - This structure is important because it determines the function of the protein in the cell, for example, catalysis in chemical reactions, transport and storage, regulation, recognition and control (Lesk, 2002).
0.063781 - Protein design has become a powerful approach for understanding the relationship between amino acid sequence and 3-D structure and consequently to study the functional aspects of the protein (Sander et al., 1992).
0.086842 - The ability to design sequences compatible with a fold may also be useful in structural and functional Genomics, with the identification of functionally important domains in sequences of proteins.
0.094932 - The general goal of CPD is to identify an amino acid sequence that folds into a particular protein 3-D structure with a desired function (Fig 2).
0.069444 - Protein design can be considered as the inverse of the protein folding (PF) problem (Osguthorpe, 2000) because it starts with the structure rather than the sequence and looks for all sequences that will fold into such 3-D structure.
0.080897 - Considering that there are 20 naturally occurring amino acids for each position, the combinatorial complexity of the problem amounts to 20110 or 10130 (Floudas et al., 2006).
0.081159 - Over the last decade, a tremendous advance in protein design was witnessed.
0.079167 - The maturation of a number of component technologies, including optimization algorithms and combinatorial discrete search, contributed for advances in CPD research.
0.040678 - Techniques such as Dead-End-Elimination (Georgiev et al., 2008; Desmet et al., 1992), Integer Programing (Xie and Sahinidis, 2006) and Monte Carlo (Yang and Saven, 2005; Hom and Mayo, 2006; Allen and Mayo, 2006) have been applied to protein design, but the problem still remains very challenging.
0.104921 - In this article, we present a new method based on clustering strategy, Dead-End-Elimination techniques and SAT-based methods to determine the amino acid sequence of protein 3-D structures.
0.087407 - The remainder of the paper is structured as follows.
0.085333 - Section 2 contextualizes the protein design problem and basic concepts used in this article.
0.168687 - Section 3 introduces the computational and AI techniques used in the proposed method.
0.107937 - Section 4 introduces the new hybrid method for protein design.
0.096970 - Section 5 reports several results illustrating the effectiveness of our method.
0.025397 - Section 6 concludes and points out directions for further research.
0.068468 - Protein structure and protein design A peptide is a molecule composed of two or more amino acid residues chained by a bond called the peptide bond.
0.034188 - There are 20 different amino acid residues in nature (Lodish et al., 1990) and each amino acid residue is a molecule containing both amine and carboxyl functional groups.
0.037037 - The various amino acids differ in which side chain (R group) is attached to their alpha carbon (Lodish et al., 1990; Lehninger et al., 2005).
0.034783 - Larger peptides are generally referred to as polypeptides or proteins (Creighton, 1990).
0.027778 - A peptide has three main chain torsion angles, namely phi (ϕ), psi (ψ) and omega (ω).
0.050000 - In the model peptide (Fig 1) the bonds between N and Cα, and between Cα and C are free to rotate.
0.082540 - These rotations are described by the ϕ and ψ torsion angles, respectively.
0.052827 - The rotational freedom about the ϕ (Cα-N) and ψ (Cα-C) angles is limited by steric hindrance between the side chain of the residue and the peptide backbone.
0.064516 - Consequently, the possible conformation of a given polypeptide chain is quite limited (Ramachandran and Sasisekharan, 1968; Branden and Tooze, 1998).
0.059770 - Side-chains also present dihedral angles and the number of χ angles depends on the residue type (Table 1).
0.075914 - Chemical representation of two amino acid residues after the condensation… Fig 1.
0.079394 - Chemical representation of two amino acid residues after the condensation reaction.
0.073415 - The carboxyl group of one amino acid (amino acid 1) reacts with the amino group of the amino acid 2.
0.068687 - A molecule of water is removed from two amino acids to form a peptide bond and the ω angle is formed (peptide bond).
0.056140 - N is nitrogen, C and Cα are carbons.
0.134815 - Schematic representation of the Protein Desgin Problem Fig 2.
0.150000 - Schematic representation of the Protein Desgin Problem.
0.130501 - The CPD problem starts with the 3-D structure of a protein and looks for all sequences that will fold into such 3-D structure.
0.000000 - Table 1.
0.070510 - Number of χ angles in each of the 20 amino acids.
0.079407 - The χ angles are used to fix the position of side-chain atoms in each residue type.
0.037559 - Amino acid Number of χ angles GLY, ALA, PRO – SER, CYS, THR, VAL χ1 ILE, LEU, ASP, ASN, χ1,χ2 HIS, PHE, TYR, TRP MET, GLU, GLN χ1,χ2,χ3 LYS, ARG χ1,χ2,χ3,χ4 Protein design starts with the structure (set of torsion angles, for example) and looks for all sequences that will fold into such 3-D structure.
0.079444 - In rational protein design, the scientist uses detailed knowledge of the structure and function of the protein to make desired changes.
0.086520 - The design of proteins that fold to a specified target backbone structure is of great interest of the Medical and the Pharmaceutical Industries.
0.009877 - Additional material related to PD can be found in Dahiyat and Mayo (1997), Park et al.
0.012698 - (2011), Guerois and de La Paz (2006), Samish et al.
0.009195 - (2011), Hom and Mayo (2006), Yang and Saven (2005), Lippow and Tidor (1997), Tian (2010), Sander et al.
0.000000 - (1992), Voigt et al.
0.013333 - (2000), Pokala and Handel (2000) and Floudas et al.
0.000000 - (2006).
0.027451 - A good review about protein structure can be found in Tramontano (2006), Lesk (2002), Branden and Tooze (1998) and Altman and Dugan (2005).
0.082598 - Energy functions An energy function describes the internal energy of the protein and its interactions with the environment in which it is inserted.
0.069444 - In Protein design the goal is to find a sequence which generates a 3-D protein structure with the global minimum of free energy that corresponds to the native or functional state of the protein (Osguthorpe, 2000; Tramontano, 2006).
0.058333 - The energy function used for protein design still contain elements accounting for van der Waals force, electrostatics, solvation, and hydrogen bonding.
0.037333 - A potential energy function incorporates two main types of terms: bonded and non-bonded.
0.076190 - The bonded terms (bonds, angles and torsions) are covalently linked.
0.052174 - The bonded terms constrain bond lengths and angles near their equilibrium values.
0.062222 - The bonded terms also include a torsional potential (torsion) that models the periodic energy barriers encountered during bond rotation.
0.040000 - The non-bonded potential includes: ionic bonds, hydrophobic interactions, hydrogen bonds, van der Waals forces, and dipole–dipole bonds.
0.051613 - van der Waals force is usually described by the equation for Lennard--Jones 6–12 potential (Boas and Harbury (2007)).
0.063768 - There is a variety of potential energy functions used in protein design.
0.034409 - In this article we use the CHARMM potential energy function (Brooks et al., 1983; Field et al., 1998) (Eq (1)).
0.029630 - (1)∊∊ where Kb, KUB, Kθ, Kχ and Kimp are the bond, Urey Bradley angle (Hagler et al., 1979; Lifson and Warshel, 1968), dihedral angle and improper dihedral angle force constants, respectively; b, S, θ, χ and φ are the bond length, Urey-Bradley 1.3 distance, bond angle, dihedral angle and improper torsion angle, respectively.
0.079394 - The subscript zero represents the equilibrium value for the individual terms.
0.029471 - Coulomb and Lennard--Jones 6–12 terms contribute to the external or non-bonded interactions; ∊ is the Lennard--Jones (the depth of the potential well) and Rmin is the distance at the Lennard--Jones minimum, qi is the partial atomic charge, ∊1 is the effective dielectric constant, and rij is the distance between atoms i and j.
0.019048 - Reviews of protein energy functions and their application can be found in Lazaridis and Karplus (2000), Jorgensen and Tirado-Rives (2005), Gordon et al.
0.015686 - (1999) and Hao and Scheraga (1999).
0.066667 - The Boolean Satisfiability problem Boolean Satisfiability (SAT) is the problem of determining if a given propositional logic formula can be satisfied given suitable value assignments (Selman et al., 1992).
0.050575 - SAT is also a well-known NP-complete decision problem (Cook, 1971) and require worst-case exponential time.
0.090296 - However, state-of-the-art SAT algorithms are effective at coping with large search spaces by exploiting the problem structure when it exists (Marques-Silva, 2008).
0.038710 - Recently, SAT solvers have been applied in combinatorial problems such as protein folding and protein design (Gomes and Selman, 2005).
0.069565 - The notation for SAT instances usually follow the Conjunctive Nominal Form (CNF).
0.073759 - The CNF of a Boolean function is a function formula with the following structure: (2) where ci are referred as clauses and literal lj represents the variable xj or its negation ¬xj (Ollikainen et al., 2009).
0.051282 - Thus, adding clauses is equivalent to adding constraints to variables xj, reducing the search space.
0.076842 - Moreover, to describe a problem as a SAT instance, one add constraints encoded as clauses to ϕ until the SAT instance corresponds to the problem structure that is being solved.
0.050000 - For instance, in protein design we state a rule R that rotamers ru and rv cannot exist simultaneously in a protein.
0.060215 - If ri denotes the existence of rotamer i in a protein, then we can encode rule R as ¬(ru ∧ rv).
0.047053 - Since literals in SAT problems can be either a boolean variable or a boolean variable complement, constraint problems using SAT can only encode discrete search spaces.
0.054701 - Although there are SAT extensions to allow for continuous search spaces, we want to keep the original definition so we can rely on modern, faster SAT solving algorithms.
0.083454 - In this article we propose and describe a SAT-based model for protein design that allows to search in the protein design space in order to determine the amino acid sequence of knwon 3-D protein structures.
0.031111 - Supplementary material related with Boolean Satisfiability and its application can be found on Marques-Silva (2008), Wille et al.
0.000000 - (2008), Dixon et al.
0.014815 - (2004), Schaefer (1978) and Gomes et al.
0.000000 - (2008).
0.066667 - Dead-End-Elimination algorithms The Dead-End-Elimination algorithm (DEE) is a computational strategy that minimizes a function over a discrete set of independent variables (Gordon and Mayo, 1998).
0.068468 - The basic idea is to identify not allowed combinations of variables that cannot possibly yield the global minimum and to refrain from searching such combinations further.
0.057374 - These not allowed combinations, so-called dead-ends, can be excluded from further consideration, thereby significantly reducing the size of the combinatorial search space.
0.060111 - The original description and proof of the Dead-End-Elimination theorem can be found in Desmet et al.
0.000000 - (1992).
0.075121 - DEE is commonly used in Computational Protein Design for the combinatorial optimization problem of assigning amino acids at protein positions, where the energy of a desired protein structure should be minimized (Goldstein, 1994; Pierce et al., 2000).
0.063492 - Each position assignment of a DEE algorithm is a tuple Π → Λ × χ1 × χ2 × χ3 × χ4 where Λ is an aminoacid and χa,a ∈ [1, 4] is a torsion angle describing the aminoacid geometry.
0.036667 - Therefore, the combinatorial search is generated by applying all Π configurations in E. However, exploring all the generated search space is computationally intractable due to the large number of conformations.
0.058537 - The DEE comes in hand to reduce the search space generated by E excluding from the search the combination of Π assignments that possibly always evaluate to a higher energy state.
0.087778 - Each excluded Π assignments is a “dead-end” and is an input for the DEE algorithm to avoid exploring all search spaces.
0.086805 - If a lower energy state is found, the Π assignments that results in such energy state are combined as a “dead-end” with the previous “dead-ends” as input to a new iteration of the DEE algorithm, this time with a more complete description of “dead-ends”.
0.072872 - If the algorithm stops without finding a new Π assignment, we conclude that no lower energy state is possible and pick the last “dead-end” added as the best solution for the minimization problem.
0.051190 - Moreover, we may add as a condition that the algorithm halts whenever a lower bound of energy level is found, or a time constraint, as there is no guarantee that there is another lower energy state.
0.108571 - In the proposed method the search for a lower energy level and “dead-ends” used as input at each DEE algorithm iteration are modelled as SAT clauses (Ollikainen et al., 2009).
0.031111 - Additional material related with Dead-End-Elimination and its application to PD can be found in Schrauber et al.
0.000000 - (1993), Pierce et al.
0.000000 - (2000), Spriet (2003), Desmet et al.
0.014035 - (1992), Xie and Sahinidis (2006), Voigt et al.
0.000000 - (2000), Georgiev et al.
0.014035 - (2008), Georgiev and Donald (2007), Bhargavi et al.
0.016667 - (2003) and Ollikainen et al.
0.000000 - (2009).
0.079691 - Clustering algorithms Clustering techniques are applied when there is no class to be predicted but rather when the instances are to be divided into natural groups.
0.048780 - Cluster analysis or clustering can be defined as the process of organizing objects into groups whose instances are similar in some way (Everitt et al., 2011; Witten et al., 2011).
0.048980 - In the classical k-means clustering algorithm (MacQueen, 1967) a set of n data points (a1, a2, … , an) is partitioned into p groups S = {s1,s2, … ,sp} in order to minimize a function of quadratic error (Eq (3)).
0.064516 - (3) where ∥aj − μi∥2 is a chosen distance measure between a data point ai and the cluster center μi.
0.130159 - In the proposed method for protein design Expectation Maximization (EM) (Dempster et al., 1977) is used to data clustering.
0.069231 - This method estimates missing parameters of probabilistic models and is composed by two main steps: (1) The Expectation step related with the calculation of the cluster probabilities and (2) the Maximization step that computes the distribution parameters and their likelihood given the data.
0.050000 - The EM algorithm iterates until the parameters being optimized reach a fixpoint or until the log-likelihood function reaches its maximum.
0.061111 - A set of parameters are recomputed until a desired convergence value is achieved.
0.038095 - For each individual instance is assigned a probability a certain set of attribute values would assume given they were members of a specific cluster.
0.080808 - When compared with the K-means algorithm, EM has a strong statistical basis and is more robust to deal with noisy data.
0.080464 - A complete description of the EM algorithm can be found in Dempster et al.
0.016667 - (1977) and Witten et al.
0.000000 - (2011).
0.075676 - The proposed method for the protein design problem is composed of 6 steps: (1) obtaining structural data from experimentally determined proteins; (2) selecting side-chain rotamers from amino acid residues; (3) clustering long side-chain χ angles; (4) representing the protein conformational space in a Conjuntive Normal Form; (5) applying DEE to eliminate not allowed rotamers; (6) solving the formula and determining the amino acid sequence.
0.037037 - Below, each of these steps are detailed.
0.077419 - Obtaining structural data from experimentally determined proteins A set K = [a1.ϕ,a1.ψ,a1.χ1,a1.χ2, a1.χ3,a1.χ4; … ;an.ϕ,an.ψ, an.χ1,an.χ2,an.χ3,an.χ4] of torsion angles and the number of χ angles (Table 1) of each amino acid residue are used as input to the proposed method.
0.028070 - ai represent an unknown target amino acid residue.
0.041905 - Phi (ϕ), Psi (ψ), Chi1(χ1), Chi2 (χ2), Chi3 (χ3) and Chi4 (χ4) point out the backbone and side-chain torsion angles of each ai residue.
0.068520 - The backbone torsion angles (ϕ and ψ) of the protein are kept rigid and are used to search the Dunbrack Backbone-Dependent Library1 (Dunbrack and Karplus, 2003; Shapovalov and Dunbrack, 2011) for template conformations.
0.070588 - For each position i of an amino acid residue (ai) from the target sequence, rotamers are selected from the Dunbrack Backbone-Dependent Library.
0.078676 - A new library for the target amino acid sequence composed by n arrays of rotamers, one for each amino acid residue, is built.
0.060000 - The rotamers of different amino acid residues will be used to alter the target amino acid sequence in order to find sequence with the lowest potential energy (Fig 1).
0.053333 - Selecting side-chain rotamers from amino acid residues The previous step builds a set of possible rotamers (χ angles) for each amino acid residue i.
0.073118 - When this number of rotamers is large the problem becomes computationally intractable (Pierce and Winfree, 2002; Floudas et al., 2006).
0.069565 - For a small protein composed by 8 amino acid residues and assuming an average of 30 possible rotamers per amino acid residue, the number of possible sequences generated will be 6.561 × 1011(830) combinations.
0.061111 - This number grows rapidly when the number of amino acids residues is increased.
0.062500 - In this step the rotamer library is processed in order to decrease the number of χ conformations in the base protein library.
0.083333 - The rotamer probability is used to eliminate and reduce the number of rotamers.
0.045770 - The rotamer probability is provided by the Dunbrack backbone-dependent library (Eq (4)) (Shapovalov and Dunbrack, 2011) (4) where, for each rotamer r of a given residue type, the probability density estimate ρ(ϕ,ψ∣r) is calculated and the Bayes’ rule is used to invert this density to produce an estimate of the rotamer probability P(r∣ϕ,ψ) (Shapovalov and Dunbrack, 2011).
0.083208 - All rotamers with a probability less than 1% are discarded.
0.054545 - This procedure reduces the total number of rotamers in approximately 25%.
0.076421 - At the end of this step a reduced set of rotamers conformations containing only rotamers with a high probability is obtained (Fig 3-A).
0.074074 - Here, the reduced library is called ROTLIB.
0.106914 - Schematic representation of the clustering process Fig 3.
0.119739 - Schematic representation of the clustering process.
0.090909 - (A) represent the reduce library ROTLIB obtained after the probabilistic analysis.
0.084211 - (B) represents the clustering of side-chain χ angles.
0.077193 - (C) represent the reduced CLULIB library of rotamers.
0.066842 - Clustering long side-chain χ angles Despite the reduction of the number of rotamers obtained in the last step, the resulting rotamer library (ROTLIB) contains several conformations with small differences.
0.069114 - In turn this represents a redundancy in the rotamers associated to each amino acid residue of the backbone-dependent library.
0.064865 - In order to eliminate this redundancy and reduce the total number of rotamers of each amino acid residue a clustering strategy is applied (Section 3.3).
0.064368 - The Expectation Maximization (EM) algorithm (Dempster et al., 1977) is used to cluster the rotamers from the ROTLIB.
0.065041 - EM clustering algorithm considers the different probabilities of distribution of each individual cluster in order to identify which set of clusters are more favorable for a given set of rotamers.
0.066667 - It begins clustering the ri rotamers of ROTLIB based in the K-means algorithm (MacQueen, 1967) to obtain an initial solution.
0.061538 - K-means minimizes a function of quadratic error (Eq (3)), where p clusters are present.
0.065071 - After determining the initial solution, the probability of a ri rotamer belonging to one of the p clusters is calculated (Expectation step of the EM algorithm).
0.064646 - From this probability, distribution parameters are calculated and the probabilities of distribution for each cluster p are “Maximized” (Witten et al., 2011).
0.067033 - One of the input parameters of the clustering algorithm is the number of clusters to be identified.
0.066667 - Determining the optimal number of clusters is a difficult task and many strategies can be found in the literature (Dudoit and Fridlyand, 2002; Krzanowski and Lai, 1988).
0.092295 - A strategy to determine the optimal number of cluster was developed considering conformational proprieties of the biological data.
0.043243 - In nature the χ1 (N, CA, CB, ∗G∗) angle is subject to restrictions between the g side chain atom (s) and the main chain (Fig 4).
0.072222 - The different conformations of the side chain χ1 are refereed as gauche (+), trans and gauche (−).
0.038656 - The most abundant conformation is gauche (+) in which the g side-chain atom (s) is opposite to the residues of the carbonyl group of the main chain when viewed along the CB-CA bond.
0.040404 - The second most abundant conformation is trans in which the side-chain g atom (s) is opposite the main chain nitrogen (N).
0.041667 - The least abundant conformation is gauche (−) which occurs when the side chain is opposite the hydrogen substituent on the CA atom.
0.073118 - This conformation is unstable because the g atom is in close contact with the main chain CO and NH groups.
0.046847 - In general, for χ1 angle the gauche (+), trans and gauche (−) present its values close to −65.0°, 180.0°, 63.0°, respectively (Morris et al., 1992).
0.000000 - Bhargavi et al.
0.032520 - report the values of gauche (+), trans and gauche (−) to χ2 and χ3 (Bhargavi et al., 2003): χ2 (∼ −67.0°, ∼179.0°, ∼70.0°); χ3 (∼68.0°, ∼ −179.0°,∼ −67.0°).
0.073563 - In experimental observations the gauche (+), trans and gauche (−), there is a standard deviation of 30° around these values.
0.088056 - The patterns gauche (+), trans and gauche (−) and the standard deviation are used to determine the optimal number of the p clusters.
0.067273 - Side chain torsion angles of the amino acid Lysine Fig 4.
0.074074 - Side chain torsion angles of the amino acid Lysine.
0.037037 - The torsion angles are named χ1 (N,CA,CB,∗G∗), χ2 (CA,CB,∗G,∗D∗), χ3 (CB,∗G,∗D,∗E∗), χ4 (∗G,∗D,∗E,∗Z∗).
0.105556 - The rotamers with the same number of χ angles are selected from the ROTLIB.
0.084346 - For the χ1 and χ2 torsion angles the strategy begins the clustering process using p = 1.
0.091224 - If after the clustering process there is a cluster with a standard deviation above 30°, the number of clusters are increased (p = p + 1) and the clustering process is repeated.
0.069333 - The processs stop when all predicted clusters have a standard deviation less than 30°.
0.060952 - The central goal of this strategy is ensure that rotamers associated to a conformation pattern (gauche (+), trans and gauche (-)) do not occur in another.
0.068376 - Rotamers χ3 and χ4 are not clustered because the most external side-chain angles vary with great freedom whereas they can have less contact with neighbour side-chains.
0.080317 - In the clustering step only the χ1 and χ2 of the amino acid residues that present χ3 and χ4.
0.047059 - χ3 and χ4 are selected statically.
0.072727 - This property is enhanced if the neighbour side-chain has a smaller length, thus avoiding close contact with the long side-chain.
0.058824 - Therefore, the external angles of a rotamer side-chain (χ3 and χ4) suffer less energy restrictions thus obtaining a large degree of freedom.
0.074510 - The rotamer angles χ3 and χ4 of a cluster group are defined by the predominance of rotamer angles of gauche (+), trans and gauche (−).
0.065306 - For example, in a group with 10 rotamers where 7 residues have χ3 into gauche (−) and 6 residues with χ4 into trans, the resulting clustered rotamer of this group will have χ3 into gauche (−) and χ4 into trans.
0.073118 - After the clustering step the mean value of each cluster is used to built a new reduce library of rotamers.
0.013333 - Here, this new library is called CLULIB (Fig 3
0.069797 - The clustering step reduces the number of rotamers of the ROTLIB in approximately 50%.
0.117954 - Representing the protein conformational space in a CNF After the clustering step, the protein sequence space is represented as a SAT problem.
0.043343 - Let S = {rj=1, … ,rj=m} the set of m available rotamers obtained from the CLULIB for a position i of the unknown amino acid sequence K, than the target unknown amino acid sequence can be now represented as a set K = {Si=1, … ,Si=n}, where S is a set of available rotamers for the target amino acid residue in position i.
0.084741 - The SAT representation of the search space represents all possible solutions using all available rotamers rj.
0.048485 - Each rotamer residue related to an amino acid position i obtained from the library CLULIB is indexed as an unique boolean variable.
0.070370 - For each possible assignments of rotamers rj for a given position i in the unknown amino acid sequence a boolean clause is created (Fig 5).
0.017778 - SAT encoding Fig 5.
0.020513 - SAT encoding.
0.112281 - (A) represent the protein conformational space in CNF.
0.014035 - (B) Apply DEE to eliminate not allowed rotamers.
0.060606 - (C) Solve the CNF formula to determine the amino acid sequence.
0.021333 - Just one variable into each clause can be assigned as TRUE in a solution.
0.073415 - This encoding model ensure that rotamers of a given position will never be assigned to another position of the backbone.
0.079485 - In other words, constraint clauses are needed to ensures that no more than an unique rotamer will be assigned to a position of the main chain.
0.044444 - We added clauses to the CNF formula to restrict the assignment and to ensure this condition.
0.074074 - These constraints were defined for each clause combining the negation of each variable belonging to Si.
0.077388 - This SAT scheme generates a robust structured SAT-CNF that encodes all possible conformations of the solution space using all available rotamers present in S. 4.5.
0.053509 - Dead-End-Elimination to eliminate not allowed rotamers In a practical application of Protein design the search space must be even more constrained because of the long execution time.
0.100218 - Dead-End-Elimination is a powerful pruning method used to remove rotamers with little contribution to the stabilization of the tertiary structure of a polypeptide.
0.077350 - DEE reduces each Si set removing rotamers that increase the conformational energy of the structure.
0.058304 - The goal of the DEE algorithm is reduce the conformational search space allowing just the use of rotamers that correspond to the minimal global energy of the conformation.
0.053971 - Let rx and ry two possible rotamers for the position i of the unknown amino acid sequence, if rx always represents a more energy favorable reduction than ry in position i, the rotamer rx always makes the protein structure more stable and ry can be eliminated.
0.055914 - The CHARMM potential energy described in Section 2.2 was used to evaluate the energy of each rotamer E(ri).
0.080000 - A Goldstein DEE algorithm to constraint the generated CNF formula was developed based on the work of Goldstein (1994).
0.081720 - Therefore, the DEE method adds to the CNF formula an unitary negated clause for each pruned rotamer (Fig 5-B).
0.075914 - This eliminates the set of non-unusable rotamers of the solution sequences.
0.059844 - Solving the CNF formula to determine the amino acid sequence A SAT Solver must be applied in this boolean CNF clauses to generate the amino acid residues.
0.077419 - The SatZoo (Eén and Sorensson, 2004) SAT solver was used in this step to determine the amino acid sequences.
0.077233 - The proposed method was applied to design the amino acid sequence of eight fragments of seven 3-D protein structures obtained from the Protein Data Bank (PDB) (Berman et al., 2000): 1ARE (Hoffman et al., 1993) (Fig 6-A); 1ZDD (Starovasnik et al., 1997) (Fig 6-B); 1WG72.
0.000000 - (Fig 6-C); 2OMM (Sawaya et al., 2007) (Fig 6-D); 1J9I (de Beer et al., 2002) (Fig 6-E); 3DI0 (Girish et al., 2008) (Fig 6-F); 1OEH (Zahn, 2003) (Fig 6-G).
0.071980 - Fig 6 illustrates the 3-D structure of the proteins used in our experiments, those highlighted in magenta represent the target fragments used as input in our method.
0.101089 - Disparate segments of secondary structure were selected in order to evaluate the efficacy of the proposed method in different classes of 3-D protein structures.
0.080928 - Ribbon representation of 3-D protein structures of the seven study cases Fig 6.
0.088061 - Ribbon representation of 3-D protein structures of the seven study cases.
0.100000 - Magenta represents the target region used as input in our protein design method.
0.031644 - (A) Experimental 3-D structure of the protein with PDB ID = 1ARE; (B) Experimental 3-D structure of the protein with PDB ID = 1ZDD; (C) Experimental 3-D structure of the protein with PDB ID = 1WG7; (D) Experimental 3-D structure of the protein with PDB ID = 2OMM; (E) Experimental 3-D structure of the protein with PDB ID = 1J9I; (F) Experimental 3-D protein structure of the protein with PDB ID = 3DI0 and (G) Experimental 3-D structure of the protein with PDB ID = 1OEH.
0.040000 - Amino acid side chains are not shown for clarity.
0.000000 - Graphics were generated by PYMOL (Pymol Website, 2012).
0.060867 - (For interpretation of the references to colour in this figure legend, the reader is referred to the web version of this article.)
0.037567 - Table 2 column 1–4 present, respectively, the PDB identification number of the protein, the amino acid sequence of the selected segment of the 3-D structure, the number of amino acid residues of the segment and the location of this segment in the whole sequence of the native 3-D protein structure.
0.049407 - As input in our method we analyse the 3-D structure of each target segment and identify the number of side-chain torsion angles (χ angles) of each amino acid residue position of the target segment.
0.122304 - For each amino acid position on the target fragment we calculate the phi (ϕ), (ψ) and chi (χ) angles (Step 1 of the proposed CPD method).
0.000000 - Table 2.
0.016667 - Target 3-D protein structures.
0.093232 - Different segments/fragments of 3-D protein structures were selected from the PDB in order to evaluate the efficacy of the proposed method in different classes of proteins.
0.000000 - PDB ID Amino acid region N°.
0.050214 - of residues Amino acid window 1ARE -CTRAFARQEA- 10 8--17 1ZDD-1 -NMQCQRRF- 8 2--9 1ZDD-2 -EEQRNAKIKS- 10 20--29 1WG7 -EAAMQEKRNG- 10 128--136 2OMM -GNNQQNY- 7 1--7 1J9I -RGGGKGNEVL- 10 31--40 3DI0 -QRGGQGVISV- 10 296--305 1OEH -HGGGWGQP- 8 1--8 For each position of the target segment, rotamers are selected from the Dunbrack Backbone-Dependent Library (Step 2 of the proposed method).
0.097491 - All rotamers with a probability less than 1% are discarded resulting a reduction of 25% of the number of rotamers (Step 3).
0.073684 - The EM clustering algorithm is applied to the resulting data from Step 3 and a new library of rotamers is built containing a reduced number of rotamers.
0.069841 - The clustering procedure eliminates the redundancy of backbone-dependent library.
0.052632 - Table 3 shows for each target 3-D protein structure segment the number of rotamers obtained before and after the clustering stage, column 2 and 4 respectively.
0.068817 - As one can observe, the clustering step provides a reduction of approximately 30% in the number of rotamers (Table 4).
0.000000 - Table 3.
0.072727 - Number of rotamers and clauses after and before the clustering step.
0.077778 - The number of rotamers and clauses is considerably reduced after the clustering step.
0.048000 - This reduction considerably contributes to reduce the computational time to solve the SAT clauses.
0.066667 - SAT before the clustering step SAT after the clustering step PDB ID N°.
0.017778 - of rotamers/variables N°.
0.019048 - of clauses N°.
0.017778 - of rotamers/variables N°.
0.000000 - clauses 1ARE 261 5467 171 2665 1ZDD-1 313 6503 204 3314 1ZDD-2 352 7144 221 3370 1WG7 285 5571 155 1536 2OMM 266 5711 224 4490 1J9I 194 3010 145 1971 3DI0 199 3260 138 1522 1OEH 142 2701 121 2092 Table 4.
0.017778 - Rotamers and clauses reduction.
0.069841 - The clustering procedure eliminates the redundancy of backbone-dependent library.
0.072222 - After the clustering step the number of rotamers are reduced in approximately 30%.
0.079012 - The clustering step also contributes to a reduction of approximately 45% in the number of clauses.
0.000000 - PDB ID N°.
0.000000 - Rotamers (%) N°.
0.045595 - Clauses (%) 1ARE 34.48 51.25 1ZDD-1 34.82 49.04 1ZDD-2 37.22 52.83 1WG7 45.61 72.43 2OMM 15.79 21.38 1J9I 25.26 34.52 3DI0 30.65 53.31 1OEH 14.79 22.55 Average: 29.82 44.62 After the clustering step, the protein sequence space of each unknown amino acid residue from the target segment of the 3-D structure is represented as a SAT problem.
0.059069 - In this step, the search space shows all possible solutions using all available rotamers to an unknown amino acid residue of the segment.
0.050575 - Table 4 (Column 3 and 5) shows the number o clauses obtained after and before the clustering step.
0.061111 - As observed for each case study the number of clauses were considerably reduced.
0.045833 - This would in turn drastically reduce the processing time necessary to solve the SAT clauses and design the amino acid residue.
0.056410 - The clustering step contributes to reduce the number of clauses in approximately 45% (Table 4).
0.064993 - In the sequel, the Dead-End-Elimination strategy was applied to remove all rotamers that increase the conformational energy of the 3-D structure.
0.112464 - As described before a SAT solver is used to determine the amino acid sequences.
0.073904 - Table 5 shows the designed amino acid sequences for each target segment of the 3-D protein structure.
0.106667 - The obtained results present a precision of approximately 70%.
0.168421 - The obtained results elucidate the efficacy of the proposed method.
0.072381 - The results achieved by the method also showed superior or compatible performance when compared to other methods typically used and described in the literature.
0.000000 - Table 5.
0.017778 - Designed amino acid sequences.
0.064000 - Column 2 and 3 show the native and the designed amino acid sequence, respectively.
0.095238 - The designed sequences present an approximately precision of 70.0%.
0.070175 - Highlighted magenta residues represent the correctly designed residues.
0.000000 - Black residues indicate inaccurate designed residues.
0.031785 - PDB ID Native sequence Designed sequence Precision (%) 1ARE CTRAFARQEA CTRGNGQEG 60.0 1ZDD-1 NMQCQRRF NEQCQRRN 75.0 1ZDD-2 EEQRNAKIKS EEQRNGRDRC 50.0 1WG7 EAAMQEKRNG EGGEQERRNG 70.0 2OMM GNNQQNY GNNQQND 85.7 1J91 RGGGKGNEVL RGGGRGNETN 70.0 3DI0 QRGGQGVISV ERGGQGTNTT 40.0 1OEH HGGGWGQP DGGGNGQG 62.5 Average: 64.15 Table 6 shows a comparative analysis of amino acid compatibility between the amino acid residues of the native and designed sequence.
0.067033 - The properties of the side-chain of the designed and native sequence were analysed according their hydrophobicity.
0.072222 - The number of amino acid in an apolar or polar state were presented.
0.068817 - One can observe that in the largest number of cases the designed sequences maintain compatible results in terms of hydrophobicity.
0.000000 - Table 6.
0.017778 - Amino acid sequence compatibility.
0.000000 - Polar amino acid residues: ASP, GLU, LYS, ARG, HIS, SER, THR, GLN, ASN, TYR.
0.000000 - Apolar amino acid residues: ALA, VAL, LEU, ILE, MET, PHE, TRP.
0.040000 - Amino acid residues with special proprieties: GLY, CYS, PRO.
0.000000 - PDB ID N°.
0.000000 - Polar res.
0.000000 - Native N°.
0.000000 - Apolar res.
0.000000 - Native N°.
0.000000 - Polar res.
0.000000 - Designed N°.
0.000000 - Apolar res.
0.000000 - Designed N°.
0.000000 - Special res.
0.000000 - Native N°.
0.000000 - Special res.
0.000000 - Designed 1ARE 5 4 5 0 1 5 1ZDD-1 5 2 7 0 1 1 1ZDD-2 8 2 8 0 0 2 1WG7 6 2 7 0 1 3 2OMM 6 0 6 0 1 1 1J91 4 2 6 0 4 4 3DIO 4 3 7 0 3 3 1OEH 2 1 3 0 5 5
0.079279 - The general goal of a Computational Strategy to Protein design is to identify an amino acid sequence that folds into a particular protein 3-D structure.
0.058095 - In this article we presented a new strategy to design protein sequences from 3-D protein structures determined experimentally.
0.128989 - The obtained results illustrate the efficacy of the proposed strategy.
0.082017 - The main goal of the developed strategy was to design in an efficient way approximate sequences of target protein structures.
0.096842 - The overall contribution of this work is threefold: First, the use of AI and computational techniques and concepts to develop a new, effective algorithm for the protein design problem.
0.057143 - Second, the use of clustering strategy to reduce the number of rotamers which in turn reduce the number of SAT clauses to be solved.
0.068966 - Third, the use of a Dead-End-Elimination strategy to pruning bad solutions in the set of clauses.
0.064593 - This opens several interesting research avenues, with a range of applications in computational biology and bioinformatics.
0.061604 - For instance, one could apply the developed method to other classes of proteins; second, one could test other different clustering algorithms; third, one could test the use of different pruning techniques to reduce the number of SAT clauses eliminating the rotamers that increase the potential energy of the 3-D structure of the polypeptide.
0.056211 - 1 The backbone-dependent rotamer library consists of rotamer frequencies, mean dihedral angles and variances of the backbone dihedral angle.
0.000000 - 2 http://www.rcsb.org/pdb/explore/explore.do?structureId=1WG7

[Frase 6] Clustering techniques and a Dead-End-Elimination algorithm are combined with a SAT problem representation of the CPD problem in order to design the amino acid sequences.
[Frase 7] The obtained results illustrate the accuracy of the proposed method, suggesting that integrated Artificial Intelligence techniques are useful tools to solve such an intricate problem.
[Frase 44] The CPD problem starts with the 3-D structure of a protein and looks for all sequences that will fold into such 3-D structure.
[Frase 20] In this article, we present a new method based on clustering strategy, Dead-End-Elimination techniques and SAT-based methods to determine the amino acid sequence of protein 3-D structures.
